Search.setIndex({"alltitles": {"ABS": [[1371, "abs"]], "ACOS": [[1374, "acos"]], "ACOSD": [[1374, "acosd"]], "ARRAY_AGG": [[1367, "array-agg"]], "ARRAY_CONTAINS": [[1367, "array-contains"]], "ARRAY_GET": [[1367, "array-get"]], "ARRAY_LENGTH": [[1367, "array-length"]], "ARRAY_LOWER": [[1367, "array-lower"]], "ARRAY_MEAN": [[1367, "array-mean"]], "ARRAY_REVERSE": [[1367, "array-reverse"]], "ARRAY_SUM": [[1367, "array-sum"]], "ARRAY_TO_STRING": [[1367, "array-to-string"]], "ARRAY_UNIQUE": [[1367, "array-unique"]], "ARRAY_UPPER": [[1367, "array-upper"]], "ASIN": [[1374, "asin"]], "ASIND": [[1374, "asind"]], "ATAN": [[1374, "atan"]], "ATAN2": [[1374, "atan2"]], "ATAN2D": [[1374, "atan2d"]], "ATAND": [[1374, "atand"]], "AVG": [[1366, "avg"]], "Aggregate": [[1366, null]], "Aggregation": [[203, null], [356, null], [852, null], [961, null]], "Aliases": [[1366, null], [1366, null], [1371, null], [1371, null], [1372, null], [1372, null]], "Array": [[830, null], [1341, null], [1367, null]], "Asserts": [[1380, "asserts"]], "Attributes": [[344, null], [949, null], [1342, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[851, "avro"]], "BIT_AND": [[1368, "bit-and"]], "BIT_COUNT": [[1368, "bit-count"]], "BIT_LENGTH": [[1372, "bit-length"]], "BIT_OR": [[1368, "bit-or"]], "BIT_XOR": [[1368, "bit-xor"]], "Binary": [[831, null], [844, "binary"], [1343, null]], "Bitwise": [[1368, null]], "Boolean": [[832, null], [1344, null]], "CAST": [[1375, "cast"]], "CBRT": [[1371, "cbrt"]], "CEIL": [[1371, "ceil"]], "COALESCE": [[1369, "coalesce"]], "CONCAT": [[1372, "concat"]], "CONCAT_WS": [[1372, "concat-ws"]], "COS": [[1374, "cos"]], "COSD": [[1374, "cosd"]], "COT": [[1374, "cot"]], "COTD": [[1374, "cotd"]], "COUNT": [[1366, "count"]], "CREATE TABLE": [[1379, "create-table"]], "CSV": [[851, "csv"]], "Catalog": [[200, null]], "Categories": [[833, null], [1345, null]], "Clipboard": [[851, "clipboard"]], "Cloud Credentials": [[851, "cloud-credentials"]], "Columns / names": [[835, null]], "Comparison": [[844, "comparison"], [1353, "comparison"]], "Computation": [[345, null], [836, null], [1346, null]], "Conditional": [[1369, null]], "Config": [[202, null]], "Config load, save, state": [[202, "config-load-save-state"]], "Config options": [[202, "config-options"]], "Conjunction": [[844, "conjunction"]], "Conversion": [[849, "conversion"]], "DATE": [[1372, "date"]], "DATE_PART": [[1373, "date-part"]], "DEGREES": [[1374, "degrees"]], "DELETE": [[1379, "delete"]], "DISTINCT": [[1365, "distinct"]], "DIV": [[1371, "div"]], "DROP TABLES": [[1379, "drop-tables"]], "Data types": [[354, null]], "DataFrame": [[349, null]], "DataType": [[354, "datatype"]], "Database": [[851, "database"]], "Delta Lake": [[851, "delta-lake"]], "Descriptive": [[346, null], [950, null], [1347, null]], "Documentation": [[1377, null], [1377, null], [1377, null]], "ENDS_WITH": [[1372, "ends-with"]], "EXCEPT": [[1378, "except"]], "EXP": [[1371, "exp"]], "EXPLAIN": [[1379, "explain"]], "EXTRACT": [[1373, "extract"]], "Errors": [[355, "errors"]], "Examples": [[1, "examples"], [960, "examples"], [1380, "examples"]], "Excel / ODS": [[851, "excel-ods"]], "Exceptions": [[355, null]], "Export": [[347, null], [1348, null]], "Expression SQL": [[1377, "expression-sql"]], "Expression plugins": [[958, "expression-plugins"]], "Expressions": [[838, null]], "Extending the API": [[1, null]], "FIRST": [[1366, "first"]], "FLOOR": [[1371, "floor"]], "FROM": [[1365, "from"]], "Feather / IPC": [[851, "feather-ipc"]], "Frame SQL": [[1377, "frame-sql"]], "Functions": [[837, null], [849, null], [960, "functions"]], "GPUEngine": [[951, null]], "GREATEST": [[1369, "greatest"]], "GROUP BY": [[1365, "group-by"]], "Global SQL": [[1377, "global-sql"]], "GroupBy": [[348, null], [952, null]], "HAVING": [[1365, "having"]], "IF": [[1369, "if"]], "IFNULL": [[1369, "ifnull"]], "INITCAP": [[1372, "initcap"]], "INTERSECT": [[1378, "intersect"]], "IO plugins": [[958, "io-plugins"]], "Iceberg": [[851, "iceberg"]], "Importing": [[960, "importing"]], "InProcessQuery": [[953, null]], "Index": [[0, null]], "Input/output": [[851, null]], "Introduction": [[1377, "introduction"]], "JOIN": [[1365, "join"]], "JSON": [[851, "json"]], "LAST": [[1366, "last"]], "LEAST": [[1369, "least"]], "LEFT": [[1372, "left"]], "LENGTH": [[1372, "length"]], "LIMIT": [[1365, "limit"]], "LN": [[1371, "ln"]], "LOG": [[1371, "log"]], "LOG10": [[1371, "log10"]], "LOG1P": [[1371, "log1p"]], "LOG2": [[1371, "log2"]], "LOWER": [[1372, "lower"]], "LTRIM": [[1372, "ltrim"]], "LazyFrame": [[954, null]], "List": [[839, null], [1350, null]], "MAX": [[1366, "max"]], "MEDIAN": [[1366, "median"]], "MIN": [[1366, "min"]], "MOD": [[1371, "mod"]], "Manipulation/selection": [[351, null], [842, null], [956, null], [1352, null]], "Math": [[1371, null]], "Meta": [[840, null]], "Metadata": [[957, null]], "Methods": [[1377, "methods"]], "Miscellaneous": [[350, null], [841, null], [849, "miscellaneous"], [955, null], [1351, null]], "Multiple Config instances": [[202, "multiple-config-instances"]], "Multiple queries": [[849, "multiple-queries"]], "NORMALIZE": [[1372, "normalize"]], "NULLIF": [[1369, "nullif"]], "Name": [[843, null]], "Nested": [[354, "nested"]], "Numeric": [[354, "numeric"], [844, "numeric"], [1353, "numeric"]], "OCTET_LENGTH": [[1372, "octet-length"]], "OFFSET": [[1365, "offset"]], "ORDER BY": [[1365, "order-by"]], "Operators": [[844, null], [1353, null]], "Other": [[354, "other"]], "PI": [[1371, "pi"]], "POW": [[1371, "pow"]], "Panic": [[355, "panic"]], "Parametric testing": [[1380, "parametric-testing"]], "Parquet": [[851, "parquet"]], "Partition": [[851, "partition"]], "Plot": [[352, null], [1354, null]], "Plugins": [[958, null]], "Polars strategies": [[1380, "polars-strategies"]], "Profiles": [[1380, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[851, "pyarrow-datasets"]], "Python API": [[1377, null]], "Python API reference": [[850, null]], "QUANTILE_CONT": [[1366, "quantile-cont"]], "QUANTILE_DISC": [[1366, "quantile-disc"]], "Querying": [[1377, "querying"]], "RADIANS": [[1374, "radians"]], "REGEXP_LIKE": [[1372, "regexp-like"]], "REPLACE": [[1372, "replace"]], "REVERSE": [[1372, "reverse"]], "RIGHT": [[1372, "right"]], "ROUND": [[1371, "round"]], "RTRIM": [[1372, "rtrim"]], "Random": [[849, "random"]], "SELECT": [[1365, "select"]], "SHOW TABLES": [[1379, "show-tables"]], "SIGN": [[1371, "sign"]], "SIN": [[1374, "sin"]], "SIND": [[1374, "sind"]], "SPLIT_PART": [[1372, "split-part"]], "SQL Clauses": [[1365, null]], "SQL Functions": [[1370, null]], "SQL Interface": [[1376, null]], "SQLContext": [[1377, "sqlcontext"]], "SQRT": [[1371, "sqrt"]], "STARTS_WITH": [[1372, "starts-with"]], "STDDEV": [[1366, "stddev"]], "STRFTIME": [[1373, "strftime"]], "STRING_TO_ARRAY": [[1372, "string-to-array"]], "STRPOS": [[1372, "strpos"]], "STRPTIME": [[1372, "strptime"]], "SUBSTR": [[1372, "substr"]], "SUM": [[1366, "sum"]], "Schema": [[959, null]], "Selectors": [[960, null]], "Serialization": [[350, "serialization"], [955, "serialization"]], "Series": [[1349, null]], "Set Operations": [[1378, null]], "Set operations": [[960, "set-operations"]], "Strategy helpers": [[1380, "strategy-helpers"]], "String": [[354, "string"], [845, null], [1355, null], [1372, null]], "StringCache": [[849, "stringcache"]], "Struct": [[846, null], [1356, null]], "Style": [[353, null]], "TAN": [[1374, "tan"]], "TAND": [[1374, "tand"]], "TIMESTAMP": [[1372, "timestamp"]], "TRUNCATE": [[1379, "truncate"]], "TRY_CAST": [[1375, "try-cast"]], "Table Operations": [[1379, null]], "Temporal": [[354, "temporal"], [847, null], [1357, null], [1373, null]], "Testing": [[1380, null]], "Trigonometry": [[1374, null]], "Types": [[1375, null]], "UNION": [[1378, "union"]], "UNION ALL": [[1378, "union-all"]], "UNION BY NAME": [[1378, "union-by-name"]], "UNNEST": [[1367, "unnest"], [1379, "unnest"]], "UPPER": [[1372, "upper"]], "Unity Catalog": [[201, null]], "Use as a context manager": [[202, "use-as-a-context-manager"]], "Use as a decorator": [[202, "use-as-a-decorator"]], "VARIANCE": [[1366, "variance"]], "WHERE": [[1365, "where"]], "Warnings": [[355, "warnings"]], "Window": [[848, null]], "polars.Catalog": [[187, null]], "polars.Catalog.get_table_info": [[188, null]], "polars.Catalog.list_catalogs": [[189, null]], "polars.Catalog.list_namespaces": [[190, null]], "polars.Catalog.list_tables": [[191, null]], "polars.Catalog.scan_table": [[192, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[204, null]], "polars.DataFrame.__arrow_c_stream__": [[205, null]], "polars.DataFrame.__dataframe__": [[206, null]], "polars.DataFrame.__getitem__": [[207, null]], "polars.DataFrame.approx_n_unique": [[208, null]], "polars.DataFrame.bottom_k": [[209, null]], "polars.DataFrame.cast": [[210, null]], "polars.DataFrame.clear": [[211, null]], "polars.DataFrame.clone": [[212, null]], "polars.DataFrame.collect_schema": [[213, null]], "polars.DataFrame.columns": [[214, null]], "polars.DataFrame.corr": [[215, null]], "polars.DataFrame.count": [[216, null]], "polars.DataFrame.describe": [[217, null]], "polars.DataFrame.deserialize": [[218, null]], "polars.DataFrame.drop": [[219, null]], "polars.DataFrame.drop_in_place": [[220, null]], "polars.DataFrame.drop_nans": [[221, null]], "polars.DataFrame.drop_nulls": [[222, null]], "polars.DataFrame.dtypes": [[223, null]], "polars.DataFrame.equals": [[224, null]], "polars.DataFrame.estimated_size": [[225, null]], "polars.DataFrame.explode": [[226, null]], "polars.DataFrame.extend": [[227, null]], "polars.DataFrame.fill_nan": [[228, null]], "polars.DataFrame.fill_null": [[229, null]], "polars.DataFrame.filter": [[230, null]], "polars.DataFrame.flags": [[231, null]], "polars.DataFrame.fold": [[232, null]], "polars.DataFrame.gather_every": [[233, null]], "polars.DataFrame.get_column": [[234, null]], "polars.DataFrame.get_column_index": [[235, null]], "polars.DataFrame.get_columns": [[236, null]], "polars.DataFrame.glimpse": [[237, null]], "polars.DataFrame.group_by": [[238, null]], "polars.DataFrame.group_by_dynamic": [[239, null]], "polars.DataFrame.hash_rows": [[240, null]], "polars.DataFrame.head": [[241, null]], "polars.DataFrame.height": [[242, null]], "polars.DataFrame.hstack": [[243, null]], "polars.DataFrame.insert_column": [[244, null]], "polars.DataFrame.interpolate": [[245, null]], "polars.DataFrame.is_duplicated": [[246, null]], "polars.DataFrame.is_empty": [[247, null]], "polars.DataFrame.is_unique": [[248, null]], "polars.DataFrame.item": [[249, null]], "polars.DataFrame.iter_columns": [[250, null]], "polars.DataFrame.iter_rows": [[251, null]], "polars.DataFrame.iter_slices": [[252, null]], "polars.DataFrame.join": [[253, null]], "polars.DataFrame.join_asof": [[254, null]], "polars.DataFrame.join_where": [[255, null]], "polars.DataFrame.lazy": [[256, null]], "polars.DataFrame.limit": [[257, null]], "polars.DataFrame.map_rows": [[258, null]], "polars.DataFrame.max": [[259, null]], "polars.DataFrame.max_horizontal": [[260, null]], "polars.DataFrame.mean": [[261, null]], "polars.DataFrame.mean_horizontal": [[262, null]], "polars.DataFrame.median": [[263, null]], "polars.DataFrame.melt": [[264, null]], "polars.DataFrame.merge_sorted": [[265, null]], "polars.DataFrame.min": [[266, null]], "polars.DataFrame.min_horizontal": [[267, null]], "polars.DataFrame.n_chunks": [[268, null]], "polars.DataFrame.n_unique": [[269, null]], "polars.DataFrame.null_count": [[270, null]], "polars.DataFrame.partition_by": [[271, null]], "polars.DataFrame.pipe": [[272, null]], "polars.DataFrame.pivot": [[273, null]], "polars.DataFrame.product": [[274, null]], "polars.DataFrame.quantile": [[275, null]], "polars.DataFrame.rechunk": [[276, null]], "polars.DataFrame.remove": [[277, null]], "polars.DataFrame.rename": [[278, null]], "polars.DataFrame.replace_column": [[279, null]], "polars.DataFrame.reverse": [[280, null]], "polars.DataFrame.rolling": [[281, null]], "polars.DataFrame.row": [[282, null]], "polars.DataFrame.rows": [[283, null]], "polars.DataFrame.rows_by_key": [[284, null]], "polars.DataFrame.sample": [[285, null]], "polars.DataFrame.schema": [[286, null]], "polars.DataFrame.select": [[287, null]], "polars.DataFrame.select_seq": [[288, null]], "polars.DataFrame.serialize": [[289, null]], "polars.DataFrame.set_sorted": [[290, null]], "polars.DataFrame.shape": [[291, null]], "polars.DataFrame.shift": [[292, null]], "polars.DataFrame.shrink_to_fit": [[293, null]], "polars.DataFrame.slice": [[294, null]], "polars.DataFrame.sort": [[295, null]], "polars.DataFrame.sql": [[296, null]], "polars.DataFrame.std": [[297, null]], "polars.DataFrame.sum": [[298, null]], "polars.DataFrame.sum_horizontal": [[299, null]], "polars.DataFrame.tail": [[300, null]], "polars.DataFrame.to_arrow": [[301, null]], "polars.DataFrame.to_dict": [[302, null]], "polars.DataFrame.to_dicts": [[303, null]], "polars.DataFrame.to_dummies": [[304, null]], "polars.DataFrame.to_init_repr": [[305, null]], "polars.DataFrame.to_jax": [[306, null]], "polars.DataFrame.to_numpy": [[307, null]], "polars.DataFrame.to_pandas": [[308, null]], "polars.DataFrame.to_series": [[309, null]], "polars.DataFrame.to_struct": [[310, null]], "polars.DataFrame.to_torch": [[311, null]], "polars.DataFrame.top_k": [[312, null]], "polars.DataFrame.transpose": [[313, null]], "polars.DataFrame.unique": [[314, null]], "polars.DataFrame.unnest": [[315, null]], "polars.DataFrame.unpivot": [[316, null]], "polars.DataFrame.unstack": [[317, null]], "polars.DataFrame.update": [[318, null]], "polars.DataFrame.upsample": [[319, null]], "polars.DataFrame.var": [[320, null]], "polars.DataFrame.vstack": [[321, null]], "polars.DataFrame.width": [[322, null]], "polars.DataFrame.with_columns": [[323, null]], "polars.DataFrame.with_columns_seq": [[324, null]], "polars.DataFrame.with_row_count": [[325, null]], "polars.DataFrame.with_row_index": [[326, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.Expr.abs": [[357, null]], "polars.Expr.add": [[358, null]], "polars.Expr.agg_groups": [[359, null]], "polars.Expr.alias": [[360, null]], "polars.Expr.all": [[361, null]], "polars.Expr.and_": [[362, null]], "polars.Expr.any": [[363, null]], "polars.Expr.append": [[364, null]], "polars.Expr.approx_n_unique": [[365, null]], "polars.Expr.arccos": [[366, null]], "polars.Expr.arccosh": [[367, null]], "polars.Expr.arcsin": [[368, null]], "polars.Expr.arcsinh": [[369, null]], "polars.Expr.arctan": [[370, null]], "polars.Expr.arctanh": [[371, null]], "polars.Expr.arg_max": [[372, null]], "polars.Expr.arg_min": [[373, null]], "polars.Expr.arg_sort": [[374, null]], "polars.Expr.arg_true": [[375, null]], "polars.Expr.arg_unique": [[376, null]], "polars.Expr.arr.all": [[377, null]], "polars.Expr.arr.any": [[378, null]], "polars.Expr.arr.arg_max": [[379, null]], "polars.Expr.arr.arg_min": [[380, null]], "polars.Expr.arr.contains": [[381, null]], "polars.Expr.arr.count_matches": [[382, null]], "polars.Expr.arr.explode": [[383, null]], "polars.Expr.arr.first": [[384, null]], "polars.Expr.arr.get": [[385, null]], "polars.Expr.arr.join": [[386, null]], "polars.Expr.arr.last": [[387, null]], "polars.Expr.arr.max": [[388, null]], "polars.Expr.arr.median": [[389, null]], "polars.Expr.arr.min": [[390, null]], "polars.Expr.arr.n_unique": [[391, null]], "polars.Expr.arr.reverse": [[392, null]], "polars.Expr.arr.shift": [[393, null]], "polars.Expr.arr.sort": [[394, null]], "polars.Expr.arr.std": [[395, null]], "polars.Expr.arr.sum": [[396, null]], "polars.Expr.arr.to_list": [[397, null]], "polars.Expr.arr.to_struct": [[398, null]], "polars.Expr.arr.unique": [[399, null]], "polars.Expr.arr.var": [[400, null]], "polars.Expr.bin.contains": [[401, null]], "polars.Expr.bin.decode": [[402, null]], "polars.Expr.bin.encode": [[403, null]], "polars.Expr.bin.ends_with": [[404, null]], "polars.Expr.bin.reinterpret": [[405, null]], "polars.Expr.bin.size": [[406, null]], "polars.Expr.bin.starts_with": [[407, null]], "polars.Expr.bitwise_and": [[408, null]], "polars.Expr.bitwise_count_ones": [[409, null]], "polars.Expr.bitwise_count_zeros": [[410, null]], "polars.Expr.bitwise_leading_ones": [[411, null]], "polars.Expr.bitwise_leading_zeros": [[412, null]], "polars.Expr.bitwise_or": [[413, null]], "polars.Expr.bitwise_trailing_ones": [[414, null]], "polars.Expr.bitwise_trailing_zeros": [[415, null]], "polars.Expr.bitwise_xor": [[416, null]], "polars.Expr.bottom_k": [[417, null]], "polars.Expr.bottom_k_by": [[418, null]], "polars.Expr.cast": [[419, null]], "polars.Expr.cat.ends_with": [[420, null]], "polars.Expr.cat.get_categories": [[421, null]], "polars.Expr.cat.len_bytes": [[422, null]], "polars.Expr.cat.len_chars": [[423, null]], "polars.Expr.cat.starts_with": [[424, null]], "polars.Expr.cbrt": [[425, null]], "polars.Expr.ceil": [[426, null]], "polars.Expr.clip": [[427, null]], "polars.Expr.cos": [[428, null]], "polars.Expr.cosh": [[429, null]], "polars.Expr.cot": [[430, null]], "polars.Expr.count": [[431, null]], "polars.Expr.cum_count": [[432, null]], "polars.Expr.cum_max": [[433, null]], "polars.Expr.cum_min": [[434, null]], "polars.Expr.cum_prod": [[435, null]], "polars.Expr.cum_sum": [[436, null]], "polars.Expr.cumulative_eval": [[437, null]], "polars.Expr.cut": [[438, null]], "polars.Expr.degrees": [[439, null]], "polars.Expr.deserialize": [[440, null]], "polars.Expr.diff": [[441, null]], "polars.Expr.dot": [[442, null]], "polars.Expr.drop_nans": [[443, null]], "polars.Expr.drop_nulls": [[444, null]], "polars.Expr.dt.add_business_days": [[445, null]], "polars.Expr.dt.base_utc_offset": [[446, null]], "polars.Expr.dt.cast_time_unit": [[447, null]], "polars.Expr.dt.century": [[448, null]], "polars.Expr.dt.combine": [[449, null]], "polars.Expr.dt.convert_time_zone": [[450, null]], "polars.Expr.dt.date": [[451, null]], "polars.Expr.dt.datetime": [[452, null]], "polars.Expr.dt.day": [[453, null]], "polars.Expr.dt.dst_offset": [[454, null]], "polars.Expr.dt.epoch": [[455, null]], "polars.Expr.dt.hour": [[456, null]], "polars.Expr.dt.is_leap_year": [[457, null]], "polars.Expr.dt.iso_year": [[458, null]], "polars.Expr.dt.microsecond": [[459, null]], "polars.Expr.dt.millennium": [[460, null]], "polars.Expr.dt.millisecond": [[461, null]], "polars.Expr.dt.minute": [[462, null]], "polars.Expr.dt.month": [[463, null]], "polars.Expr.dt.month_end": [[464, null]], "polars.Expr.dt.month_start": [[465, null]], "polars.Expr.dt.nanosecond": [[466, null]], "polars.Expr.dt.offset_by": [[467, null]], "polars.Expr.dt.ordinal_day": [[468, null]], "polars.Expr.dt.quarter": [[469, null]], "polars.Expr.dt.replace": [[470, null]], "polars.Expr.dt.replace_time_zone": [[471, null]], "polars.Expr.dt.round": [[472, null]], "polars.Expr.dt.second": [[473, null]], "polars.Expr.dt.strftime": [[474, null]], "polars.Expr.dt.time": [[475, null]], "polars.Expr.dt.timestamp": [[476, null]], "polars.Expr.dt.to_string": [[477, null]], "polars.Expr.dt.total_days": [[478, null]], "polars.Expr.dt.total_hours": [[479, null]], "polars.Expr.dt.total_microseconds": [[480, null]], "polars.Expr.dt.total_milliseconds": [[481, null]], "polars.Expr.dt.total_minutes": [[482, null]], "polars.Expr.dt.total_nanoseconds": [[483, null]], "polars.Expr.dt.total_seconds": [[484, null]], "polars.Expr.dt.truncate": [[485, null]], "polars.Expr.dt.week": [[486, null]], "polars.Expr.dt.weekday": [[487, null]], "polars.Expr.dt.with_time_unit": [[488, null]], "polars.Expr.dt.year": [[489, null]], "polars.Expr.entropy": [[490, null]], "polars.Expr.eq": [[491, null]], "polars.Expr.eq_missing": [[492, null]], "polars.Expr.ewm_mean": [[493, null]], "polars.Expr.ewm_mean_by": [[494, null]], "polars.Expr.ewm_std": [[495, null]], "polars.Expr.ewm_var": [[496, null]], "polars.Expr.exclude": [[497, null]], "polars.Expr.exp": [[498, null]], "polars.Expr.explode": [[499, null]], "polars.Expr.extend_constant": [[500, null]], "polars.Expr.fill_nan": [[501, null]], "polars.Expr.fill_null": [[502, null]], "polars.Expr.filter": [[503, null]], "polars.Expr.first": [[504, null]], "polars.Expr.flatten": [[505, null]], "polars.Expr.floor": [[506, null]], "polars.Expr.floordiv": [[507, null]], "polars.Expr.from_json": [[508, null]], "polars.Expr.gather": [[509, null]], "polars.Expr.gather_every": [[510, null]], "polars.Expr.ge": [[511, null]], "polars.Expr.get": [[512, null]], "polars.Expr.gt": [[513, null]], "polars.Expr.has_nulls": [[514, null]], "polars.Expr.hash": [[515, null]], "polars.Expr.head": [[516, null]], "polars.Expr.hist": [[517, null]], "polars.Expr.implode": [[518, null]], "polars.Expr.index_of": [[519, null]], "polars.Expr.inspect": [[520, null]], "polars.Expr.interpolate": [[521, null]], "polars.Expr.interpolate_by": [[522, null]], "polars.Expr.is_between": [[523, null]], "polars.Expr.is_duplicated": [[524, null]], "polars.Expr.is_finite": [[525, null]], "polars.Expr.is_first_distinct": [[526, null]], "polars.Expr.is_in": [[527, null]], "polars.Expr.is_infinite": [[528, null]], "polars.Expr.is_last_distinct": [[529, null]], "polars.Expr.is_nan": [[530, null]], "polars.Expr.is_not_nan": [[531, null]], "polars.Expr.is_not_null": [[532, null]], "polars.Expr.is_null": [[533, null]], "polars.Expr.is_unique": [[534, null]], "polars.Expr.kurtosis": [[535, null]], "polars.Expr.last": [[536, null]], "polars.Expr.le": [[537, null]], "polars.Expr.len": [[538, null]], "polars.Expr.limit": [[539, null]], "polars.Expr.list.all": [[540, null]], "polars.Expr.list.any": [[541, null]], "polars.Expr.list.arg_max": [[542, null]], "polars.Expr.list.arg_min": [[543, null]], "polars.Expr.list.concat": [[544, null]], "polars.Expr.list.contains": [[545, null]], "polars.Expr.list.count_matches": [[546, null]], "polars.Expr.list.diff": [[547, null]], "polars.Expr.list.drop_nulls": [[548, null]], "polars.Expr.list.eval": [[549, null]], "polars.Expr.list.explode": [[550, null]], "polars.Expr.list.first": [[551, null]], "polars.Expr.list.gather": [[552, null]], "polars.Expr.list.gather_every": [[553, null]], "polars.Expr.list.get": [[554, null]], "polars.Expr.list.head": [[555, null]], "polars.Expr.list.join": [[556, null]], "polars.Expr.list.last": [[557, null]], "polars.Expr.list.len": [[558, null]], "polars.Expr.list.max": [[559, null]], "polars.Expr.list.mean": [[560, null]], "polars.Expr.list.median": [[561, null]], "polars.Expr.list.min": [[562, null]], "polars.Expr.list.n_unique": [[563, null]], "polars.Expr.list.reverse": [[564, null]], "polars.Expr.list.sample": [[565, null]], "polars.Expr.list.set_difference": [[566, null]], "polars.Expr.list.set_intersection": [[567, null]], "polars.Expr.list.set_symmetric_difference": [[568, null]], "polars.Expr.list.set_union": [[569, null]], "polars.Expr.list.shift": [[570, null]], "polars.Expr.list.slice": [[571, null]], "polars.Expr.list.sort": [[572, null]], "polars.Expr.list.std": [[573, null]], "polars.Expr.list.sum": [[574, null]], "polars.Expr.list.tail": [[575, null]], "polars.Expr.list.to_array": [[576, null]], "polars.Expr.list.to_struct": [[577, null]], "polars.Expr.list.unique": [[578, null]], "polars.Expr.list.var": [[579, null]], "polars.Expr.log": [[580, null]], "polars.Expr.log10": [[581, null]], "polars.Expr.log1p": [[582, null]], "polars.Expr.lower_bound": [[583, null]], "polars.Expr.lt": [[584, null]], "polars.Expr.map_batches": [[585, null]], "polars.Expr.map_elements": [[586, null]], "polars.Expr.max": [[587, null]], "polars.Expr.mean": [[588, null]], "polars.Expr.median": [[589, null]], "polars.Expr.meta.eq": [[590, null]], "polars.Expr.meta.has_multiple_outputs": [[591, null]], "polars.Expr.meta.is_column": [[592, null]], "polars.Expr.meta.is_column_selection": [[593, null]], "polars.Expr.meta.is_literal": [[594, null]], "polars.Expr.meta.is_regex_projection": [[595, null]], "polars.Expr.meta.ne": [[596, null]], "polars.Expr.meta.output_name": [[597, null]], "polars.Expr.meta.pop": [[598, null]], "polars.Expr.meta.root_names": [[599, null]], "polars.Expr.meta.serialize": [[600, null]], "polars.Expr.meta.show_graph": [[601, null]], "polars.Expr.meta.tree_format": [[602, null]], "polars.Expr.meta.undo_aliases": [[603, null]], "polars.Expr.meta.write_json": [[604, null]], "polars.Expr.min": [[605, null]], "polars.Expr.mod": [[606, null]], "polars.Expr.mode": [[607, null]], "polars.Expr.mul": [[608, null]], "polars.Expr.n_unique": [[609, null]], "polars.Expr.name.keep": [[610, null]], "polars.Expr.name.map": [[611, null]], "polars.Expr.name.map_fields": [[612, null]], "polars.Expr.name.prefix": [[613, null]], "polars.Expr.name.prefix_fields": [[614, null]], "polars.Expr.name.suffix": [[615, null]], "polars.Expr.name.suffix_fields": [[616, null]], "polars.Expr.name.to_lowercase": [[617, null]], "polars.Expr.name.to_uppercase": [[618, null]], "polars.Expr.nan_max": [[619, null]], "polars.Expr.nan_min": [[620, null]], "polars.Expr.ne": [[621, null]], "polars.Expr.ne_missing": [[622, null]], "polars.Expr.neg": [[623, null]], "polars.Expr.not_": [[624, null]], "polars.Expr.null_count": [[625, null]], "polars.Expr.or_": [[626, null]], "polars.Expr.over": [[627, null]], "polars.Expr.pct_change": [[628, null]], "polars.Expr.peak_max": [[629, null]], "polars.Expr.peak_min": [[630, null]], "polars.Expr.pipe": [[631, null]], "polars.Expr.pow": [[632, null]], "polars.Expr.product": [[633, null]], "polars.Expr.qcut": [[634, null]], "polars.Expr.quantile": [[635, null]], "polars.Expr.radians": [[636, null]], "polars.Expr.rank": [[637, null]], "polars.Expr.rechunk": [[638, null]], "polars.Expr.reinterpret": [[639, null]], "polars.Expr.repeat_by": [[640, null]], "polars.Expr.replace": [[641, null]], "polars.Expr.replace_strict": [[642, null]], "polars.Expr.reshape": [[643, null]], "polars.Expr.reverse": [[644, null]], "polars.Expr.rle": [[645, null]], "polars.Expr.rle_id": [[646, null]], "polars.Expr.rolling": [[647, null]], "polars.Expr.rolling_map": [[648, null]], "polars.Expr.rolling_max": [[649, null]], "polars.Expr.rolling_max_by": [[650, null]], "polars.Expr.rolling_mean": [[651, null]], "polars.Expr.rolling_mean_by": [[652, null]], "polars.Expr.rolling_median": [[653, null]], "polars.Expr.rolling_median_by": [[654, null]], "polars.Expr.rolling_min": [[655, null]], "polars.Expr.rolling_min_by": [[656, null]], "polars.Expr.rolling_quantile": [[657, null]], "polars.Expr.rolling_quantile_by": [[658, null]], "polars.Expr.rolling_skew": [[659, null]], "polars.Expr.rolling_std": [[660, null]], "polars.Expr.rolling_std_by": [[661, null]], "polars.Expr.rolling_sum": [[662, null]], "polars.Expr.rolling_sum_by": [[663, null]], "polars.Expr.rolling_var": [[664, null]], "polars.Expr.rolling_var_by": [[665, null]], "polars.Expr.round": [[666, null]], "polars.Expr.round_sig_figs": [[667, null]], "polars.Expr.sample": [[668, null]], "polars.Expr.search_sorted": [[669, null]], "polars.Expr.set_sorted": [[670, null]], "polars.Expr.shift": [[671, null]], "polars.Expr.shrink_dtype": [[672, null]], "polars.Expr.shuffle": [[673, null]], "polars.Expr.sign": [[674, null]], "polars.Expr.sin": [[675, null]], "polars.Expr.sinh": [[676, null]], "polars.Expr.skew": [[677, null]], "polars.Expr.slice": [[678, null]], "polars.Expr.sort": [[679, null]], "polars.Expr.sort_by": [[680, null]], "polars.Expr.sqrt": [[681, null]], "polars.Expr.std": [[682, null]], "polars.Expr.str.concat": [[683, null]], "polars.Expr.str.contains": [[684, null]], "polars.Expr.str.contains_any": [[685, null]], "polars.Expr.str.count_matches": [[686, null]], "polars.Expr.str.decode": [[687, null]], "polars.Expr.str.encode": [[688, null]], "polars.Expr.str.ends_with": [[689, null]], "polars.Expr.str.escape_regex": [[690, null]], "polars.Expr.str.explode": [[691, null]], "polars.Expr.str.extract": [[692, null]], "polars.Expr.str.extract_all": [[693, null]], "polars.Expr.str.extract_groups": [[694, null]], "polars.Expr.str.extract_many": [[695, null]], "polars.Expr.str.find": [[696, null]], "polars.Expr.str.find_many": [[697, null]], "polars.Expr.str.head": [[698, null]], "polars.Expr.str.join": [[699, null]], "polars.Expr.str.json_decode": [[700, null]], "polars.Expr.str.json_path_match": [[701, null]], "polars.Expr.str.len_bytes": [[702, null]], "polars.Expr.str.len_chars": [[703, null]], "polars.Expr.str.normalize": [[704, null]], "polars.Expr.str.pad_end": [[705, null]], "polars.Expr.str.pad_start": [[706, null]], "polars.Expr.str.replace": [[707, null]], "polars.Expr.str.replace_all": [[708, null]], "polars.Expr.str.replace_many": [[709, null]], "polars.Expr.str.reverse": [[710, null]], "polars.Expr.str.slice": [[711, null]], "polars.Expr.str.split": [[712, null]], "polars.Expr.str.split_exact": [[713, null]], "polars.Expr.str.splitn": [[714, null]], "polars.Expr.str.starts_with": [[715, null]], "polars.Expr.str.strip_chars": [[716, null]], "polars.Expr.str.strip_chars_end": [[717, null]], "polars.Expr.str.strip_chars_start": [[718, null]], "polars.Expr.str.strip_prefix": [[719, null]], "polars.Expr.str.strip_suffix": [[720, null]], "polars.Expr.str.strptime": [[721, null]], "polars.Expr.str.tail": [[722, null]], "polars.Expr.str.to_date": [[723, null]], "polars.Expr.str.to_datetime": [[724, null]], "polars.Expr.str.to_decimal": [[725, null]], "polars.Expr.str.to_integer": [[726, null]], "polars.Expr.str.to_lowercase": [[727, null]], "polars.Expr.str.to_time": [[728, null]], "polars.Expr.str.to_titlecase": [[729, null]], "polars.Expr.str.to_uppercase": [[730, null]], "polars.Expr.str.zfill": [[731, null]], "polars.Expr.struct.field": [[732, null]], "polars.Expr.struct.json_encode": [[733, null]], "polars.Expr.struct.rename_fields": [[734, null]], "polars.Expr.struct.unnest": [[735, null]], "polars.Expr.struct.with_fields": [[736, null]], "polars.Expr.sub": [[737, null]], "polars.Expr.sum": [[738, null]], "polars.Expr.tail": [[739, null]], "polars.Expr.tan": [[740, null]], "polars.Expr.tanh": [[741, null]], "polars.Expr.to_physical": [[742, null]], "polars.Expr.top_k": [[743, null]], "polars.Expr.top_k_by": [[744, null]], "polars.Expr.truediv": [[745, null]], "polars.Expr.unique": [[746, null]], "polars.Expr.unique_counts": [[747, null]], "polars.Expr.upper_bound": [[748, null]], "polars.Expr.value_counts": [[749, null]], "polars.Expr.var": [[750, null]], "polars.Expr.where": [[751, null]], "polars.Expr.xor": [[752, null]], "polars.LazyFrame.approx_n_unique": [[853, null]], "polars.LazyFrame.bottom_k": [[854, null]], "polars.LazyFrame.cache": [[855, null]], "polars.LazyFrame.cast": [[856, null]], "polars.LazyFrame.clear": [[857, null]], "polars.LazyFrame.clone": [[858, null]], "polars.LazyFrame.collect": [[859, null]], "polars.LazyFrame.collect_async": [[860, null]], "polars.LazyFrame.collect_schema": [[861, null]], "polars.LazyFrame.columns": [[862, null]], "polars.LazyFrame.count": [[863, null]], "polars.LazyFrame.describe": [[864, null]], "polars.LazyFrame.deserialize": [[865, null]], "polars.LazyFrame.drop": [[866, null]], "polars.LazyFrame.drop_nans": [[867, null]], "polars.LazyFrame.drop_nulls": [[868, null]], "polars.LazyFrame.dtypes": [[869, null]], "polars.LazyFrame.explain": [[870, null]], "polars.LazyFrame.explode": [[871, null]], "polars.LazyFrame.fill_nan": [[872, null]], "polars.LazyFrame.fill_null": [[873, null]], "polars.LazyFrame.filter": [[874, null]], "polars.LazyFrame.first": [[875, null]], "polars.LazyFrame.gather_every": [[876, null]], "polars.LazyFrame.group_by": [[877, null]], "polars.LazyFrame.group_by_dynamic": [[878, null]], "polars.LazyFrame.head": [[879, null]], "polars.LazyFrame.inspect": [[880, null]], "polars.LazyFrame.interpolate": [[881, null]], "polars.LazyFrame.join": [[882, null]], "polars.LazyFrame.join_asof": [[883, null]], "polars.LazyFrame.join_where": [[884, null]], "polars.LazyFrame.last": [[885, null]], "polars.LazyFrame.lazy": [[886, null]], "polars.LazyFrame.limit": [[887, null]], "polars.LazyFrame.map_batches": [[888, null]], "polars.LazyFrame.max": [[889, null]], "polars.LazyFrame.mean": [[890, null]], "polars.LazyFrame.median": [[891, null]], "polars.LazyFrame.melt": [[892, null]], "polars.LazyFrame.merge_sorted": [[893, null]], "polars.LazyFrame.min": [[894, null]], "polars.LazyFrame.null_count": [[895, null]], "polars.LazyFrame.pipe": [[896, null]], "polars.LazyFrame.profile": [[897, null]], "polars.LazyFrame.quantile": [[898, null]], "polars.LazyFrame.remote": [[899, null]], "polars.LazyFrame.remove": [[900, null]], "polars.LazyFrame.rename": [[901, null]], "polars.LazyFrame.reverse": [[902, null]], "polars.LazyFrame.rolling": [[903, null]], "polars.LazyFrame.schema": [[904, null]], "polars.LazyFrame.select": [[905, null]], "polars.LazyFrame.select_seq": [[906, null]], "polars.LazyFrame.serialize": [[907, null]], "polars.LazyFrame.set_sorted": [[908, null]], "polars.LazyFrame.shift": [[909, null]], "polars.LazyFrame.show_graph": [[910, null]], "polars.LazyFrame.sink_csv": [[48, null]], "polars.LazyFrame.sink_ipc": [[49, null]], "polars.LazyFrame.sink_ndjson": [[50, null]], "polars.LazyFrame.sink_parquet": [[51, null]], "polars.LazyFrame.slice": [[911, null]], "polars.LazyFrame.sort": [[912, null]], "polars.LazyFrame.sql": [[913, null]], "polars.LazyFrame.std": [[914, null]], "polars.LazyFrame.sum": [[915, null]], "polars.LazyFrame.tail": [[916, null]], "polars.LazyFrame.top_k": [[917, null]], "polars.LazyFrame.unique": [[918, null]], "polars.LazyFrame.unnest": [[919, null]], "polars.LazyFrame.unpivot": [[920, null]], "polars.LazyFrame.update": [[921, null]], "polars.LazyFrame.var": [[922, null]], "polars.LazyFrame.width": [[923, null]], "polars.LazyFrame.with_columns": [[924, null]], "polars.LazyFrame.with_columns_seq": [[925, null]], "polars.LazyFrame.with_context": [[926, null]], "polars.LazyFrame.with_row_count": [[927, null]], "polars.LazyFrame.with_row_index": [[928, null]], "polars.PartitionByKey": [[52, null]], "polars.PartitionMaxSize": [[53, null]], "polars.PartitionParted": [[54, null]], "polars.SQLContext.execute": [[1358, null]], "polars.SQLContext.execute_global": [[1359, null]], "polars.SQLContext.register": [[1360, null]], "polars.SQLContext.register_globals": [[1361, null]], "polars.SQLContext.register_many": [[1362, null]], "polars.SQLContext.tables": [[1363, null]], "polars.SQLContext.unregister": [[1364, null]], "polars.Series.__array__": [[962, null]], "polars.Series.__arrow_c_stream__": [[963, null]], "polars.Series.__getitem__": [[964, null]], "polars.Series.abs": [[965, null]], "polars.Series.alias": [[966, null]], "polars.Series.all": [[967, null]], "polars.Series.any": [[968, null]], "polars.Series.append": [[969, null]], "polars.Series.approx_n_unique": [[970, null]], "polars.Series.arccos": [[971, null]], "polars.Series.arccosh": [[972, null]], "polars.Series.arcsin": [[973, null]], "polars.Series.arcsinh": [[974, null]], "polars.Series.arctan": [[975, null]], "polars.Series.arctanh": [[976, null]], "polars.Series.arg_max": [[977, null]], "polars.Series.arg_min": [[978, null]], "polars.Series.arg_sort": [[979, null]], "polars.Series.arg_true": [[980, null]], "polars.Series.arg_unique": [[981, null]], "polars.Series.arr.all": [[982, null]], "polars.Series.arr.any": [[983, null]], "polars.Series.arr.arg_max": [[984, null]], "polars.Series.arr.arg_min": [[985, null]], "polars.Series.arr.contains": [[986, null]], "polars.Series.arr.count_matches": [[987, null]], "polars.Series.arr.explode": [[988, null]], "polars.Series.arr.first": [[989, null]], "polars.Series.arr.get": [[990, null]], "polars.Series.arr.join": [[991, null]], "polars.Series.arr.last": [[992, null]], "polars.Series.arr.max": [[993, null]], "polars.Series.arr.median": [[994, null]], "polars.Series.arr.min": [[995, null]], "polars.Series.arr.n_unique": [[996, null]], "polars.Series.arr.reverse": [[997, null]], "polars.Series.arr.shift": [[998, null]], "polars.Series.arr.sort": [[999, null]], "polars.Series.arr.std": [[1000, null]], "polars.Series.arr.sum": [[1001, null]], "polars.Series.arr.to_list": [[1002, null]], "polars.Series.arr.to_struct": [[1003, null]], "polars.Series.arr.unique": [[1004, null]], "polars.Series.arr.var": [[1005, null]], "polars.Series.bin.contains": [[1006, null]], "polars.Series.bin.decode": [[1007, null]], "polars.Series.bin.encode": [[1008, null]], "polars.Series.bin.ends_with": [[1009, null]], "polars.Series.bin.reinterpret": [[1010, null]], "polars.Series.bin.size": [[1011, null]], "polars.Series.bin.starts_with": [[1012, null]], "polars.Series.bitwise_and": [[1013, null]], "polars.Series.bitwise_count_ones": [[1014, null]], "polars.Series.bitwise_count_zeros": [[1015, null]], "polars.Series.bitwise_leading_ones": [[1016, null]], "polars.Series.bitwise_leading_zeros": [[1017, null]], "polars.Series.bitwise_or": [[1018, null]], "polars.Series.bitwise_trailing_ones": [[1019, null]], "polars.Series.bitwise_trailing_zeros": [[1020, null]], "polars.Series.bitwise_xor": [[1021, null]], "polars.Series.bottom_k": [[1022, null]], "polars.Series.cast": [[1023, null]], "polars.Series.cat.ends_with": [[1024, null]], "polars.Series.cat.get_categories": [[1025, null]], "polars.Series.cat.is_local": [[1026, null]], "polars.Series.cat.len_bytes": [[1027, null]], "polars.Series.cat.len_chars": [[1028, null]], "polars.Series.cat.starts_with": [[1029, null]], "polars.Series.cat.to_local": [[1030, null]], "polars.Series.cat.uses_lexical_ordering": [[1031, null]], "polars.Series.cbrt": [[1032, null]], "polars.Series.ceil": [[1033, null]], "polars.Series.chunk_lengths": [[1034, null]], "polars.Series.clear": [[1035, null]], "polars.Series.clip": [[1036, null]], "polars.Series.clone": [[1037, null]], "polars.Series.cos": [[1038, null]], "polars.Series.cosh": [[1039, null]], "polars.Series.cot": [[1040, null]], "polars.Series.count": [[1041, null]], "polars.Series.cum_count": [[1042, null]], "polars.Series.cum_max": [[1043, null]], "polars.Series.cum_min": [[1044, null]], "polars.Series.cum_prod": [[1045, null]], "polars.Series.cum_sum": [[1046, null]], "polars.Series.cumulative_eval": [[1047, null]], "polars.Series.cut": [[1048, null]], "polars.Series.describe": [[1049, null]], "polars.Series.diff": [[1050, null]], "polars.Series.dot": [[1051, null]], "polars.Series.drop_nans": [[1052, null]], "polars.Series.drop_nulls": [[1053, null]], "polars.Series.dt.add_business_days": [[1054, null]], "polars.Series.dt.base_utc_offset": [[1055, null]], "polars.Series.dt.cast_time_unit": [[1056, null]], "polars.Series.dt.century": [[1057, null]], "polars.Series.dt.combine": [[1058, null]], "polars.Series.dt.convert_time_zone": [[1059, null]], "polars.Series.dt.date": [[1060, null]], "polars.Series.dt.datetime": [[1061, null]], "polars.Series.dt.day": [[1062, null]], "polars.Series.dt.dst_offset": [[1063, null]], "polars.Series.dt.epoch": [[1064, null]], "polars.Series.dt.hour": [[1065, null]], "polars.Series.dt.is_leap_year": [[1066, null]], "polars.Series.dt.iso_year": [[1067, null]], "polars.Series.dt.max": [[1068, null]], "polars.Series.dt.mean": [[1069, null]], "polars.Series.dt.median": [[1070, null]], "polars.Series.dt.microsecond": [[1071, null]], "polars.Series.dt.millennium": [[1072, null]], "polars.Series.dt.millisecond": [[1073, null]], "polars.Series.dt.min": [[1074, null]], "polars.Series.dt.minute": [[1075, null]], "polars.Series.dt.month": [[1076, null]], "polars.Series.dt.month_end": [[1077, null]], "polars.Series.dt.month_start": [[1078, null]], "polars.Series.dt.nanosecond": [[1079, null]], "polars.Series.dt.offset_by": [[1080, null]], "polars.Series.dt.ordinal_day": [[1081, null]], "polars.Series.dt.quarter": [[1082, null]], "polars.Series.dt.replace": [[1083, null]], "polars.Series.dt.replace_time_zone": [[1084, null]], "polars.Series.dt.round": [[1085, null]], "polars.Series.dt.second": [[1086, null]], "polars.Series.dt.strftime": [[1087, null]], "polars.Series.dt.time": [[1088, null]], "polars.Series.dt.timestamp": [[1089, null]], "polars.Series.dt.to_string": [[1090, null]], "polars.Series.dt.total_days": [[1091, null]], "polars.Series.dt.total_hours": [[1092, null]], "polars.Series.dt.total_microseconds": [[1093, null]], "polars.Series.dt.total_milliseconds": [[1094, null]], "polars.Series.dt.total_minutes": [[1095, null]], "polars.Series.dt.total_nanoseconds": [[1096, null]], "polars.Series.dt.total_seconds": [[1097, null]], "polars.Series.dt.truncate": [[1098, null]], "polars.Series.dt.week": [[1099, null]], "polars.Series.dt.weekday": [[1100, null]], "polars.Series.dt.with_time_unit": [[1101, null]], "polars.Series.dt.year": [[1102, null]], "polars.Series.dtype": [[1103, null]], "polars.Series.entropy": [[1104, null]], "polars.Series.eq": [[1105, null]], "polars.Series.eq_missing": [[1106, null]], "polars.Series.equals": [[1107, null]], "polars.Series.estimated_size": [[1108, null]], "polars.Series.ewm_mean": [[1109, null]], "polars.Series.ewm_mean_by": [[1110, null]], "polars.Series.ewm_std": [[1111, null]], "polars.Series.ewm_var": [[1112, null]], "polars.Series.exp": [[1113, null]], "polars.Series.explode": [[1114, null]], "polars.Series.extend": [[1115, null]], "polars.Series.extend_constant": [[1116, null]], "polars.Series.fill_nan": [[1117, null]], "polars.Series.fill_null": [[1118, null]], "polars.Series.filter": [[1119, null]], "polars.Series.first": [[1120, null]], "polars.Series.flags": [[1121, null]], "polars.Series.floor": [[1122, null]], "polars.Series.gather": [[1123, null]], "polars.Series.gather_every": [[1124, null]], "polars.Series.ge": [[1125, null]], "polars.Series.get_chunks": [[1126, null]], "polars.Series.gt": [[1127, null]], "polars.Series.has_nulls": [[1128, null]], "polars.Series.has_validity": [[1129, null]], "polars.Series.hash": [[1130, null]], "polars.Series.head": [[1131, null]], "polars.Series.hist": [[1132, null]], "polars.Series.implode": [[1133, null]], "polars.Series.index_of": [[1134, null]], "polars.Series.interpolate": [[1135, null]], "polars.Series.interpolate_by": [[1136, null]], "polars.Series.is_between": [[1137, null]], "polars.Series.is_duplicated": [[1138, null]], "polars.Series.is_empty": [[1139, null]], "polars.Series.is_finite": [[1140, null]], "polars.Series.is_first_distinct": [[1141, null]], "polars.Series.is_in": [[1142, null]], "polars.Series.is_infinite": [[1143, null]], "polars.Series.is_last_distinct": [[1144, null]], "polars.Series.is_nan": [[1145, null]], "polars.Series.is_not_nan": [[1146, null]], "polars.Series.is_not_null": [[1147, null]], "polars.Series.is_null": [[1148, null]], "polars.Series.is_sorted": [[1149, null]], "polars.Series.is_unique": [[1150, null]], "polars.Series.item": [[1151, null]], "polars.Series.kurtosis": [[1152, null]], "polars.Series.last": [[1153, null]], "polars.Series.le": [[1154, null]], "polars.Series.len": [[1155, null]], "polars.Series.limit": [[1156, null]], "polars.Series.list.all": [[1157, null]], "polars.Series.list.any": [[1158, null]], "polars.Series.list.arg_max": [[1159, null]], "polars.Series.list.arg_min": [[1160, null]], "polars.Series.list.concat": [[1161, null]], "polars.Series.list.contains": [[1162, null]], "polars.Series.list.count_matches": [[1163, null]], "polars.Series.list.diff": [[1164, null]], "polars.Series.list.drop_nulls": [[1165, null]], "polars.Series.list.eval": [[1166, null]], "polars.Series.list.explode": [[1167, null]], "polars.Series.list.first": [[1168, null]], "polars.Series.list.gather": [[1169, null]], "polars.Series.list.gather_every": [[1170, null]], "polars.Series.list.get": [[1171, null]], "polars.Series.list.head": [[1172, null]], "polars.Series.list.join": [[1173, null]], "polars.Series.list.last": [[1174, null]], "polars.Series.list.len": [[1175, null]], "polars.Series.list.max": [[1176, null]], "polars.Series.list.mean": [[1177, null]], "polars.Series.list.median": [[1178, null]], "polars.Series.list.min": [[1179, null]], "polars.Series.list.n_unique": [[1180, null]], "polars.Series.list.reverse": [[1181, null]], "polars.Series.list.sample": [[1182, null]], "polars.Series.list.set_difference": [[1183, null]], "polars.Series.list.set_intersection": [[1184, null]], "polars.Series.list.set_symmetric_difference": [[1185, null]], "polars.Series.list.set_union": [[1186, null]], "polars.Series.list.shift": [[1187, null]], "polars.Series.list.slice": [[1188, null]], "polars.Series.list.sort": [[1189, null]], "polars.Series.list.std": [[1190, null]], "polars.Series.list.sum": [[1191, null]], "polars.Series.list.tail": [[1192, null]], "polars.Series.list.to_array": [[1193, null]], "polars.Series.list.to_struct": [[1194, null]], "polars.Series.list.unique": [[1195, null]], "polars.Series.list.var": [[1196, null]], "polars.Series.log": [[1197, null]], "polars.Series.log10": [[1198, null]], "polars.Series.log1p": [[1199, null]], "polars.Series.lower_bound": [[1200, null]], "polars.Series.lt": [[1201, null]], "polars.Series.map_elements": [[1202, null]], "polars.Series.max": [[1203, null]], "polars.Series.mean": [[1204, null]], "polars.Series.median": [[1205, null]], "polars.Series.min": [[1206, null]], "polars.Series.mode": [[1207, null]], "polars.Series.n_chunks": [[1208, null]], "polars.Series.n_unique": [[1209, null]], "polars.Series.name": [[1210, null]], "polars.Series.nan_max": [[1211, null]], "polars.Series.nan_min": [[1212, null]], "polars.Series.ne": [[1213, null]], "polars.Series.ne_missing": [[1214, null]], "polars.Series.new_from_index": [[1215, null]], "polars.Series.not_": [[1216, null]], "polars.Series.null_count": [[1217, null]], "polars.Series.pct_change": [[1218, null]], "polars.Series.peak_max": [[1219, null]], "polars.Series.peak_min": [[1220, null]], "polars.Series.pow": [[1221, null]], "polars.Series.product": [[1222, null]], "polars.Series.qcut": [[1223, null]], "polars.Series.quantile": [[1224, null]], "polars.Series.rank": [[1225, null]], "polars.Series.rechunk": [[1226, null]], "polars.Series.reinterpret": [[1227, null]], "polars.Series.rename": [[1228, null]], "polars.Series.replace": [[1229, null]], "polars.Series.replace_strict": [[1230, null]], "polars.Series.reshape": [[1231, null]], "polars.Series.reverse": [[1232, null]], "polars.Series.rle": [[1233, null]], "polars.Series.rle_id": [[1234, null]], "polars.Series.rolling_map": [[1235, null]], "polars.Series.rolling_max": [[1236, null]], "polars.Series.rolling_mean": [[1237, null]], "polars.Series.rolling_median": [[1238, null]], "polars.Series.rolling_min": [[1239, null]], "polars.Series.rolling_quantile": [[1240, null]], "polars.Series.rolling_skew": [[1241, null]], "polars.Series.rolling_std": [[1242, null]], "polars.Series.rolling_sum": [[1243, null]], "polars.Series.rolling_var": [[1244, null]], "polars.Series.round": [[1245, null]], "polars.Series.round_sig_figs": [[1246, null]], "polars.Series.sample": [[1247, null]], "polars.Series.scatter": [[1248, null]], "polars.Series.search_sorted": [[1249, null]], "polars.Series.set": [[1250, null]], "polars.Series.set_sorted": [[1251, null]], "polars.Series.shape": [[1252, null]], "polars.Series.shift": [[1253, null]], "polars.Series.shrink_dtype": [[1254, null]], "polars.Series.shrink_to_fit": [[1255, null]], "polars.Series.shuffle": [[1256, null]], "polars.Series.sign": [[1257, null]], "polars.Series.sin": [[1258, null]], "polars.Series.sinh": [[1259, null]], "polars.Series.skew": [[1260, null]], "polars.Series.slice": [[1261, null]], "polars.Series.sort": [[1262, null]], "polars.Series.sqrt": [[1263, null]], "polars.Series.std": [[1264, null]], "polars.Series.str.concat": [[1265, null]], "polars.Series.str.contains": [[1266, null]], "polars.Series.str.contains_any": [[1267, null]], "polars.Series.str.count_matches": [[1268, null]], "polars.Series.str.decode": [[1269, null]], "polars.Series.str.encode": [[1270, null]], "polars.Series.str.ends_with": [[1271, null]], "polars.Series.str.escape_regex": [[1272, null]], "polars.Series.str.explode": [[1273, null]], "polars.Series.str.extract": [[1274, null]], "polars.Series.str.extract_all": [[1275, null]], "polars.Series.str.extract_groups": [[1276, null]], "polars.Series.str.extract_many": [[1277, null]], "polars.Series.str.find": [[1278, null]], "polars.Series.str.find_many": [[1279, null]], "polars.Series.str.head": [[1280, null]], "polars.Series.str.join": [[1281, null]], "polars.Series.str.json_decode": [[1282, null]], "polars.Series.str.json_path_match": [[1283, null]], "polars.Series.str.len_bytes": [[1284, null]], "polars.Series.str.len_chars": [[1285, null]], "polars.Series.str.normalize": [[1286, null]], "polars.Series.str.pad_end": [[1287, null]], "polars.Series.str.pad_start": [[1288, null]], "polars.Series.str.replace": [[1289, null]], "polars.Series.str.replace_all": [[1290, null]], "polars.Series.str.replace_many": [[1291, null]], "polars.Series.str.reverse": [[1292, null]], "polars.Series.str.slice": [[1293, null]], "polars.Series.str.split": [[1294, null]], "polars.Series.str.split_exact": [[1295, null]], "polars.Series.str.splitn": [[1296, null]], "polars.Series.str.starts_with": [[1297, null]], "polars.Series.str.strip_chars": [[1298, null]], "polars.Series.str.strip_chars_end": [[1299, null]], "polars.Series.str.strip_chars_start": [[1300, null]], "polars.Series.str.strip_prefix": [[1301, null]], "polars.Series.str.strip_suffix": [[1302, null]], "polars.Series.str.strptime": [[1303, null]], "polars.Series.str.tail": [[1304, null]], "polars.Series.str.to_date": [[1305, null]], "polars.Series.str.to_datetime": [[1306, null]], "polars.Series.str.to_decimal": [[1307, null]], "polars.Series.str.to_integer": [[1308, null]], "polars.Series.str.to_lowercase": [[1309, null]], "polars.Series.str.to_time": [[1310, null]], "polars.Series.str.to_titlecase": [[1311, null]], "polars.Series.str.to_uppercase": [[1312, null]], "polars.Series.str.zfill": [[1313, null]], "polars.Series.struct.field": [[1314, null]], "polars.Series.struct.fields": [[1315, null]], "polars.Series.struct.json_encode": [[1316, null]], "polars.Series.struct.rename_fields": [[1317, null]], "polars.Series.struct.schema": [[1318, null]], "polars.Series.struct.unnest": [[1319, null]], "polars.Series.sum": [[1320, null]], "polars.Series.tail": [[1321, null]], "polars.Series.tan": [[1322, null]], "polars.Series.tanh": [[1323, null]], "polars.Series.to_arrow": [[1324, null]], "polars.Series.to_dummies": [[1325, null]], "polars.Series.to_frame": [[1326, null]], "polars.Series.to_init_repr": [[1327, null]], "polars.Series.to_jax": [[1328, null]], "polars.Series.to_list": [[1329, null]], "polars.Series.to_numpy": [[1330, null]], "polars.Series.to_pandas": [[1331, null]], "polars.Series.to_physical": [[1332, null]], "polars.Series.to_torch": [[1333, null]], "polars.Series.top_k": [[1334, null]], "polars.Series.unique": [[1335, null]], "polars.Series.unique_counts": [[1336, null]], "polars.Series.upper_bound": [[1337, null]], "polars.Series.value_counts": [[1338, null]], "polars.Series.var": [[1339, null]], "polars.Series.zip_with": [[1340, null]], "polars.StringCache": [[55, null]], "polars.align_frames": [[56, null]], "polars.all": [[753, null]], "polars.all_horizontal": [[754, null]], "polars.any": [[755, null]], "polars.any_horizontal": [[756, null]], "polars.api.register_dataframe_namespace": [[57, null]], "polars.api.register_expr_namespace": [[58, null]], "polars.api.register_lazyframe_namespace": [[59, null]], "polars.api.register_series_namespace": [[60, null]], "polars.approx_n_unique": [[757, null]], "polars.arange": [[758, null]], "polars.arctan2": [[759, null]], "polars.arctan2d": [[760, null]], "polars.arg_sort_by": [[761, null]], "polars.arg_where": [[762, null]], "polars.build_info": [[61, null]], "polars.business_day_count": [[763, null]], "polars.catalog.unity.CatalogInfo": [[193, null]], "polars.catalog.unity.ColumnInfo": [[194, null]], "polars.catalog.unity.DataSourceFormat": [[195, null]], "polars.catalog.unity.NamespaceInfo": [[196, null]], "polars.catalog.unity.TableInfo": [[197, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[198, null]], "polars.catalog.unity.TableType": [[199, null]], "polars.coalesce": [[764, null]], "polars.col": [[834, null]], "polars.collect_all": [[62, null]], "polars.collect_all_async": [[63, null]], "polars.concat": [[64, null]], "polars.concat_arr": [[765, null]], "polars.concat_list": [[766, null]], "polars.concat_str": [[767, null]], "polars.corr": [[768, null]], "polars.count": [[769, null]], "polars.cov": [[770, null]], "polars.cum_count": [[771, null]], "polars.cum_fold": [[772, null]], "polars.cum_reduce": [[773, null]], "polars.cum_sum": [[774, null]], "polars.cum_sum_horizontal": [[775, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[327, null]], "polars.dataframe.group_by.GroupBy.agg": [[328, null]], "polars.dataframe.group_by.GroupBy.all": [[329, null]], "polars.dataframe.group_by.GroupBy.count": [[330, null]], "polars.dataframe.group_by.GroupBy.first": [[331, null]], "polars.dataframe.group_by.GroupBy.head": [[332, null]], "polars.dataframe.group_by.GroupBy.last": [[333, null]], "polars.dataframe.group_by.GroupBy.len": [[334, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[335, null]], "polars.dataframe.group_by.GroupBy.max": [[336, null]], "polars.dataframe.group_by.GroupBy.mean": [[337, null]], "polars.dataframe.group_by.GroupBy.median": [[338, null]], "polars.dataframe.group_by.GroupBy.min": [[339, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[340, null]], "polars.dataframe.group_by.GroupBy.quantile": [[341, null]], "polars.dataframe.group_by.GroupBy.sum": [[342, null]], "polars.dataframe.group_by.GroupBy.tail": [[343, null]], "polars.datatypes.Array": [[65, null]], "polars.datatypes.Binary": [[66, null]], "polars.datatypes.Boolean": [[67, null]], "polars.datatypes.Categorical": [[68, null]], "polars.datatypes.DataType": [[69, null]], "polars.datatypes.Date": [[70, null]], "polars.datatypes.Datetime": [[71, null]], "polars.datatypes.Decimal": [[72, null]], "polars.datatypes.Duration": [[73, null]], "polars.datatypes.Enum": [[74, null]], "polars.datatypes.Field": [[75, null]], "polars.datatypes.Float32": [[76, null]], "polars.datatypes.Float64": [[77, null]], "polars.datatypes.Int128": [[78, null]], "polars.datatypes.Int16": [[79, null]], "polars.datatypes.Int32": [[80, null]], "polars.datatypes.Int64": [[81, null]], "polars.datatypes.Int8": [[82, null]], "polars.datatypes.List": [[83, null]], "polars.datatypes.Null": [[84, null]], "polars.datatypes.Object": [[85, null]], "polars.datatypes.String": [[86, null]], "polars.datatypes.Struct": [[87, null]], "polars.datatypes.Time": [[88, null]], "polars.datatypes.UInt16": [[89, null]], "polars.datatypes.UInt32": [[90, null]], "polars.datatypes.UInt64": [[91, null]], "polars.datatypes.UInt8": [[92, null]], "polars.datatypes.Unknown": [[93, null]], "polars.datatypes.Utf8": [[94, null]], "polars.date": [[776, null]], "polars.date_range": [[777, null]], "polars.date_ranges": [[778, null]], "polars.datetime": [[779, null]], "polars.datetime_range": [[780, null]], "polars.datetime_ranges": [[781, null]], "polars.defer": [[95, null]], "polars.disable_string_cache": [[96, null]], "polars.duration": [[782, null]], "polars.element": [[783, null]], "polars.enable_string_cache": [[97, null]], "polars.escape_regex": [[98, null]], "polars.exceptions.CategoricalRemappingWarning": [[99, null]], "polars.exceptions.ChronoFormatWarning": [[100, null]], "polars.exceptions.ColumnNotFoundError": [[101, null]], "polars.exceptions.ComputeError": [[102, null]], "polars.exceptions.CustomUFuncWarning": [[103, null]], "polars.exceptions.DataOrientationWarning": [[104, null]], "polars.exceptions.DuplicateError": [[105, null]], "polars.exceptions.InvalidOperationError": [[106, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[107, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[108, null]], "polars.exceptions.NoDataError": [[109, null]], "polars.exceptions.NoRowsReturnedError": [[110, null]], "polars.exceptions.OutOfBoundsError": [[111, null]], "polars.exceptions.PanicException": [[112, null]], "polars.exceptions.ParameterCollisionError": [[113, null]], "polars.exceptions.PerformanceWarning": [[114, null]], "polars.exceptions.PolarsError": [[115, null]], "polars.exceptions.PolarsInefficientMapWarning": [[116, null]], "polars.exceptions.PolarsWarning": [[117, null]], "polars.exceptions.RowsError": [[118, null]], "polars.exceptions.SQLInterfaceError": [[119, null]], "polars.exceptions.SQLSyntaxError": [[120, null]], "polars.exceptions.SchemaError": [[121, null]], "polars.exceptions.SchemaFieldNotFoundError": [[122, null]], "polars.exceptions.ShapeError": [[123, null]], "polars.exceptions.StringCacheMismatchError": [[124, null]], "polars.exceptions.StructFieldNotFoundError": [[125, null]], "polars.exceptions.TooManyRowsReturnedError": [[126, null]], "polars.exceptions.UnstableWarning": [[127, null]], "polars.exceptions.UnsuitableSQLError": [[128, null]], "polars.exclude": [[784, null]], "polars.explain_all": [[129, null]], "polars.first": [[785, null]], "polars.fold": [[786, null]], "polars.format": [[787, null]], "polars.from_arrow": [[130, null]], "polars.from_dataframe": [[131, null]], "polars.from_dict": [[132, null]], "polars.from_dicts": [[133, null]], "polars.from_epoch": [[788, null]], "polars.from_numpy": [[134, null]], "polars.from_pandas": [[135, null]], "polars.from_records": [[136, null]], "polars.from_repr": [[137, null]], "polars.get_index_type": [[138, null]], "polars.groups": [[789, null]], "polars.head": [[790, null]], "polars.implode": [[791, null]], "polars.int_range": [[792, null]], "polars.int_ranges": [[793, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[139, null]], "polars.io.partition.BasePartitionContext": [[140, null]], "polars.io.partition.KeyedPartition": [[141, null]], "polars.io.partition.KeyedPartitionContext": [[142, null]], "polars.io.plugins.register_io_source": [[143, null]], "polars.json_normalize": [[144, null]], "polars.last": [[794, null]], "polars.lazyframe.engine_config.GPUEngine": [[929, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[930, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[931, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[932, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[933, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[934, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[935, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[936, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[937, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[938, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[939, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[940, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[941, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[942, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[943, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[944, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[945, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[946, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[947, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[948, null]], "polars.len": [[795, null]], "polars.linear_space": [[796, null]], "polars.linear_spaces": [[797, null]], "polars.lit": [[798, null]], "polars.map_batches": [[799, null]], "polars.map_groups": [[800, null]], "polars.max": [[801, null]], "polars.max_horizontal": [[802, null]], "polars.mean": [[803, null]], "polars.mean_horizontal": [[804, null]], "polars.median": [[805, null]], "polars.min": [[806, null]], "polars.min_horizontal": [[807, null]], "polars.n_unique": [[808, null]], "polars.nth": [[809, null]], "polars.ones": [[810, null]], "polars.plugins.register_plugin_function": [[145, null]], "polars.quantile": [[811, null]], "polars.read_avro": [[146, null]], "polars.read_clipboard": [[147, null]], "polars.read_csv": [[148, null]], "polars.read_csv_batched": [[149, null]], "polars.read_database": [[150, null]], "polars.read_database_uri": [[151, null]], "polars.read_delta": [[152, null]], "polars.read_excel": [[153, null]], "polars.read_ipc": [[154, null]], "polars.read_ipc_schema": [[155, null]], "polars.read_ipc_stream": [[156, null]], "polars.read_json": [[157, null]], "polars.read_ndjson": [[158, null]], "polars.read_ods": [[159, null]], "polars.read_parquet": [[160, null]], "polars.read_parquet_schema": [[161, null]], "polars.reduce": [[812, null]], "polars.repeat": [[813, null]], "polars.rolling_corr": [[814, null]], "polars.rolling_cov": [[815, null]], "polars.scan_csv": [[162, null]], "polars.scan_delta": [[163, null]], "polars.scan_iceberg": [[164, null]], "polars.scan_ipc": [[165, null]], "polars.scan_ndjson": [[166, null]], "polars.scan_parquet": [[167, null]], "polars.scan_pyarrow_dataset": [[168, null]], "polars.select": [[816, null]], "polars.set_random_seed": [[169, null]], "polars.show_versions": [[170, null]], "polars.sql": [[817, null]], "polars.sql_expr": [[818, null]], "polars.std": [[819, null]], "polars.struct": [[820, null]], "polars.sum": [[821, null]], "polars.sum_horizontal": [[822, null]], "polars.tail": [[823, null]], "polars.testing.assert_frame_equal": [[171, null]], "polars.testing.assert_frame_not_equal": [[172, null]], "polars.testing.assert_series_equal": [[173, null]], "polars.testing.assert_series_not_equal": [[174, null]], "polars.testing.parametric.column": [[175, null]], "polars.testing.parametric.columns": [[176, null]], "polars.testing.parametric.create_list_strategy": [[177, null]], "polars.testing.parametric.dataframes": [[178, null]], "polars.testing.parametric.dtypes": [[179, null]], "polars.testing.parametric.lists": [[180, null]], "polars.testing.parametric.load_profile": [[181, null]], "polars.testing.parametric.series": [[182, null]], "polars.testing.parametric.set_profile": [[183, null]], "polars.thread_pool_size": [[184, null]], "polars.threadpool_size": [[185, null]], "polars.time": [[824, null]], "polars.time_range": [[825, null]], "polars.time_ranges": [[826, null]], "polars.using_string_cache": [[186, null]], "polars.var": [[827, null]], "polars.when": [[828, null]], "polars.zeros": [[829, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[204, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[962, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[205, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[963, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[206, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1377, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1377, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[207, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[964, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[187, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[193, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[194, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[196, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[197, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[65, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[66, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[67, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[68, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[69, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[70, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[71, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[72, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[73, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[74, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[75, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[76, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[77, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[78, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[79, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[80, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[81, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[82, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[83, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[84, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[85, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[86, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[87, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[88, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[89, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[90, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[91, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[92, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[93, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[140, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[141, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[142, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[929, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[52, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[53, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[54, "polars.PartitionParted.__init__", false]], "__init__() (polars.sqlcontext method)": [[1377, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[55, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[175, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[327, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[357, "polars.Expr.abs", false]], "abs() (polars.series method)": [[965, "polars.Series.abs", false]], "add() (polars.expr method)": [[358, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[445, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1054, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[328, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[930, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[359, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[360, "polars.Expr.alias", false]], "alias() (polars.series method)": [[966, "polars.Series.alias", false]], "align_frames() (in module polars)": [[56, "polars.align_frames", false]], "all() (in module polars)": [[753, "polars.all", false]], "all() (in module polars.selectors)": [[960, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[329, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[361, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[377, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[540, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[931, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[967, "polars.Series.all", false]], "all() (polars.series.arr method)": [[982, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1157, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[754, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[960, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[960, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[362, "polars.Expr.and_", false]], "any() (in module polars)": [[755, "polars.any", false]], "any() (polars.expr method)": [[363, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[378, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[541, "polars.Expr.list.any", false]], "any() (polars.series method)": [[968, "polars.Series.any", false]], "any() (polars.series.arr method)": [[983, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1158, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[756, "polars.any_horizontal", false]], "append() (polars.expr method)": [[364, "polars.Expr.append", false]], "append() (polars.series method)": [[969, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[757, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[208, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[365, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[853, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[970, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[758, "polars.arange", false]], "arccos() (polars.expr method)": [[366, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[971, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[367, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[972, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[368, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[973, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[369, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[974, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[370, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[975, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[759, "polars.arctan2", false]], "arctan2d() (in module polars)": [[760, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[371, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[976, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[372, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[379, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[542, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[977, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[984, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1159, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[373, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[380, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[543, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[978, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[985, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1160, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[374, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[979, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[761, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[375, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[980, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[376, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[981, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[762, "polars.arg_where", false]], "array (class in polars.datatypes)": [[65, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[171, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[172, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[173, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[174, "polars.testing.assert_series_not_equal", false]], "base_utc_offset() (polars.expr.dt method)": [[446, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1055, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[140, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[66, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[960, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[408, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1013, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[409, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1014, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[410, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1015, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[411, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1016, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[412, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1017, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[413, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1018, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[414, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1019, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[415, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1020, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[416, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1021, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[67, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[960, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[209, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[417, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[854, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1022, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[418, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[61, "polars.build_info", false]], "business_day_count() (in module polars)": [[763, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[960, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[960, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[960, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[855, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[946, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[210, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[419, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[856, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1023, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[447, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1056, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[187, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[193, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[68, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[960, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[99, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[425, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1032, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[426, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1033, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[448, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1057, "polars.Series.dt.century", false]], "chronoformatwarning": [[100, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1034, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[211, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[857, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1035, "polars.Series.clear", false]], "clip() (polars.expr method)": [[427, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1036, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[212, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[858, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1037, "polars.Series.clone", false]], "coalesce() (in module polars)": [[764, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[859, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[62, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[63, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[860, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[213, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[861, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[175, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[194, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[101, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[214, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[862, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[176, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[449, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1058, "polars.Series.dt.combine", false]], "computeerror": [[102, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[64, "polars.concat", false]], "concat() (polars.expr.list method)": [[544, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[683, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1161, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1265, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[765, "polars.concat_arr", false]], "concat_list() (in module polars)": [[766, "polars.concat_list", false]], "concat_str() (in module polars)": [[767, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[960, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[381, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[401, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[545, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[684, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[986, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1006, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1162, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1266, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[685, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1267, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[450, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1059, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[768, "polars.corr", false]], "corr() (polars.dataframe method)": [[215, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[428, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1038, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[429, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1039, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[430, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1040, "polars.Series.cot", false]], "count() (in module polars)": [[769, "polars.count", false]], "count() (polars.dataframe method)": [[216, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[330, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[431, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[863, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[932, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1041, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[382, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[546, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[686, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[987, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1163, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1268, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[770, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[177, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[771, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[432, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1042, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[772, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[433, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1043, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[434, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1044, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[435, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1045, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[773, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[774, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[436, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1046, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[775, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[437, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1047, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[103, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[438, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1048, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[178, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[104, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[195, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[69, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[70, "polars.datatypes.Date", false]], "date() (in module polars)": [[776, "polars.date", false]], "date() (in module polars.selectors)": [[960, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[451, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1060, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[777, "polars.date_range", false]], "date_ranges() (in module polars)": [[778, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[71, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[779, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[960, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[452, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1061, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[780, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[781, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[453, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1062, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[72, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[960, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[402, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[687, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1007, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1269, "polars.Series.str.decode", false]], "defer() (in module polars)": [[95, "polars.defer", false]], "degrees() (polars.expr method)": [[439, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[217, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[864, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1049, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[218, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[440, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[865, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[441, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[547, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1050, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1164, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[960, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[96, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[442, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1051, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[219, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[866, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[220, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[221, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[443, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[867, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1052, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[222, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[444, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[548, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[868, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1053, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1165, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[454, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1063, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1103, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[223, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[869, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[179, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[105, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[73, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[782, "polars.duration", false]], "duration() (in module polars.selectors)": [[960, "polars.selectors.duration", false]], "element() (in module polars)": [[783, "polars.element", false]], "enable_string_cache() (in module polars)": [[97, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[403, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[688, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1008, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1270, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[960, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[404, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[420, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[689, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1009, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1024, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1271, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[490, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1104, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[74, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[455, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1064, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[491, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[590, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1105, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[492, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1106, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[224, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1107, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[98, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[690, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1272, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[225, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1108, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[549, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1166, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[493, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1109, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[494, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1110, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[495, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1111, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[496, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1112, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[784, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[960, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[497, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1358, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1359, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[498, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1113, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[960, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[870, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[129, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[226, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[499, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[383, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[550, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[691, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[871, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1114, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[988, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1167, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1273, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[227, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1115, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[500, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1116, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[692, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1274, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[693, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1275, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[694, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1276, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[695, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1277, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[947, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[948, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[75, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[732, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1314, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1315, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[228, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[501, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[872, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1117, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[229, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[502, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[873, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1118, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[230, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[503, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[874, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1119, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[696, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1278, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[697, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1279, "polars.Series.str.find_many", false]], "first() (in module polars)": [[785, "polars.first", false]], "first() (in module polars.selectors)": [[960, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[331, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[504, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[384, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[551, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[875, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[933, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1120, "polars.Series.first", false]], "first() (polars.series.arr method)": [[989, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1168, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[231, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1121, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[505, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[960, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[76, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[77, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[506, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1122, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[507, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[786, "polars.fold", false]], "fold() (polars.dataframe method)": [[232, "polars.DataFrame.fold", false]], "format() (in module polars)": [[787, "polars.format", false]], "from_arrow() (in module polars)": [[130, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[131, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[132, "polars.from_dict", false]], "from_dicts() (in module polars)": [[133, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[788, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[508, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[134, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[135, "polars.from_pandas", false]], "from_records() (in module polars)": [[136, "polars.from_records", false]], "from_repr() (in module polars)": [[137, "polars.from_repr", false]], "gather() (polars.expr method)": [[509, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[552, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1123, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1169, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[233, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[510, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[553, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[876, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1124, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1170, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[511, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1125, "polars.Series.ge", false]], "get() (polars.expr method)": [[512, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[385, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[554, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[990, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1171, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[421, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1025, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1126, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[234, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[235, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[236, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[138, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[198, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[188, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[237, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[929, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[238, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[877, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[239, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[878, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[789, "polars.groups", false]], "gt() (polars.expr method)": [[513, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1127, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[591, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[514, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1128, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1129, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[515, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1130, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[240, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[790, "polars.head", false]], "head() (polars.dataframe method)": [[241, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[332, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[516, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[555, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[698, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[879, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[934, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1131, "polars.Series.head", false]], "head() (polars.series.list method)": [[1172, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1280, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[242, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[517, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1132, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[456, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1065, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[243, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[791, "polars.implode", false]], "implode() (polars.expr method)": [[518, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1133, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[519, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1134, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[244, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[520, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[880, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[78, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[79, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[80, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[81, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[82, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[792, "polars.int_range", false]], "int_ranges() (in module polars)": [[793, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[960, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[245, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[521, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[881, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1135, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[522, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1136, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[106, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[523, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1137, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[592, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[593, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[246, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[524, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1138, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[247, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1139, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[525, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1140, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[526, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1141, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[527, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1142, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[528, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1143, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[529, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1144, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[457, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1066, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[594, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1026, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[530, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1145, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[531, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1146, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[532, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1147, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[533, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1148, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[595, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[960, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1149, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[248, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[534, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1150, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[458, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1067, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[249, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1151, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[250, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[251, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[252, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[253, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[386, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[556, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[699, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[882, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[991, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1173, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1281, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[254, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[883, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[255, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[884, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[700, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1282, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[733, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1316, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[144, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[701, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1283, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[610, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[141, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[142, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[535, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1152, "polars.Series.kurtosis", false]], "last() (in module polars)": [[794, "polars.last", false]], "last() (in module polars.selectors)": [[960, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[333, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[536, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[387, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[557, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[885, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[935, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1153, "polars.Series.last", false]], "last() (polars.series.arr method)": [[992, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1174, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[256, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[886, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[537, "polars.Expr.le", false]], "le() (polars.series method)": [[1154, "polars.Series.le", false]], "len() (in module polars)": [[795, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[538, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[558, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[936, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1155, "polars.Series.len", false]], "len() (polars.series.list method)": [[1175, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[422, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[702, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1027, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1284, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[423, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[703, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1028, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1285, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[257, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[539, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[887, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1156, "polars.Series.limit", false]], "linear_space() (in module polars)": [[796, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[797, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[83, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[189, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[190, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[191, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[180, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[798, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[580, "polars.Expr.log", false]], "log() (polars.series method)": [[1197, "polars.Series.log", false]], "log10() (polars.expr method)": [[581, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1198, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[582, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1199, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[583, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1200, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[584, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1201, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[611, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[799, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[585, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[888, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[586, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1202, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[612, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[800, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[937, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[258, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[107, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[960, "polars.selectors.matches", false]], "max() (in module polars)": [[801, "polars.max", false]], "max() (polars.dataframe method)": [[259, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[587, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[388, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[559, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[889, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[938, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1203, "polars.Series.max", false]], "max() (polars.series.arr method)": [[993, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1068, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1176, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[802, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[260, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[803, "polars.mean", false]], "mean() (polars.dataframe method)": [[261, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[588, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[560, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[890, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[939, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1204, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1069, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1177, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[804, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[262, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[805, "polars.median", false]], "median() (polars.dataframe method)": [[263, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[589, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[389, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[561, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[891, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[940, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1205, "polars.Series.median", false]], "median() (polars.series.arr method)": [[994, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1070, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1178, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[264, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[892, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[265, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[893, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[459, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1071, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[460, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1072, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[461, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1073, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[806, "polars.min", false]], "min() (polars.dataframe method)": [[266, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[605, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[390, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[562, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[894, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[941, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1206, "polars.Series.min", false]], "min() (polars.series.arr method)": [[995, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1074, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1179, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[807, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[267, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[462, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1075, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[606, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[607, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1207, "polars.Series.mode", false]], "module": [[960, "module-polars.selectors", false]], "moduleupgraderequirederror": [[108, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[463, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1076, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[464, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1077, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[465, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1078, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[608, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[268, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1208, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[808, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[269, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[609, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[391, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[563, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[942, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1209, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[996, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1180, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1210, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[196, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[619, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1211, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[620, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1212, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[466, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1079, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[621, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[596, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1213, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[622, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1214, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[623, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1215, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[139, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[109, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[704, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1286, "polars.Series.str.normalize", false]], "norowsreturnederror": [[110, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[624, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1216, "polars.Series.not_", false]], "nth() (in module polars)": [[809, "polars.nth", false]], "null (class in polars.datatypes)": [[84, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[270, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[625, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[895, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1217, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[960, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[85, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[467, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1080, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[810, "polars.ones", false]], "or_() (polars.expr method)": [[626, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[468, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1081, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[111, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[597, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[627, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[705, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1287, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[706, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1288, "polars.Series.str.pad_start", false]], "panicexception": [[112, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[113, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[271, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[52, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[53, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[54, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[628, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1218, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[629, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1219, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[630, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1220, "polars.Series.peak_min", false]], "performancewarning": [[114, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[272, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[631, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[896, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[273, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[352, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1354, "polars.Series.plot", false]], "polars.selectors": [[960, "module-polars.selectors", false]], "polarserror": [[115, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[116, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[117, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[598, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[632, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1221, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[613, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[614, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[274, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[633, "polars.Expr.product", false]], "product() (polars.series method)": [[1222, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[897, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[634, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1223, "polars.Series.qcut", false]], "quantile() (in module polars)": [[811, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[275, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[635, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[898, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[943, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1224, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[469, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1082, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[636, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[637, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1225, "polars.Series.rank", false]], "read_avro() (in module polars)": [[146, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[147, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[148, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[149, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[150, "polars.read_database", false]], "read_database_uri() (in module polars)": [[151, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[152, "polars.read_delta", false]], "read_excel() (in module polars)": [[153, "polars.read_excel", false]], "read_ipc() (in module polars)": [[154, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[155, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[156, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[157, "polars.read_json", false]], "read_ndjson() (in module polars)": [[158, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[159, "polars.read_ods", false]], "read_parquet() (in module polars)": [[160, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[161, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[276, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[638, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1226, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[812, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1360, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[57, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[58, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1361, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[143, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[59, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1362, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[145, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[60, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[639, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[405, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1227, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1010, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[899, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[277, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[900, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[278, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[901, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1228, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[734, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1317, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[813, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[640, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[641, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[470, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[707, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1229, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1083, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1289, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[708, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1290, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[279, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[709, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1291, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[642, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1230, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[471, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1084, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[643, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1231, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[280, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[644, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[392, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[564, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[710, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[902, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1232, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[997, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1181, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1292, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[645, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1233, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[646, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1234, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[281, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[647, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[903, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[814, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[815, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[648, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1235, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[649, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1236, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[650, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[651, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1237, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[652, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[653, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1238, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[654, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[655, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1239, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[656, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[657, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1240, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[658, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[659, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1241, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[660, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1242, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[661, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[662, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1243, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[663, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[664, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1244, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[665, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[599, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[666, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[472, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1245, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1085, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[667, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1246, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[282, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[283, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[284, "polars.DataFrame.rows_by_key", false]], "rowserror": [[118, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[285, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[668, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[565, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1247, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1182, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[162, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[163, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[164, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[165, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[166, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[167, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[168, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[192, "polars.Catalog.scan_table", false]], "scatter() (polars.series method)": [[1248, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[286, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[904, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1318, "polars.Series.struct.schema", false]], "schemaerror": [[121, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[122, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[669, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1249, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[473, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1086, "polars.Series.dt.second", false]], "select() (in module polars)": [[816, "polars.select", false]], "select() (polars.dataframe method)": [[287, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[905, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[288, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[906, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[289, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[600, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[907, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1250, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[566, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1183, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[567, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1184, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[169, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[290, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[670, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[908, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1251, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[568, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1185, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[569, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1186, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[291, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1252, "polars.Series.shape", false]], "shapeerror": [[123, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[292, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[671, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[393, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[570, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[909, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1253, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[998, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1187, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[601, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[910, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[170, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[672, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1254, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[293, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1255, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[673, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1256, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[674, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1257, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[960, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[675, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1258, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[676, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1259, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[406, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1011, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[677, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1260, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[294, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[678, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[571, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[711, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[911, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1261, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1188, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1293, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[295, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[679, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[394, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[572, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[912, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1262, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[999, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1189, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[680, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[712, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1294, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[713, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1295, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[714, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1296, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[817, "polars.sql", false]], "sql() (polars.dataframe method)": [[296, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[913, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[818, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1377, "polars.SQLContext", false]], "sqlinterfaceerror": [[119, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[120, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[681, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1263, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[960, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[407, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[424, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[715, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1012, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1029, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1297, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[819, "polars.std", false]], "std() (polars.dataframe method)": [[297, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[682, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[395, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[573, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[914, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1264, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1000, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1190, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[474, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1087, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[86, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[960, "polars.selectors.string", false]], "stringcache (class in polars)": [[55, "polars.StringCache", false]], "stringcachemismatcherror": [[124, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[716, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1298, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[717, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1299, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[718, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1300, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[719, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1301, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[720, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1302, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[721, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1303, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[87, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[820, "polars.struct", false]], "structfieldnotfounderror": [[125, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[353, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[737, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[615, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[616, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[821, "polars.sum", false]], "sum() (polars.dataframe method)": [[298, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[738, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[396, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[574, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[915, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[944, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1320, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1001, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1191, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[822, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[299, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[197, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1363, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[199, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[823, "polars.tail", false]], "tail() (polars.dataframe method)": [[300, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[739, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[575, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[722, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[916, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[945, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1321, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1192, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1304, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[740, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1322, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[741, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1323, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[960, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[184, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[185, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[88, "polars.datatypes.Time", false]], "time() (in module polars)": [[824, "polars.time", false]], "time() (in module polars.selectors)": [[960, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[475, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1088, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[825, "polars.time_range", false]], "time_ranges() (in module polars)": [[826, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[476, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1089, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[576, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1193, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[301, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1324, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[723, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1305, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[724, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1306, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[725, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1307, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[302, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[303, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[304, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1325, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1326, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[305, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1327, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[726, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1308, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[306, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1328, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[397, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1329, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1002, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1030, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[617, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[727, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1309, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[307, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1330, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[308, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1331, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[742, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1332, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[309, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[477, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1090, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[310, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[398, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[577, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1003, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1194, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[728, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1310, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[729, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1311, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[311, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1333, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[618, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[730, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1312, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[126, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[312, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[743, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[917, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1334, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[744, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[478, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1091, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[479, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1092, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[480, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1093, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[481, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1094, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[482, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1095, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[483, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1096, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[484, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1097, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[313, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[602, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[745, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[485, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1098, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[89, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[90, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[91, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[92, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[603, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[314, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[746, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[399, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[578, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[918, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1335, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1004, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1195, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[747, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1336, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[93, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[315, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[735, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[919, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1319, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[316, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[920, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1364, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[960, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[127, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[317, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[128, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[318, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[921, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[748, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1337, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[319, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1031, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[186, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[94, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[749, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1338, "polars.Series.value_counts", false]], "var() (in module polars)": [[827, "polars.var", false]], "var() (polars.dataframe method)": [[320, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[750, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[400, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[579, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[922, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1339, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1005, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1196, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[321, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[486, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1099, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[487, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1100, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[828, "polars.when", false]], "where() (polars.expr method)": [[751, "polars.Expr.where", false]], "width (polars.dataframe property)": [[322, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[923, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[323, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[924, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[324, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[925, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[926, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[736, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[325, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[927, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[326, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[928, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[488, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1101, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[604, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[752, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[489, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1102, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[829, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[731, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1313, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1340, "polars.Series.zip_with", false]]}, "objects": {"polars": [[187, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [52, 0, 1, "", "PartitionByKey"], [53, 0, 1, "", "PartitionMaxSize"], [54, 0, 1, "", "PartitionParted"], [1377, 0, 1, "", "SQLContext"], [55, 0, 1, "", "StringCache"], [56, 4, 1, "", "align_frames"], [753, 4, 1, "", "all"], [754, 4, 1, "", "all_horizontal"], [755, 4, 1, "", "any"], [756, 4, 1, "", "any_horizontal"], [757, 4, 1, "", "approx_n_unique"], [758, 4, 1, "", "arange"], [759, 4, 1, "", "arctan2"], [760, 4, 1, "", "arctan2d"], [761, 4, 1, "", "arg_sort_by"], [762, 4, 1, "", "arg_where"], [61, 4, 1, "", "build_info"], [763, 4, 1, "", "business_day_count"], [764, 4, 1, "", "coalesce"], [62, 4, 1, "", "collect_all"], [63, 4, 1, "", "collect_all_async"], [64, 4, 1, "", "concat"], [765, 4, 1, "", "concat_arr"], [766, 4, 1, "", "concat_list"], [767, 4, 1, "", "concat_str"], [768, 4, 1, "", "corr"], [769, 4, 1, "", "count"], [770, 4, 1, "", "cov"], [771, 4, 1, "", "cum_count"], [772, 4, 1, "", "cum_fold"], [773, 4, 1, "", "cum_reduce"], [774, 4, 1, "", "cum_sum"], [775, 4, 1, "", "cum_sum_horizontal"], [776, 4, 1, "", "date"], [777, 4, 1, "", "date_range"], [778, 4, 1, "", "date_ranges"], [779, 4, 1, "", "datetime"], [780, 4, 1, "", "datetime_range"], [781, 4, 1, "", "datetime_ranges"], [95, 4, 1, "", "defer"], [96, 4, 1, "", "disable_string_cache"], [782, 4, 1, "", "duration"], [783, 4, 1, "", "element"], [97, 4, 1, "", "enable_string_cache"], [98, 4, 1, "", "escape_regex"], [784, 4, 1, "", "exclude"], [129, 4, 1, "", "explain_all"], [785, 4, 1, "", "first"], [786, 4, 1, "", "fold"], [787, 4, 1, "", "format"], [130, 4, 1, "", "from_arrow"], [131, 4, 1, "", "from_dataframe"], [132, 4, 1, "", "from_dict"], [133, 4, 1, "", "from_dicts"], [788, 4, 1, "", "from_epoch"], [134, 4, 1, "", "from_numpy"], [135, 4, 1, "", "from_pandas"], [136, 4, 1, "", "from_records"], [137, 4, 1, "", "from_repr"], [138, 4, 1, "", "get_index_type"], [789, 4, 1, "", "groups"], [790, 4, 1, "", "head"], [791, 4, 1, "", "implode"], [792, 4, 1, "", "int_range"], [793, 4, 1, "", "int_ranges"], [144, 4, 1, "", "json_normalize"], [794, 4, 1, "", "last"], [795, 4, 1, "", "len"], [796, 4, 1, "", "linear_space"], [797, 4, 1, "", "linear_spaces"], [798, 4, 1, "", "lit"], [799, 4, 1, "", "map_batches"], [800, 4, 1, "", "map_groups"], [801, 4, 1, "", "max"], [802, 4, 1, "", "max_horizontal"], [803, 4, 1, "", "mean"], [804, 4, 1, "", "mean_horizontal"], [805, 4, 1, "", "median"], [806, 4, 1, "", "min"], [807, 4, 1, "", "min_horizontal"], [808, 4, 1, "", "n_unique"], [809, 4, 1, "", "nth"], [810, 4, 1, "", "ones"], [811, 4, 1, "", "quantile"], [146, 4, 1, "", "read_avro"], [147, 4, 1, "", "read_clipboard"], [148, 4, 1, "", "read_csv"], [149, 4, 1, "", "read_csv_batched"], [150, 4, 1, "", "read_database"], [151, 4, 1, "", "read_database_uri"], [152, 4, 1, "", "read_delta"], [153, 4, 1, "", "read_excel"], [154, 4, 1, "", "read_ipc"], [155, 4, 1, "", "read_ipc_schema"], [156, 4, 1, "", "read_ipc_stream"], [157, 4, 1, "", "read_json"], [158, 4, 1, "", "read_ndjson"], [159, 4, 1, "", "read_ods"], [160, 4, 1, "", "read_parquet"], [161, 4, 1, "", "read_parquet_schema"], [812, 4, 1, "", "reduce"], [813, 4, 1, "", "repeat"], [814, 4, 1, "", "rolling_corr"], [815, 4, 1, "", "rolling_cov"], [162, 4, 1, "", "scan_csv"], [163, 4, 1, "", "scan_delta"], [164, 4, 1, "", "scan_iceberg"], [165, 4, 1, "", "scan_ipc"], [166, 4, 1, "", "scan_ndjson"], [167, 4, 1, "", "scan_parquet"], [168, 4, 1, "", "scan_pyarrow_dataset"], [816, 4, 1, "", "select"], [960, 7, 0, "-", "selectors"], [169, 4, 1, "", "set_random_seed"], [170, 4, 1, "", "show_versions"], [817, 4, 1, "", "sql"], [818, 4, 1, "", "sql_expr"], [819, 4, 1, "", "std"], [820, 4, 1, "", "struct"], [821, 4, 1, "", "sum"], [822, 4, 1, "", "sum_horizontal"], [823, 4, 1, "", "tail"], [184, 4, 1, "", "thread_pool_size"], [185, 4, 1, "", "threadpool_size"], [824, 4, 1, "", "time"], [825, 4, 1, "", "time_range"], [826, 4, 1, "", "time_ranges"], [186, 4, 1, "", "using_string_cache"], [827, 4, 1, "", "var"], [828, 4, 1, "", "when"], [829, 4, 1, "", "zeros"]], "polars.Catalog": [[187, 1, 1, "", "__init__"], [188, 1, 1, "", "get_table_info"], [189, 1, 1, "", "list_catalogs"], [190, 1, 1, "", "list_namespaces"], [191, 1, 1, "", "list_tables"], [192, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[204, 1, 1, "", "__array__"], [205, 1, 1, "", "__arrow_c_stream__"], [206, 1, 1, "", "__dataframe__"], [207, 1, 1, "", "__getitem__"], [208, 1, 1, "", "approx_n_unique"], [209, 1, 1, "", "bottom_k"], [210, 1, 1, "", "cast"], [211, 1, 1, "", "clear"], [212, 1, 1, "", "clone"], [213, 1, 1, "", "collect_schema"], [214, 2, 1, "", "columns"], [215, 1, 1, "", "corr"], [216, 1, 1, "", "count"], [217, 1, 1, "", "describe"], [218, 1, 1, "", "deserialize"], [219, 1, 1, "", "drop"], [220, 1, 1, "", "drop_in_place"], [221, 1, 1, "", "drop_nans"], [222, 1, 1, "", "drop_nulls"], [223, 2, 1, "", "dtypes"], [224, 1, 1, "", "equals"], [225, 1, 1, "", "estimated_size"], [226, 1, 1, "", "explode"], [227, 1, 1, "", "extend"], [228, 1, 1, "", "fill_nan"], [229, 1, 1, "", "fill_null"], [230, 1, 1, "", "filter"], [231, 2, 1, "", "flags"], [232, 1, 1, "", "fold"], [233, 1, 1, "", "gather_every"], [234, 1, 1, "", "get_column"], [235, 1, 1, "", "get_column_index"], [236, 1, 1, "", "get_columns"], [237, 1, 1, "", "glimpse"], [238, 1, 1, "", "group_by"], [239, 1, 1, "", "group_by_dynamic"], [240, 1, 1, "", "hash_rows"], [241, 1, 1, "", "head"], [242, 2, 1, "", "height"], [243, 1, 1, "", "hstack"], [244, 1, 1, "", "insert_column"], [245, 1, 1, "", "interpolate"], [246, 1, 1, "", "is_duplicated"], [247, 1, 1, "", "is_empty"], [248, 1, 1, "", "is_unique"], [249, 1, 1, "", "item"], [250, 1, 1, "", "iter_columns"], [251, 1, 1, "", "iter_rows"], [252, 1, 1, "", "iter_slices"], [253, 1, 1, "", "join"], [254, 1, 1, "", "join_asof"], [255, 1, 1, "", "join_where"], [256, 1, 1, "", "lazy"], [257, 1, 1, "", "limit"], [258, 1, 1, "", "map_rows"], [259, 1, 1, "", "max"], [260, 1, 1, "", "max_horizontal"], [261, 1, 1, "", "mean"], [262, 1, 1, "", "mean_horizontal"], [263, 1, 1, "", "median"], [264, 1, 1, "", "melt"], [265, 1, 1, "", "merge_sorted"], [266, 1, 1, "", "min"], [267, 1, 1, "", "min_horizontal"], [268, 1, 1, "", "n_chunks"], [269, 1, 1, "", "n_unique"], [270, 1, 1, "", "null_count"], [271, 1, 1, "", "partition_by"], [272, 1, 1, "", "pipe"], [273, 1, 1, "", "pivot"], [352, 2, 1, "", "plot"], [274, 1, 1, "", "product"], [275, 1, 1, "", "quantile"], [276, 1, 1, "", "rechunk"], [277, 1, 1, "", "remove"], [278, 1, 1, "", "rename"], [279, 1, 1, "", "replace_column"], [280, 1, 1, "", "reverse"], [281, 1, 1, "", "rolling"], [282, 1, 1, "", "row"], [283, 1, 1, "", "rows"], [284, 1, 1, "", "rows_by_key"], [285, 1, 1, "", "sample"], [286, 2, 1, "", "schema"], [287, 1, 1, "", "select"], [288, 1, 1, "", "select_seq"], [289, 1, 1, "", "serialize"], [290, 1, 1, "", "set_sorted"], [291, 2, 1, "", "shape"], [292, 1, 1, "", "shift"], [293, 1, 1, "", "shrink_to_fit"], [294, 1, 1, "", "slice"], [295, 1, 1, "", "sort"], [296, 1, 1, "", "sql"], [297, 1, 1, "", "std"], [353, 2, 1, "", "style"], [298, 1, 1, "", "sum"], [299, 1, 1, "", "sum_horizontal"], [300, 1, 1, "", "tail"], [301, 1, 1, "", "to_arrow"], [302, 1, 1, "", "to_dict"], [303, 1, 1, "", "to_dicts"], [304, 1, 1, "", "to_dummies"], [305, 1, 1, "", "to_init_repr"], [306, 1, 1, "", "to_jax"], [307, 1, 1, "", "to_numpy"], [308, 1, 1, "", "to_pandas"], [309, 1, 1, "", "to_series"], [310, 1, 1, "", "to_struct"], [311, 1, 1, "", "to_torch"], [312, 1, 1, "", "top_k"], [313, 1, 1, "", "transpose"], [314, 1, 1, "", "unique"], [315, 1, 1, "", "unnest"], [316, 1, 1, "", "unpivot"], [317, 1, 1, "", "unstack"], [318, 1, 1, "", "update"], [319, 1, 1, "", "upsample"], [320, 1, 1, "", "var"], [321, 1, 1, "", "vstack"], [322, 2, 1, "", "width"], [323, 1, 1, "", "with_columns"], [324, 1, 1, "", "with_columns_seq"], [325, 1, 1, "", "with_row_count"], [326, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.Expr": [[357, 1, 1, "", "abs"], [358, 1, 1, "", "add"], [359, 1, 1, "", "agg_groups"], [360, 1, 1, "", "alias"], [361, 1, 1, "", "all"], [362, 1, 1, "", "and_"], [363, 1, 1, "", "any"], [364, 1, 1, "", "append"], [365, 1, 1, "", "approx_n_unique"], [366, 1, 1, "", "arccos"], [367, 1, 1, "", "arccosh"], [368, 1, 1, "", "arcsin"], [369, 1, 1, "", "arcsinh"], [370, 1, 1, "", "arctan"], [371, 1, 1, "", "arctanh"], [372, 1, 1, "", "arg_max"], [373, 1, 1, "", "arg_min"], [374, 1, 1, "", "arg_sort"], [375, 1, 1, "", "arg_true"], [376, 1, 1, "", "arg_unique"], [408, 1, 1, "", "bitwise_and"], [409, 1, 1, "", "bitwise_count_ones"], [410, 1, 1, "", "bitwise_count_zeros"], [411, 1, 1, "", "bitwise_leading_ones"], [412, 1, 1, "", "bitwise_leading_zeros"], [413, 1, 1, "", "bitwise_or"], [414, 1, 1, "", "bitwise_trailing_ones"], [415, 1, 1, "", "bitwise_trailing_zeros"], [416, 1, 1, "", "bitwise_xor"], [417, 1, 1, "", "bottom_k"], [418, 1, 1, "", "bottom_k_by"], [419, 1, 1, "", "cast"], [425, 1, 1, "", "cbrt"], [426, 1, 1, "", "ceil"], [427, 1, 1, "", "clip"], [428, 1, 1, "", "cos"], [429, 1, 1, "", "cosh"], [430, 1, 1, "", "cot"], [431, 1, 1, "", "count"], [432, 1, 1, "", "cum_count"], [433, 1, 1, "", "cum_max"], [434, 1, 1, "", "cum_min"], [435, 1, 1, "", "cum_prod"], [436, 1, 1, "", "cum_sum"], [437, 1, 1, "", "cumulative_eval"], [438, 1, 1, "", "cut"], [439, 1, 1, "", "degrees"], [440, 1, 1, "", "deserialize"], [441, 1, 1, "", "diff"], [442, 1, 1, "", "dot"], [443, 1, 1, "", "drop_nans"], [444, 1, 1, "", "drop_nulls"], [490, 1, 1, "", "entropy"], [491, 1, 1, "", "eq"], [492, 1, 1, "", "eq_missing"], [493, 1, 1, "", "ewm_mean"], [494, 1, 1, "", "ewm_mean_by"], [495, 1, 1, "", "ewm_std"], [496, 1, 1, "", "ewm_var"], [497, 1, 1, "", "exclude"], [498, 1, 1, "", "exp"], [499, 1, 1, "", "explode"], [500, 1, 1, "", "extend_constant"], [501, 1, 1, "", "fill_nan"], [502, 1, 1, "", "fill_null"], [503, 1, 1, "", "filter"], [504, 1, 1, "", "first"], [505, 1, 1, "", "flatten"], [506, 1, 1, "", "floor"], [507, 1, 1, "", "floordiv"], [508, 1, 1, "", "from_json"], [509, 1, 1, "", "gather"], [510, 1, 1, "", "gather_every"], [511, 1, 1, "", "ge"], [512, 1, 1, "", "get"], [513, 1, 1, "", "gt"], [514, 1, 1, "", "has_nulls"], [515, 1, 1, "", "hash"], [516, 1, 1, "", "head"], [517, 1, 1, "", "hist"], [518, 1, 1, "", "implode"], [519, 1, 1, "", "index_of"], [520, 1, 1, "", "inspect"], [521, 1, 1, "", "interpolate"], [522, 1, 1, "", "interpolate_by"], [523, 1, 1, "", "is_between"], [524, 1, 1, "", "is_duplicated"], [525, 1, 1, "", "is_finite"], [526, 1, 1, "", "is_first_distinct"], [527, 1, 1, "", "is_in"], [528, 1, 1, "", "is_infinite"], [529, 1, 1, "", "is_last_distinct"], [530, 1, 1, "", "is_nan"], [531, 1, 1, "", "is_not_nan"], [532, 1, 1, "", "is_not_null"], [533, 1, 1, "", "is_null"], [534, 1, 1, "", "is_unique"], [535, 1, 1, "", "kurtosis"], [536, 1, 1, "", "last"], [537, 1, 1, "", "le"], [538, 1, 1, "", "len"], [539, 1, 1, "", "limit"], [580, 1, 1, "", "log"], [581, 1, 1, "", "log10"], [582, 1, 1, "", "log1p"], [583, 1, 1, "", "lower_bound"], [584, 1, 1, "", "lt"], [585, 1, 1, "", "map_batches"], [586, 1, 1, "", "map_elements"], [587, 1, 1, "", "max"], [588, 1, 1, "", "mean"], [589, 1, 1, "", "median"], [605, 1, 1, "", "min"], [606, 1, 1, "", "mod"], [607, 1, 1, "", "mode"], [608, 1, 1, "", "mul"], [609, 1, 1, "", "n_unique"], [619, 1, 1, "", "nan_max"], [620, 1, 1, "", "nan_min"], [621, 1, 1, "", "ne"], [622, 1, 1, "", "ne_missing"], [623, 1, 1, "", "neg"], [624, 1, 1, "", "not_"], [625, 1, 1, "", "null_count"], [626, 1, 1, "", "or_"], [627, 1, 1, "", "over"], [628, 1, 1, "", "pct_change"], [629, 1, 1, "", "peak_max"], [630, 1, 1, "", "peak_min"], [631, 1, 1, "", "pipe"], [632, 1, 1, "", "pow"], [633, 1, 1, "", "product"], [634, 1, 1, "", "qcut"], [635, 1, 1, "", "quantile"], [636, 1, 1, "", "radians"], [637, 1, 1, "", "rank"], [638, 1, 1, "", "rechunk"], [639, 1, 1, "", "reinterpret"], [640, 1, 1, "", "repeat_by"], [641, 1, 1, "", "replace"], [642, 1, 1, "", "replace_strict"], [643, 1, 1, "", "reshape"], [644, 1, 1, "", "reverse"], [645, 1, 1, "", "rle"], [646, 1, 1, "", "rle_id"], [647, 1, 1, "", "rolling"], [648, 1, 1, "", "rolling_map"], [649, 1, 1, "", "rolling_max"], [650, 1, 1, "", "rolling_max_by"], [651, 1, 1, "", "rolling_mean"], [652, 1, 1, "", "rolling_mean_by"], [653, 1, 1, "", "rolling_median"], [654, 1, 1, "", "rolling_median_by"], [655, 1, 1, "", "rolling_min"], [656, 1, 1, "", "rolling_min_by"], [657, 1, 1, "", "rolling_quantile"], [658, 1, 1, "", "rolling_quantile_by"], [659, 1, 1, "", "rolling_skew"], [660, 1, 1, "", "rolling_std"], [661, 1, 1, "", "rolling_std_by"], [662, 1, 1, "", "rolling_sum"], [663, 1, 1, "", "rolling_sum_by"], [664, 1, 1, "", "rolling_var"], [665, 1, 1, "", "rolling_var_by"], [666, 1, 1, "", "round"], [667, 1, 1, "", "round_sig_figs"], [668, 1, 1, "", "sample"], [669, 1, 1, "", "search_sorted"], [670, 1, 1, "", "set_sorted"], [671, 1, 1, "", "shift"], [672, 1, 1, "", "shrink_dtype"], [673, 1, 1, "", "shuffle"], [674, 1, 1, "", "sign"], [675, 1, 1, "", "sin"], [676, 1, 1, "", "sinh"], [677, 1, 1, "", "skew"], [678, 1, 1, "", "slice"], [679, 1, 1, "", "sort"], [680, 1, 1, "", "sort_by"], [681, 1, 1, "", "sqrt"], [682, 1, 1, "", "std"], [737, 1, 1, "", "sub"], [738, 1, 1, "", "sum"], [739, 1, 1, "", "tail"], [740, 1, 1, "", "tan"], [741, 1, 1, "", "tanh"], [742, 1, 1, "", "to_physical"], [743, 1, 1, "", "top_k"], [744, 1, 1, "", "top_k_by"], [745, 1, 1, "", "truediv"], [746, 1, 1, "", "unique"], [747, 1, 1, "", "unique_counts"], [748, 1, 1, "", "upper_bound"], [749, 1, 1, "", "value_counts"], [750, 1, 1, "", "var"], [751, 1, 1, "", "where"], [752, 1, 1, "", "xor"]], "polars.Expr.arr": [[377, 1, 1, "", "all"], [378, 1, 1, "", "any"], [379, 1, 1, "", "arg_max"], [380, 1, 1, "", "arg_min"], [381, 1, 1, "", "contains"], [382, 1, 1, "", "count_matches"], [383, 1, 1, "", "explode"], [384, 1, 1, "", "first"], [385, 1, 1, "", "get"], [386, 1, 1, "", "join"], [387, 1, 1, "", "last"], [388, 1, 1, "", "max"], [389, 1, 1, "", "median"], [390, 1, 1, "", "min"], [391, 1, 1, "", "n_unique"], [392, 1, 1, "", "reverse"], [393, 1, 1, "", "shift"], [394, 1, 1, "", "sort"], [395, 1, 1, "", "std"], [396, 1, 1, "", "sum"], [397, 1, 1, "", "to_list"], [398, 1, 1, "", "to_struct"], [399, 1, 1, "", "unique"], [400, 1, 1, "", "var"]], "polars.Expr.bin": [[401, 1, 1, "", "contains"], [402, 1, 1, "", "decode"], [403, 1, 1, "", "encode"], [404, 1, 1, "", "ends_with"], [405, 1, 1, "", "reinterpret"], [406, 1, 1, "", "size"], [407, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[420, 1, 1, "", "ends_with"], [421, 1, 1, "", "get_categories"], [422, 1, 1, "", "len_bytes"], [423, 1, 1, "", "len_chars"], [424, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[445, 1, 1, "", "add_business_days"], [446, 1, 1, "", "base_utc_offset"], [447, 1, 1, "", "cast_time_unit"], [448, 1, 1, "", "century"], [449, 1, 1, "", "combine"], [450, 1, 1, "", "convert_time_zone"], [451, 1, 1, "", "date"], [452, 1, 1, "", "datetime"], [453, 1, 1, "", "day"], [454, 1, 1, "", "dst_offset"], [455, 1, 1, "", "epoch"], [456, 1, 1, "", "hour"], [457, 1, 1, "", "is_leap_year"], [458, 1, 1, "", "iso_year"], [459, 1, 1, "", "microsecond"], [460, 1, 1, "", "millennium"], [461, 1, 1, "", "millisecond"], [462, 1, 1, "", "minute"], [463, 1, 1, "", "month"], [464, 1, 1, "", "month_end"], [465, 1, 1, "", "month_start"], [466, 1, 1, "", "nanosecond"], [467, 1, 1, "", "offset_by"], [468, 1, 1, "", "ordinal_day"], [469, 1, 1, "", "quarter"], [470, 1, 1, "", "replace"], [471, 1, 1, "", "replace_time_zone"], [472, 1, 1, "", "round"], [473, 1, 1, "", "second"], [474, 1, 1, "", "strftime"], [475, 1, 1, "", "time"], [476, 1, 1, "", "timestamp"], [477, 1, 1, "", "to_string"], [478, 1, 1, "", "total_days"], [479, 1, 1, "", "total_hours"], [480, 1, 1, "", "total_microseconds"], [481, 1, 1, "", "total_milliseconds"], [482, 1, 1, "", "total_minutes"], [483, 1, 1, "", "total_nanoseconds"], [484, 1, 1, "", "total_seconds"], [485, 1, 1, "", "truncate"], [486, 1, 1, "", "week"], [487, 1, 1, "", "weekday"], [488, 1, 1, "", "with_time_unit"], [489, 1, 1, "", "year"]], "polars.Expr.list": [[540, 1, 1, "", "all"], [541, 1, 1, "", "any"], [542, 1, 1, "", "arg_max"], [543, 1, 1, "", "arg_min"], [544, 1, 1, "", "concat"], [545, 1, 1, "", "contains"], [546, 1, 1, "", "count_matches"], [547, 1, 1, "", "diff"], [548, 1, 1, "", "drop_nulls"], [549, 1, 1, "", "eval"], [550, 1, 1, "", "explode"], [551, 1, 1, "", "first"], [552, 1, 1, "", "gather"], [553, 1, 1, "", "gather_every"], [554, 1, 1, "", "get"], [555, 1, 1, "", "head"], [556, 1, 1, "", "join"], [557, 1, 1, "", "last"], [558, 1, 1, "", "len"], [559, 1, 1, "", "max"], [560, 1, 1, "", "mean"], [561, 1, 1, "", "median"], [562, 1, 1, "", "min"], [563, 1, 1, "", "n_unique"], [564, 1, 1, "", "reverse"], [565, 1, 1, "", "sample"], [566, 1, 1, "", "set_difference"], [567, 1, 1, "", "set_intersection"], [568, 1, 1, "", "set_symmetric_difference"], [569, 1, 1, "", "set_union"], [570, 1, 1, "", "shift"], [571, 1, 1, "", "slice"], [572, 1, 1, "", "sort"], [573, 1, 1, "", "std"], [574, 1, 1, "", "sum"], [575, 1, 1, "", "tail"], [576, 1, 1, "", "to_array"], [577, 1, 1, "", "to_struct"], [578, 1, 1, "", "unique"], [579, 1, 1, "", "var"]], "polars.Expr.meta": [[590, 1, 1, "", "eq"], [591, 1, 1, "", "has_multiple_outputs"], [592, 1, 1, "", "is_column"], [593, 1, 1, "", "is_column_selection"], [594, 1, 1, "", "is_literal"], [595, 1, 1, "", "is_regex_projection"], [596, 1, 1, "", "ne"], [597, 1, 1, "", "output_name"], [598, 1, 1, "", "pop"], [599, 1, 1, "", "root_names"], [600, 1, 1, "", "serialize"], [601, 1, 1, "", "show_graph"], [602, 1, 1, "", "tree_format"], [603, 1, 1, "", "undo_aliases"], [604, 1, 1, "", "write_json"]], "polars.Expr.name": [[610, 1, 1, "", "keep"], [611, 1, 1, "", "map"], [612, 1, 1, "", "map_fields"], [613, 1, 1, "", "prefix"], [614, 1, 1, "", "prefix_fields"], [615, 1, 1, "", "suffix"], [616, 1, 1, "", "suffix_fields"], [617, 1, 1, "", "to_lowercase"], [618, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[683, 1, 1, "", "concat"], [684, 1, 1, "", "contains"], [685, 1, 1, "", "contains_any"], [686, 1, 1, "", "count_matches"], [687, 1, 1, "", "decode"], [688, 1, 1, "", "encode"], [689, 1, 1, "", "ends_with"], [690, 1, 1, "", "escape_regex"], [691, 1, 1, "", "explode"], [692, 1, 1, "", "extract"], [693, 1, 1, "", "extract_all"], [694, 1, 1, "", "extract_groups"], [695, 1, 1, "", "extract_many"], [696, 1, 1, "", "find"], [697, 1, 1, "", "find_many"], [698, 1, 1, "", "head"], [699, 1, 1, "", "join"], [700, 1, 1, "", "json_decode"], [701, 1, 1, "", "json_path_match"], [702, 1, 1, "", "len_bytes"], [703, 1, 1, "", "len_chars"], [704, 1, 1, "", "normalize"], [705, 1, 1, "", "pad_end"], [706, 1, 1, "", "pad_start"], [707, 1, 1, "", "replace"], [708, 1, 1, "", "replace_all"], [709, 1, 1, "", "replace_many"], [710, 1, 1, "", "reverse"], [711, 1, 1, "", "slice"], [712, 1, 1, "", "split"], [713, 1, 1, "", "split_exact"], [714, 1, 1, "", "splitn"], [715, 1, 1, "", "starts_with"], [716, 1, 1, "", "strip_chars"], [717, 1, 1, "", "strip_chars_end"], [718, 1, 1, "", "strip_chars_start"], [719, 1, 1, "", "strip_prefix"], [720, 1, 1, "", "strip_suffix"], [721, 1, 1, "", "strptime"], [722, 1, 1, "", "tail"], [723, 1, 1, "", "to_date"], [724, 1, 1, "", "to_datetime"], [725, 1, 1, "", "to_decimal"], [726, 1, 1, "", "to_integer"], [727, 1, 1, "", "to_lowercase"], [728, 1, 1, "", "to_time"], [729, 1, 1, "", "to_titlecase"], [730, 1, 1, "", "to_uppercase"], [731, 1, 1, "", "zfill"]], "polars.Expr.struct": [[732, 1, 1, "", "field"], [733, 1, 1, "", "json_encode"], [734, 1, 1, "", "rename_fields"], [735, 1, 1, "", "unnest"], [736, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[853, 1, 1, "", "approx_n_unique"], [854, 1, 1, "", "bottom_k"], [855, 1, 1, "", "cache"], [856, 1, 1, "", "cast"], [857, 1, 1, "", "clear"], [858, 1, 1, "", "clone"], [859, 1, 1, "", "collect"], [860, 1, 1, "", "collect_async"], [861, 1, 1, "", "collect_schema"], [862, 2, 1, "", "columns"], [863, 1, 1, "", "count"], [864, 1, 1, "", "describe"], [865, 1, 1, "", "deserialize"], [866, 1, 1, "", "drop"], [867, 1, 1, "", "drop_nans"], [868, 1, 1, "", "drop_nulls"], [869, 2, 1, "", "dtypes"], [870, 1, 1, "", "explain"], [871, 1, 1, "", "explode"], [872, 1, 1, "", "fill_nan"], [873, 1, 1, "", "fill_null"], [874, 1, 1, "", "filter"], [875, 1, 1, "", "first"], [876, 1, 1, "", "gather_every"], [877, 1, 1, "", "group_by"], [878, 1, 1, "", "group_by_dynamic"], [879, 1, 1, "", "head"], [880, 1, 1, "", "inspect"], [881, 1, 1, "", "interpolate"], [882, 1, 1, "", "join"], [883, 1, 1, "", "join_asof"], [884, 1, 1, "", "join_where"], [885, 1, 1, "", "last"], [886, 1, 1, "", "lazy"], [887, 1, 1, "", "limit"], [888, 1, 1, "", "map_batches"], [889, 1, 1, "", "max"], [890, 1, 1, "", "mean"], [891, 1, 1, "", "median"], [892, 1, 1, "", "melt"], [893, 1, 1, "", "merge_sorted"], [894, 1, 1, "", "min"], [895, 1, 1, "", "null_count"], [896, 1, 1, "", "pipe"], [897, 1, 1, "", "profile"], [898, 1, 1, "", "quantile"], [899, 1, 1, "", "remote"], [900, 1, 1, "", "remove"], [901, 1, 1, "", "rename"], [902, 1, 1, "", "reverse"], [903, 1, 1, "", "rolling"], [904, 2, 1, "", "schema"], [905, 1, 1, "", "select"], [906, 1, 1, "", "select_seq"], [907, 1, 1, "", "serialize"], [908, 1, 1, "", "set_sorted"], [909, 1, 1, "", "shift"], [910, 1, 1, "", "show_graph"], [48, 1, 1, "", "sink_csv"], [49, 1, 1, "", "sink_ipc"], [50, 1, 1, "", "sink_ndjson"], [51, 1, 1, "", "sink_parquet"], [911, 1, 1, "", "slice"], [912, 1, 1, "", "sort"], [913, 1, 1, "", "sql"], [914, 1, 1, "", "std"], [915, 1, 1, "", "sum"], [916, 1, 1, "", "tail"], [917, 1, 1, "", "top_k"], [918, 1, 1, "", "unique"], [919, 1, 1, "", "unnest"], [920, 1, 1, "", "unpivot"], [921, 1, 1, "", "update"], [922, 1, 1, "", "var"], [923, 2, 1, "", "width"], [924, 1, 1, "", "with_columns"], [925, 1, 1, "", "with_columns_seq"], [926, 1, 1, "", "with_context"], [927, 1, 1, "", "with_row_count"], [928, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[52, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[53, 1, 1, "", "__init__"]], "polars.PartitionParted": [[54, 1, 1, "", "__init__"]], "polars.SQLContext": [[1377, 1, 1, "", "__enter__"], [1377, 1, 1, "", "__exit__"], [1377, 1, 1, "", "__init__"], [1358, 1, 1, "", "execute"], [1359, 1, 1, "", "execute_global"], [1360, 1, 1, "", "register"], [1361, 1, 1, "", "register_globals"], [1362, 1, 1, "", "register_many"], [1363, 1, 1, "", "tables"], [1364, 1, 1, "", "unregister"]], "polars.Series": [[962, 1, 1, "", "__array__"], [963, 1, 1, "", "__arrow_c_stream__"], [964, 1, 1, "", "__getitem__"], [965, 1, 1, "", "abs"], [966, 1, 1, "", "alias"], [967, 1, 1, "", "all"], [968, 1, 1, "", "any"], [969, 1, 1, "", "append"], [970, 1, 1, "", "approx_n_unique"], [971, 1, 1, "", "arccos"], [972, 1, 1, "", "arccosh"], [973, 1, 1, "", "arcsin"], [974, 1, 1, "", "arcsinh"], [975, 1, 1, "", "arctan"], [976, 1, 1, "", "arctanh"], [977, 1, 1, "", "arg_max"], [978, 1, 1, "", "arg_min"], [979, 1, 1, "", "arg_sort"], [980, 1, 1, "", "arg_true"], [981, 1, 1, "", "arg_unique"], [1013, 1, 1, "", "bitwise_and"], [1014, 1, 1, "", "bitwise_count_ones"], [1015, 1, 1, "", "bitwise_count_zeros"], [1016, 1, 1, "", "bitwise_leading_ones"], [1017, 1, 1, "", "bitwise_leading_zeros"], [1018, 1, 1, "", "bitwise_or"], [1019, 1, 1, "", "bitwise_trailing_ones"], [1020, 1, 1, "", "bitwise_trailing_zeros"], [1021, 1, 1, "", "bitwise_xor"], [1022, 1, 1, "", "bottom_k"], [1023, 1, 1, "", "cast"], [1032, 1, 1, "", "cbrt"], [1033, 1, 1, "", "ceil"], [1034, 1, 1, "", "chunk_lengths"], [1035, 1, 1, "", "clear"], [1036, 1, 1, "", "clip"], [1037, 1, 1, "", "clone"], [1038, 1, 1, "", "cos"], [1039, 1, 1, "", "cosh"], [1040, 1, 1, "", "cot"], [1041, 1, 1, "", "count"], [1042, 1, 1, "", "cum_count"], [1043, 1, 1, "", "cum_max"], [1044, 1, 1, "", "cum_min"], [1045, 1, 1, "", "cum_prod"], [1046, 1, 1, "", "cum_sum"], [1047, 1, 1, "", "cumulative_eval"], [1048, 1, 1, "", "cut"], [1049, 1, 1, "", "describe"], [1050, 1, 1, "", "diff"], [1051, 1, 1, "", "dot"], [1052, 1, 1, "", "drop_nans"], [1053, 1, 1, "", "drop_nulls"], [1103, 2, 1, "", "dtype"], [1104, 1, 1, "", "entropy"], [1105, 1, 1, "", "eq"], [1106, 1, 1, "", "eq_missing"], [1107, 1, 1, "", "equals"], [1108, 1, 1, "", "estimated_size"], [1109, 1, 1, "", "ewm_mean"], [1110, 1, 1, "", "ewm_mean_by"], [1111, 1, 1, "", "ewm_std"], [1112, 1, 1, "", "ewm_var"], [1113, 1, 1, "", "exp"], [1114, 1, 1, "", "explode"], [1115, 1, 1, "", "extend"], [1116, 1, 1, "", "extend_constant"], [1117, 1, 1, "", "fill_nan"], [1118, 1, 1, "", "fill_null"], [1119, 1, 1, "", "filter"], [1120, 1, 1, "", "first"], [1121, 2, 1, "", "flags"], [1122, 1, 1, "", "floor"], [1123, 1, 1, "", "gather"], [1124, 1, 1, "", "gather_every"], [1125, 1, 1, "", "ge"], [1126, 1, 1, "", "get_chunks"], [1127, 1, 1, "", "gt"], [1128, 1, 1, "", "has_nulls"], [1129, 1, 1, "", "has_validity"], [1130, 1, 1, "", "hash"], [1131, 1, 1, "", "head"], [1132, 1, 1, "", "hist"], [1133, 1, 1, "", "implode"], [1134, 1, 1, "", "index_of"], [1135, 1, 1, "", "interpolate"], [1136, 1, 1, "", "interpolate_by"], [1137, 1, 1, "", "is_between"], [1138, 1, 1, "", "is_duplicated"], [1139, 1, 1, "", "is_empty"], [1140, 1, 1, "", "is_finite"], [1141, 1, 1, "", "is_first_distinct"], [1142, 1, 1, "", "is_in"], [1143, 1, 1, "", "is_infinite"], [1144, 1, 1, "", "is_last_distinct"], [1145, 1, 1, "", "is_nan"], [1146, 1, 1, "", "is_not_nan"], [1147, 1, 1, "", "is_not_null"], [1148, 1, 1, "", "is_null"], [1149, 1, 1, "", "is_sorted"], [1150, 1, 1, "", "is_unique"], [1151, 1, 1, "", "item"], [1152, 1, 1, "", "kurtosis"], [1153, 1, 1, "", "last"], [1154, 1, 1, "", "le"], [1155, 1, 1, "", "len"], [1156, 1, 1, "", "limit"], [1197, 1, 1, "", "log"], [1198, 1, 1, "", "log10"], [1199, 1, 1, "", "log1p"], [1200, 1, 1, "", "lower_bound"], [1201, 1, 1, "", "lt"], [1202, 1, 1, "", "map_elements"], [1203, 1, 1, "", "max"], [1204, 1, 1, "", "mean"], [1205, 1, 1, "", "median"], [1206, 1, 1, "", "min"], [1207, 1, 1, "", "mode"], [1208, 1, 1, "", "n_chunks"], [1209, 1, 1, "", "n_unique"], [1210, 2, 1, "", "name"], [1211, 1, 1, "", "nan_max"], [1212, 1, 1, "", "nan_min"], [1213, 1, 1, "", "ne"], [1214, 1, 1, "", "ne_missing"], [1215, 1, 1, "", "new_from_index"], [1216, 1, 1, "", "not_"], [1217, 1, 1, "", "null_count"], [1218, 1, 1, "", "pct_change"], [1219, 1, 1, "", "peak_max"], [1220, 1, 1, "", "peak_min"], [1354, 2, 1, "", "plot"], [1221, 1, 1, "", "pow"], [1222, 1, 1, "", "product"], [1223, 1, 1, "", "qcut"], [1224, 1, 1, "", "quantile"], [1225, 1, 1, "", "rank"], [1226, 1, 1, "", "rechunk"], [1227, 1, 1, "", "reinterpret"], [1228, 1, 1, "", "rename"], [1229, 1, 1, "", "replace"], [1230, 1, 1, "", "replace_strict"], [1231, 1, 1, "", "reshape"], [1232, 1, 1, "", "reverse"], [1233, 1, 1, "", "rle"], [1234, 1, 1, "", "rle_id"], [1235, 1, 1, "", "rolling_map"], [1236, 1, 1, "", "rolling_max"], [1237, 1, 1, "", "rolling_mean"], [1238, 1, 1, "", "rolling_median"], [1239, 1, 1, "", "rolling_min"], [1240, 1, 1, "", "rolling_quantile"], [1241, 1, 1, "", "rolling_skew"], [1242, 1, 1, "", "rolling_std"], [1243, 1, 1, "", "rolling_sum"], [1244, 1, 1, "", "rolling_var"], [1245, 1, 1, "", "round"], [1246, 1, 1, "", "round_sig_figs"], [1247, 1, 1, "", "sample"], [1248, 1, 1, "", "scatter"], [1249, 1, 1, "", "search_sorted"], [1250, 1, 1, "", "set"], [1251, 1, 1, "", "set_sorted"], [1252, 2, 1, "", "shape"], [1253, 1, 1, "", "shift"], [1254, 1, 1, "", "shrink_dtype"], [1255, 1, 1, "", "shrink_to_fit"], [1256, 1, 1, "", "shuffle"], [1257, 1, 1, "", "sign"], [1258, 1, 1, "", "sin"], [1259, 1, 1, "", "sinh"], [1260, 1, 1, "", "skew"], [1261, 1, 1, "", "slice"], [1262, 1, 1, "", "sort"], [1263, 1, 1, "", "sqrt"], [1264, 1, 1, "", "std"], [1320, 1, 1, "", "sum"], [1321, 1, 1, "", "tail"], [1322, 1, 1, "", "tan"], [1323, 1, 1, "", "tanh"], [1324, 1, 1, "", "to_arrow"], [1325, 1, 1, "", "to_dummies"], [1326, 1, 1, "", "to_frame"], [1327, 1, 1, "", "to_init_repr"], [1328, 1, 1, "", "to_jax"], [1329, 1, 1, "", "to_list"], [1330, 1, 1, "", "to_numpy"], [1331, 1, 1, "", "to_pandas"], [1332, 1, 1, "", "to_physical"], [1333, 1, 1, "", "to_torch"], [1334, 1, 1, "", "top_k"], [1335, 1, 1, "", "unique"], [1336, 1, 1, "", "unique_counts"], [1337, 1, 1, "", "upper_bound"], [1338, 1, 1, "", "value_counts"], [1339, 1, 1, "", "var"], [1340, 1, 1, "", "zip_with"]], "polars.Series.arr": [[982, 1, 1, "", "all"], [983, 1, 1, "", "any"], [984, 1, 1, "", "arg_max"], [985, 1, 1, "", "arg_min"], [986, 1, 1, "", "contains"], [987, 1, 1, "", "count_matches"], [988, 1, 1, "", "explode"], [989, 1, 1, "", "first"], [990, 1, 1, "", "get"], [991, 1, 1, "", "join"], [992, 1, 1, "", "last"], [993, 1, 1, "", "max"], [994, 1, 1, "", "median"], [995, 1, 1, "", "min"], [996, 1, 1, "", "n_unique"], [997, 1, 1, "", "reverse"], [998, 1, 1, "", "shift"], [999, 1, 1, "", "sort"], [1000, 1, 1, "", "std"], [1001, 1, 1, "", "sum"], [1002, 1, 1, "", "to_list"], [1003, 1, 1, "", "to_struct"], [1004, 1, 1, "", "unique"], [1005, 1, 1, "", "var"]], "polars.Series.bin": [[1006, 1, 1, "", "contains"], [1007, 1, 1, "", "decode"], [1008, 1, 1, "", "encode"], [1009, 1, 1, "", "ends_with"], [1010, 1, 1, "", "reinterpret"], [1011, 1, 1, "", "size"], [1012, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1024, 1, 1, "", "ends_with"], [1025, 1, 1, "", "get_categories"], [1026, 1, 1, "", "is_local"], [1027, 1, 1, "", "len_bytes"], [1028, 1, 1, "", "len_chars"], [1029, 1, 1, "", "starts_with"], [1030, 1, 1, "", "to_local"], [1031, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1054, 1, 1, "", "add_business_days"], [1055, 1, 1, "", "base_utc_offset"], [1056, 1, 1, "", "cast_time_unit"], [1057, 1, 1, "", "century"], [1058, 1, 1, "", "combine"], [1059, 1, 1, "", "convert_time_zone"], [1060, 1, 1, "", "date"], [1061, 1, 1, "", "datetime"], [1062, 1, 1, "", "day"], [1063, 1, 1, "", "dst_offset"], [1064, 1, 1, "", "epoch"], [1065, 1, 1, "", "hour"], [1066, 1, 1, "", "is_leap_year"], [1067, 1, 1, "", "iso_year"], [1068, 1, 1, "", "max"], [1069, 1, 1, "", "mean"], [1070, 1, 1, "", "median"], [1071, 1, 1, "", "microsecond"], [1072, 1, 1, "", "millennium"], [1073, 1, 1, "", "millisecond"], [1074, 1, 1, "", "min"], [1075, 1, 1, "", "minute"], [1076, 1, 1, "", "month"], [1077, 1, 1, "", "month_end"], [1078, 1, 1, "", "month_start"], [1079, 1, 1, "", "nanosecond"], [1080, 1, 1, "", "offset_by"], [1081, 1, 1, "", "ordinal_day"], [1082, 1, 1, "", "quarter"], [1083, 1, 1, "", "replace"], [1084, 1, 1, "", "replace_time_zone"], [1085, 1, 1, "", "round"], [1086, 1, 1, "", "second"], [1087, 1, 1, "", "strftime"], [1088, 1, 1, "", "time"], [1089, 1, 1, "", "timestamp"], [1090, 1, 1, "", "to_string"], [1091, 1, 1, "", "total_days"], [1092, 1, 1, "", "total_hours"], [1093, 1, 1, "", "total_microseconds"], [1094, 1, 1, "", "total_milliseconds"], [1095, 1, 1, "", "total_minutes"], [1096, 1, 1, "", "total_nanoseconds"], [1097, 1, 1, "", "total_seconds"], [1098, 1, 1, "", "truncate"], [1099, 1, 1, "", "week"], [1100, 1, 1, "", "weekday"], [1101, 1, 1, "", "with_time_unit"], [1102, 1, 1, "", "year"]], "polars.Series.list": [[1157, 1, 1, "", "all"], [1158, 1, 1, "", "any"], [1159, 1, 1, "", "arg_max"], [1160, 1, 1, "", "arg_min"], [1161, 1, 1, "", "concat"], [1162, 1, 1, "", "contains"], [1163, 1, 1, "", "count_matches"], [1164, 1, 1, "", "diff"], [1165, 1, 1, "", "drop_nulls"], [1166, 1, 1, "", "eval"], [1167, 1, 1, "", "explode"], [1168, 1, 1, "", "first"], [1169, 1, 1, "", "gather"], [1170, 1, 1, "", "gather_every"], [1171, 1, 1, "", "get"], [1172, 1, 1, "", "head"], [1173, 1, 1, "", "join"], [1174, 1, 1, "", "last"], [1175, 1, 1, "", "len"], [1176, 1, 1, "", "max"], [1177, 1, 1, "", "mean"], [1178, 1, 1, "", "median"], [1179, 1, 1, "", "min"], [1180, 1, 1, "", "n_unique"], [1181, 1, 1, "", "reverse"], [1182, 1, 1, "", "sample"], [1183, 1, 1, "", "set_difference"], [1184, 1, 1, "", "set_intersection"], [1185, 1, 1, "", "set_symmetric_difference"], [1186, 1, 1, "", "set_union"], [1187, 1, 1, "", "shift"], [1188, 1, 1, "", "slice"], [1189, 1, 1, "", "sort"], [1190, 1, 1, "", "std"], [1191, 1, 1, "", "sum"], [1192, 1, 1, "", "tail"], [1193, 1, 1, "", "to_array"], [1194, 1, 1, "", "to_struct"], [1195, 1, 1, "", "unique"], [1196, 1, 1, "", "var"]], "polars.Series.str": [[1265, 1, 1, "", "concat"], [1266, 1, 1, "", "contains"], [1267, 1, 1, "", "contains_any"], [1268, 1, 1, "", "count_matches"], [1269, 1, 1, "", "decode"], [1270, 1, 1, "", "encode"], [1271, 1, 1, "", "ends_with"], [1272, 1, 1, "", "escape_regex"], [1273, 1, 1, "", "explode"], [1274, 1, 1, "", "extract"], [1275, 1, 1, "", "extract_all"], [1276, 1, 1, "", "extract_groups"], [1277, 1, 1, "", "extract_many"], [1278, 1, 1, "", "find"], [1279, 1, 1, "", "find_many"], [1280, 1, 1, "", "head"], [1281, 1, 1, "", "join"], [1282, 1, 1, "", "json_decode"], [1283, 1, 1, "", "json_path_match"], [1284, 1, 1, "", "len_bytes"], [1285, 1, 1, "", "len_chars"], [1286, 1, 1, "", "normalize"], [1287, 1, 1, "", "pad_end"], [1288, 1, 1, "", "pad_start"], [1289, 1, 1, "", "replace"], [1290, 1, 1, "", "replace_all"], [1291, 1, 1, "", "replace_many"], [1292, 1, 1, "", "reverse"], [1293, 1, 1, "", "slice"], [1294, 1, 1, "", "split"], [1295, 1, 1, "", "split_exact"], [1296, 1, 1, "", "splitn"], [1297, 1, 1, "", "starts_with"], [1298, 1, 1, "", "strip_chars"], [1299, 1, 1, "", "strip_chars_end"], [1300, 1, 1, "", "strip_chars_start"], [1301, 1, 1, "", "strip_prefix"], [1302, 1, 1, "", "strip_suffix"], [1303, 1, 1, "", "strptime"], [1304, 1, 1, "", "tail"], [1305, 1, 1, "", "to_date"], [1306, 1, 1, "", "to_datetime"], [1307, 1, 1, "", "to_decimal"], [1308, 1, 1, "", "to_integer"], [1309, 1, 1, "", "to_lowercase"], [1310, 1, 1, "", "to_time"], [1311, 1, 1, "", "to_titlecase"], [1312, 1, 1, "", "to_uppercase"], [1313, 1, 1, "", "zfill"]], "polars.Series.struct": [[1314, 1, 1, "", "field"], [1315, 3, 1, "", "fields"], [1316, 1, 1, "", "json_encode"], [1317, 1, 1, "", "rename_fields"], [1318, 3, 1, "", "schema"], [1319, 1, 1, "", "unnest"]], "polars.StringCache": [[55, 1, 1, "", "__init__"]], "polars.api": [[57, 4, 1, "", "register_dataframe_namespace"], [58, 4, 1, "", "register_expr_namespace"], [59, 4, 1, "", "register_lazyframe_namespace"], [60, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[193, 0, 1, "", "CatalogInfo"], [194, 0, 1, "", "ColumnInfo"], [195, 5, 1, "", "DataSourceFormat"], [196, 0, 1, "", "NamespaceInfo"], [197, 0, 1, "", "TableInfo"], [199, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[193, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[194, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[196, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[197, 1, 1, "", "__init__"], [198, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[327, 1, 1, "", "__iter__"], [328, 1, 1, "", "agg"], [329, 1, 1, "", "all"], [330, 1, 1, "", "count"], [331, 1, 1, "", "first"], [332, 1, 1, "", "head"], [333, 1, 1, "", "last"], [334, 1, 1, "", "len"], [335, 1, 1, "", "map_groups"], [336, 1, 1, "", "max"], [337, 1, 1, "", "mean"], [338, 1, 1, "", "median"], [339, 1, 1, "", "min"], [340, 1, 1, "", "n_unique"], [341, 1, 1, "", "quantile"], [342, 1, 1, "", "sum"], [343, 1, 1, "", "tail"]], "polars.datatypes": [[65, 0, 1, "", "Array"], [66, 0, 1, "", "Binary"], [67, 0, 1, "", "Boolean"], [68, 0, 1, "", "Categorical"], [69, 0, 1, "", "DataType"], [70, 0, 1, "", "Date"], [71, 0, 1, "", "Datetime"], [72, 0, 1, "", "Decimal"], [73, 0, 1, "", "Duration"], [74, 0, 1, "", "Enum"], [75, 0, 1, "", "Field"], [76, 0, 1, "", "Float32"], [77, 0, 1, "", "Float64"], [78, 0, 1, "", "Int128"], [79, 0, 1, "", "Int16"], [80, 0, 1, "", "Int32"], [81, 0, 1, "", "Int64"], [82, 0, 1, "", "Int8"], [83, 0, 1, "", "List"], [84, 0, 1, "", "Null"], [85, 0, 1, "", "Object"], [86, 0, 1, "", "String"], [87, 0, 1, "", "Struct"], [88, 0, 1, "", "Time"], [89, 0, 1, "", "UInt16"], [90, 0, 1, "", "UInt32"], [91, 0, 1, "", "UInt64"], [92, 0, 1, "", "UInt8"], [93, 0, 1, "", "Unknown"], [94, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[65, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[68, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[82, 1, 1, "", "__init__"]], "polars.datatypes.List": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[84, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[85, 1, 1, "", "__init__"]], "polars.datatypes.String": [[86, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[88, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[89, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[92, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[93, 1, 1, "", "__init__"]], "polars.exceptions": [[99, 6, 1, "", "CategoricalRemappingWarning"], [100, 6, 1, "", "ChronoFormatWarning"], [101, 6, 1, "", "ColumnNotFoundError"], [102, 6, 1, "", "ComputeError"], [103, 6, 1, "", "CustomUFuncWarning"], [104, 6, 1, "", "DataOrientationWarning"], [105, 6, 1, "", "DuplicateError"], [106, 6, 1, "", "InvalidOperationError"], [107, 6, 1, "", "MapWithoutReturnDtypeWarning"], [108, 6, 1, "", "ModuleUpgradeRequiredError"], [109, 6, 1, "", "NoDataError"], [110, 6, 1, "", "NoRowsReturnedError"], [111, 6, 1, "", "OutOfBoundsError"], [112, 6, 1, "", "PanicException"], [113, 6, 1, "", "ParameterCollisionError"], [114, 6, 1, "", "PerformanceWarning"], [115, 6, 1, "", "PolarsError"], [116, 6, 1, "", "PolarsInefficientMapWarning"], [117, 6, 1, "", "PolarsWarning"], [118, 6, 1, "", "RowsError"], [119, 6, 1, "", "SQLInterfaceError"], [120, 6, 1, "", "SQLSyntaxError"], [121, 6, 1, "", "SchemaError"], [122, 6, 1, "", "SchemaFieldNotFoundError"], [123, 6, 1, "", "ShapeError"], [124, 6, 1, "", "StringCacheMismatchError"], [125, 6, 1, "", "StructFieldNotFoundError"], [126, 6, 1, "", "TooManyRowsReturnedError"], [127, 6, 1, "", "UnstableWarning"], [128, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[139, 1, 1, "", "next_batches"]], "polars.io.partition": [[140, 0, 1, "", "BasePartitionContext"], [141, 0, 1, "", "KeyedPartition"], [142, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[140, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[141, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[142, 1, 1, "", "__init__"]], "polars.io.plugins": [[143, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[929, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[929, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[930, 1, 1, "", "agg"], [931, 1, 1, "", "all"], [932, 1, 1, "", "count"], [933, 1, 1, "", "first"], [934, 1, 1, "", "head"], [935, 1, 1, "", "last"], [936, 1, 1, "", "len"], [937, 1, 1, "", "map_groups"], [938, 1, 1, "", "max"], [939, 1, 1, "", "mean"], [940, 1, 1, "", "median"], [941, 1, 1, "", "min"], [942, 1, 1, "", "n_unique"], [943, 1, 1, "", "quantile"], [944, 1, 1, "", "sum"], [945, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[946, 1, 1, "", "cancel"], [947, 1, 1, "", "fetch"], [948, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[145, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[960, 4, 1, "", "all"], [960, 4, 1, "", "alpha"], [960, 4, 1, "", "alphanumeric"], [960, 4, 1, "", "binary"], [960, 4, 1, "", "boolean"], [960, 4, 1, "", "by_dtype"], [960, 4, 1, "", "by_index"], [960, 4, 1, "", "by_name"], [960, 4, 1, "", "categorical"], [960, 4, 1, "", "contains"], [960, 4, 1, "", "date"], [960, 4, 1, "", "datetime"], [960, 4, 1, "", "decimal"], [960, 4, 1, "", "digit"], [960, 4, 1, "", "duration"], [960, 4, 1, "", "ends_with"], [960, 4, 1, "", "exclude"], [960, 4, 1, "", "expand_selector"], [960, 4, 1, "", "first"], [960, 4, 1, "", "float"], [960, 4, 1, "", "integer"], [960, 4, 1, "", "is_selector"], [960, 4, 1, "", "last"], [960, 4, 1, "", "matches"], [960, 4, 1, "", "numeric"], [960, 4, 1, "", "signed_integer"], [960, 4, 1, "", "starts_with"], [960, 4, 1, "", "string"], [960, 4, 1, "", "temporal"], [960, 4, 1, "", "time"], [960, 4, 1, "", "unsigned_integer"]], "polars.testing": [[171, 4, 1, "", "assert_frame_equal"], [172, 4, 1, "", "assert_frame_not_equal"], [173, 4, 1, "", "assert_series_equal"], [174, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[175, 0, 1, "", "column"], [176, 4, 1, "", "columns"], [177, 4, 1, "", "create_list_strategy"], [178, 4, 1, "", "dataframes"], [179, 4, 1, "", "dtypes"], [180, 4, 1, "", "lists"], [181, 4, 1, "", "load_profile"], [182, 4, 1, "", "series"], [183, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[175, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 48, 60, 65, 75, 87, 95, 98, 100, 106, 130, 137, 143, 148, 149, 150, 151, 153, 154, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 182, 209, 210, 221, 222, 225, 230, 233, 238, 239, 244, 250, 253, 254, 264, 271, 273, 277, 279, 281, 284, 287, 288, 295, 304, 307, 312, 314, 315, 316, 317, 318, 323, 324, 349, 386, 418, 450, 455, 474, 477, 497, 503, 507, 519, 535, 556, 585, 586, 598, 607, 612, 619, 620, 627, 628, 639, 646, 680, 684, 692, 693, 694, 696, 698, 707, 708, 711, 712, 714, 721, 722, 723, 724, 728, 732, 734, 736, 744, 753, 754, 755, 756, 761, 768, 771, 774, 775, 784, 785, 787, 788, 794, 799, 800, 801, 802, 804, 806, 807, 809, 816, 818, 820, 821, 822, 828, 834, 838, 854, 856, 867, 868, 877, 878, 882, 883, 892, 900, 905, 906, 912, 917, 918, 919, 920, 921, 924, 925, 937, 954, 959, 960, 964, 965, 966, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1063, 1064, 1066, 1068, 1069, 1070, 1072, 1073, 1074, 1077, 1078, 1081, 1083, 1085, 1086, 1087, 1090, 1098, 1100, 1101, 1102, 1103, 1108, 1109, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1349, 1354, 1358, 1362, 1365, 1372, 1373], "0": [1, 7, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 51, 52, 56, 57, 58, 60, 64, 65, 72, 83, 95, 131, 144, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 170, 175, 176, 177, 178, 179, 180, 182, 185, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 223, 224, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 244, 245, 249, 251, 252, 253, 256, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 274, 275, 277, 279, 281, 283, 284, 285, 286, 287, 294, 295, 296, 297, 299, 304, 305, 306, 307, 308, 309, 311, 313, 317, 319, 320, 323, 325, 326, 328, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 349, 352, 353, 357, 359, 360, 362, 366, 367, 368, 369, 370, 371, 374, 375, 376, 379, 380, 382, 385, 395, 398, 400, 406, 408, 413, 416, 419, 425, 426, 427, 428, 429, 430, 437, 438, 439, 443, 444, 445, 451, 452, 456, 459, 461, 462, 466, 470, 473, 475, 477, 480, 481, 483, 484, 488, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 506, 507, 508, 510, 511, 513, 515, 517, 521, 522, 525, 528, 530, 531, 532, 533, 535, 537, 542, 543, 546, 549, 552, 553, 554, 560, 561, 573, 577, 579, 580, 581, 582, 584, 585, 587, 588, 589, 593, 598, 601, 604, 605, 606, 608, 610, 619, 620, 621, 622, 623, 625, 626, 628, 631, 632, 634, 635, 636, 637, 641, 642, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 674, 675, 676, 677, 681, 682, 683, 686, 691, 692, 693, 696, 697, 736, 737, 738, 740, 741, 742, 745, 750, 751, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 770, 772, 779, 783, 786, 792, 793, 795, 796, 797, 800, 803, 804, 805, 809, 811, 812, 816, 817, 824, 825, 826, 827, 828, 829, 834, 838, 853, 856, 857, 858, 861, 863, 864, 866, 867, 869, 870, 872, 873, 874, 876, 877, 878, 881, 882, 886, 888, 891, 892, 895, 897, 898, 900, 904, 905, 910, 912, 913, 914, 922, 924, 926, 927, 928, 930, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 944, 954, 959, 960, 964, 971, 972, 973, 974, 975, 976, 977, 979, 981, 984, 990, 1000, 1003, 1005, 1011, 1023, 1030, 1032, 1033, 1035, 1038, 1039, 1040, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1061, 1065, 1069, 1070, 1071, 1073, 1075, 1079, 1083, 1086, 1090, 1093, 1094, 1096, 1097, 1101, 1104, 1109, 1110, 1111, 1112, 1117, 1122, 1124, 1129, 1130, 1132, 1135, 1136, 1140, 1143, 1145, 1146, 1147, 1148, 1151, 1152, 1159, 1160, 1163, 1166, 1169, 1170, 1171, 1177, 1178, 1190, 1194, 1196, 1197, 1198, 1199, 1200, 1204, 1205, 1211, 1212, 1218, 1221, 1223, 1224, 1225, 1229, 1230, 1234, 1235, 1237, 1238, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1249, 1257, 1258, 1259, 1260, 1263, 1264, 1265, 1268, 1273, 1274, 1275, 1278, 1279, 1283, 1289, 1322, 1323, 1325, 1328, 1330, 1331, 1332, 1333, 1337, 1339, 1349, 1354, 1358, 1364, 1366, 1367, 1368, 1371, 1372, 1374, 1375, 1377, 1379, 1380], "00": [28, 41, 71, 210, 217, 239, 319, 349, 446, 447, 450, 454, 464, 465, 467, 471, 472, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 650, 652, 654, 656, 658, 661, 663, 665, 721, 724, 728, 779, 780, 781, 782, 796, 824, 825, 826, 838, 856, 864, 878, 954, 960, 1055, 1056, 1059, 1060, 1061, 1063, 1064, 1065, 1070, 1071, 1075, 1077, 1078, 1079, 1080, 1084, 1085, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1101, 1289, 1303, 1306, 1310, 1372], "000": [9, 11, 28, 41, 53, 349, 1289, 1380], "0000": [311, 349, 1333, 1349, 1380], "000000": [402, 403, 477, 687, 1007, 1008, 1269], "00000001": [12, 752, 838], "00000010": [752, 838], "00000011": [752, 838], "00000100": [752, 838], "00001000": [752, 838], "00001010": [752, 838], "00001011": [752, 838], "0000e": 12, "0000ff": [402, 403, 687, 1007, 1008, 1269], "0001": 477, "000100": 477, "000101": 477, "0005": 960, "00050": 960, "000800": 1090, "001": [58, 731, 782, 1093, 1094, 1096, 1313], "002": [782, 1093, 1094, 1096], "005": [1104, 1349], "00prefix": 960, "00z": [721, 724, 1303, 1306], "01": [29, 56, 70, 71, 178, 210, 217, 237, 239, 254, 281, 319, 349, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 721, 723, 724, 728, 763, 776, 777, 778, 779, 780, 781, 782, 796, 838, 856, 864, 878, 883, 903, 954, 960, 1054, 1056, 1058, 1059, 1060, 1061, 1064, 1065, 1070, 1071, 1075, 1077, 1078, 1079, 1080, 1083, 1084, 1085, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1101, 1303, 1305, 1306, 1310, 1372, 1375], "010": [9, 726, 1308], "01000": 29, "01000010": [752, 838], "01000110": [752, 838], "012": [667, 704, 838, 1246, 1286, 1349], "0123": [731, 1313], "01234": [667, 838, 1246, 1349], "012345": 1090, "015625": [1221, 1349], "01\u00b2": [704, 1286], "02": [56, 210, 217, 237, 239, 281, 319, 349, 445, 447, 449, 455, 464, 465, 467, 471, 476, 477, 479, 482, 484, 488, 647, 650, 652, 654, 656, 658, 661, 663, 665, 666, 721, 723, 724, 728, 763, 776, 777, 778, 779, 780, 781, 782, 796, 838, 856, 864, 878, 903, 954, 960, 1003, 1056, 1058, 1060, 1061, 1064, 1065, 1070, 1071, 1075, 1077, 1078, 1079, 1083, 1084, 1085, 1088, 1089, 1092, 1095, 1097, 1098, 1194, 1303, 1305, 1306, 1310, 1372, 1373], "03": [56, 137, 148, 210, 239, 254, 281, 319, 349, 447, 449, 450, 455, 464, 465, 467, 470, 471, 472, 474, 476, 477, 478, 479, 482, 484, 485, 488, 494, 507, 647, 650, 652, 654, 656, 658, 661, 663, 665, 723, 728, 776, 777, 778, 779, 780, 781, 782, 838, 856, 878, 883, 903, 954, 960, 1056, 1058, 1059, 1064, 1065, 1070, 1071, 1077, 1078, 1079, 1084, 1085, 1087, 1089, 1091, 1092, 1095, 1097, 1305, 1310], "037037": [1221, 1349], "04": [168, 210, 217, 239, 319, 349, 449, 450, 464, 465, 470, 471, 472, 474, 478, 479, 482, 484, 488, 650, 652, 654, 656, 658, 661, 663, 665, 721, 763, 776, 779, 780, 782, 838, 856, 864, 878, 954, 960, 1059, 1071, 1075, 1077, 1078, 1079, 1084, 1087, 1091, 1092, 1095, 1097, 1101, 1303, 1372], "047198": 1374, "05": [17, 168, 171, 172, 173, 174, 178, 210, 217, 319, 349, 445, 448, 449, 450, 451, 452, 456, 459, 460, 461, 462, 464, 465, 466, 471, 473, 474, 475, 477, 478, 763, 776, 777, 779, 780, 856, 864, 954, 960, 1058, 1059, 1060, 1061, 1084, 1085, 1087, 1088, 1090, 1091, 1098, 1372, 1373, 1375], "050545": 137, "0522623626787952": [1152, 1349], "0545": [1060, 1061, 1088], "05t10": 1090, "06": [178, 210, 319, 349, 445, 449, 463, 469, 471, 472, 473, 485, 486, 776, 779, 796, 856, 954, 960, 1054, 1084, 1085, 1090, 1098], "060": [451, 452, 456, 459, 461, 462, 466, 473, 475], "0601749420166": [225, 349], "06293300616044681": [1104, 1349], "07": [17, 148, 178, 217, 349, 445, 448, 449, 460, 471, 472, 477, 485, 721, 776, 777, 779, 780, 788, 864, 954, 960, 1054, 1058, 1084, 1090, 1303, 1372, 1375], "071068": [217, 349, 864, 954], "08": [148, 171, 172, 173, 174, 217, 254, 281, 296, 349, 445, 449, 464, 465, 472, 477, 647, 721, 780, 782, 796, 838, 864, 883, 903, 954, 960, 1054, 1085, 1098, 1303, 1372, 1373], "085537": [1113, 1349], "09": [56, 148, 217, 281, 349, 445, 449, 464, 465, 477, 627, 647, 725, 776, 777, 779, 826, 838, 864, 903, 954, 960, 1054, 1307], "090909": [628, 838], "094395": 1374, "098612": [582, 838, 1197, 1199, 1349, 1371], "0999": [448, 460], "0_": [41, 349], "0m": [454, 1063], "0x11bc0ad80": 959, "0\u00b5": 477, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 52, 56, 57, 58, 59, 60, 64, 65, 83, 87, 95, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 149, 152, 153, 154, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 178, 182, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 594, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 707, 708, 709, 713, 714, 715, 716, 717, 718, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 834, 838, 853, 854, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 960, 964, 965, 966, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1011, 1022, 1023, 1027, 1028, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1156, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1274, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1289, 1290, 1291, 1295, 1296, 1313, 1314, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1349, 1354, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1377, 1378, 1379, 1380], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 51, 56, 64, 137, 148, 149, 151, 162, 170, 212, 217, 221, 227, 236, 237, 239, 241, 243, 244, 245, 250, 254, 257, 268, 272, 274, 279, 281, 287, 296, 300, 323, 328, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 360, 364, 372, 373, 374, 376, 427, 433, 436, 441, 445, 446, 448, 449, 451, 452, 454, 456, 459, 460, 461, 462, 464, 465, 466, 470, 471, 472, 473, 475, 477, 485, 488, 494, 514, 515, 516, 521, 527, 539, 547, 553, 555, 561, 571, 573, 575, 579, 581, 597, 599, 610, 625, 627, 628, 631, 641, 642, 647, 678, 726, 736, 739, 752, 763, 764, 772, 777, 779, 780, 783, 786, 788, 790, 798, 799, 823, 826, 838, 859, 860, 864, 867, 878, 879, 881, 883, 887, 896, 897, 903, 905, 915, 916, 924, 930, 933, 935, 938, 939, 940, 941, 942, 943, 944, 954, 960, 1036, 1050, 1054, 1055, 1057, 1058, 1063, 1072, 1084, 1090, 1098, 1101, 1104, 1110, 1131, 1142, 1156, 1164, 1172, 1178, 1188, 1190, 1192, 1196, 1198, 1202, 1218, 1230, 1248, 1250, 1308, 1321, 1328, 1330, 1333, 1349, 1358, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1375, 1380], "100": [11, 18, 28, 41, 53, 133, 136, 144, 148, 149, 150, 153, 157, 158, 159, 162, 166, 255, 273, 292, 349, 477, 641, 642, 671, 685, 695, 697, 700, 709, 725, 781, 838, 884, 909, 954, 960, 1106, 1198, 1214, 1229, 1230, 1236, 1237, 1239, 1253, 1267, 1279, 1282, 1291, 1307, 1349, 1369, 1380], "1000": [150, 225, 305, 326, 349, 365, 838, 928, 954, 1093, 1198, 1327, 1349, 1380], "10000": [148, 252, 349], "100000": [11, 28], "1000000": [12, 1096], "1001": [326, 349, 928, 954], "1002": [326, 349, 928, 954], "10047419486152048166": [240, 349], "1005": [365, 838], "100_000": [53, 816, 888, 954], "100\u00b5": 477, "101": [9, 28, 255, 349, 449, 477, 726, 884, 954, 960, 1308, 1380], "101000": 449, "10101": [28, 1375], "1010101": 9, "101514": [217, 349, 864, 954], "102": [255, 349, 884, 954], "1024": [38, 47, 48, 51, 148, 149, 150, 158, 166, 349, 406, 954, 1011], "1040361802642726": [1152, 1349], "107149": 1374, "10734580197236529959": [1130, 1349], "1073741824": [672, 838], "10783150408545073287": [240, 349], "107_930_000": 1358, "10_000": [41, 349], "10i": [239, 349, 878, 954], "10m": [472, 485, 1085, 1098], "10t00": 477, "11": [11, 17, 47, 51, 170, 178, 208, 217, 254, 281, 349, 360, 464, 465, 467, 472, 485, 508, 521, 553, 604, 628, 637, 647, 648, 662, 678, 752, 796, 821, 826, 834, 838, 853, 859, 860, 864, 879, 883, 887, 897, 903, 916, 954, 960, 1080, 1085, 1098, 1202, 1235, 1349, 1367], "110": [221, 349, 709, 726, 867, 954, 1308], "1101441246220388612": [515, 838], "111": [11, 1369], "11111": 1086, "111110": 1086, "11111001": [752, 838], "11111010": [752, 838], "11111111": 11, "112": [672, 838, 1380], "11330": 177, "1152921504606846976": [1227, 1349], "116": 177, "11638928888656214026": [515, 838], "118034": [914, 954], "11aa": 1372, "11aabb": 1372, "11h": [446, 1055], "12": [27, 41, 56, 137, 148, 170, 178, 217, 239, 250, 254, 255, 281, 296, 319, 349, 360, 435, 446, 448, 449, 453, 460, 463, 464, 465, 467, 468, 469, 470, 472, 477, 485, 486, 487, 494, 521, 553, 585, 601, 628, 636, 647, 662, 672, 686, 707, 725, 773, 776, 779, 780, 781, 796, 799, 824, 825, 826, 838, 864, 878, 879, 883, 884, 887, 903, 910, 916, 954, 960, 1055, 1057, 1058, 1069, 1070, 1072, 1076, 1083, 1085, 1090, 1098, 1110, 1202, 1245, 1268, 1290, 1307, 1349, 1371, 1372, 1373, 1375, 1377, 1380], "120": [255, 349, 782, 884, 954, 1374], "1200": [667, 838], "120134": [725, 1307], "121": 1380, "123": [9, 594, 686, 693, 708, 731, 828, 960, 1268, 1275, 1313, 1326, 1349], "123000": 960, "1232e": [1038, 1040, 1349], "1234": [28, 667, 838], "12345": [788, 1033, 1090, 1122, 1245, 1349], "1234500": 960, "123456": [9, 960], "1234567": 28, "123456780": 137, "12346": 788, "123465": 960, "123a123": 708, "123abc": [707, 1289, 1290], "125": [1, 41, 60, 349, 358, 632, 817, 838, 913, 954, 1218, 1221, 1349], "1252": 148, "127": [1337, 1349, 1368], "128": [58, 72, 78, 1218, 1349], "129": [672, 838], "13": [211, 212, 217, 228, 229, 236, 244, 255, 256, 268, 281, 323, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 360, 445, 451, 452, 456, 459, 461, 462, 466, 473, 475, 597, 599, 647, 725, 766, 772, 775, 779, 786, 822, 824, 827, 838, 857, 858, 864, 872, 873, 884, 886, 903, 924, 933, 935, 938, 939, 940, 941, 942, 943, 944, 954, 1054, 1085, 1098, 1099, 1202, 1307, 1349, 1368], "130": [255, 349, 884, 954], "13382926553367784577": [515, 838], "134821952": 1358, "134_821_952": 1358, "135": [760, 1374], "13614470193936745724": [515, 838], "13756996518000038261": [1130, 1349], "13d": 477, "13h": [446, 1055], "14": [40, 170, 217, 255, 258, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 446, 451, 452, 456, 459, 461, 462, 466, 473, 475, 477, 521, 594, 637, 779, 824, 825, 838, 864, 884, 933, 935, 938, 939, 940, 941, 942, 943, 944, 954, 960, 1055, 1085, 1090], "140": [255, 349, 884, 954], "141592653589793": 11, "141593": [636, 838, 971, 1349, 1371, 1374], "142857": [1218, 1349], "143": [725, 1307, 1380], "1433": [39, 349], "1436e16": 178, "1438741209321515184": [240, 349], "1440": [482, 1095], "1443e235": 1380, "149": 1380, "14d": 960, "14h": 477, "15": [11, 41, 170, 217, 239, 244, 255, 258, 281, 349, 437, 441, 465, 470, 472, 477, 485, 494, 631, 647, 662, 704, 773, 779, 824, 825, 838, 864, 878, 884, 903, 954, 960, 1047, 1050, 1085, 1090, 1098, 1110, 1286, 1349, 1368, 1372], "150": [255, 349, 884, 954, 1237, 1349], "1500": [170, 181], "15000": [252, 349], "153061": [535, 838], "155": 144, "15836": 178, "15_000": [252, 349], "16": [1, 41, 58, 79, 89, 170, 184, 217, 239, 255, 281, 323, 349, 433, 436, 470, 477, 521, 601, 608, 627, 632, 647, 726, 736, 772, 782, 783, 786, 796, 838, 864, 878, 884, 903, 910, 924, 954, 960, 1085, 1098, 1218, 1258, 1308, 1322, 1349, 1368, 1371, 1372, 1377], "160": [255, 349, 884, 954], "165": [1085, 1098], "1656e15": [1040, 1349], "166667": [1218, 1349], "1666683077": 788, "1666683099": 788, "167": 56, "16996": 1380, "16h": 960, "17": [170, 178, 225, 254, 328, 349, 494, 519, 627, 648, 666, 768, 788, 825, 838, 883, 930, 954, 1038, 1040, 1085, 1110, 1134, 1235, 1349, 1380], "170": [144, 255, 349, 884, 954], "17293822569102704640": [1227, 1349], "174": 1380, "175201": [676, 838, 1259, 1349], "1755e": [175, 178], "1764": 60, "17888890": [225, 349], "179": 1380, "17_500": [252, 349], "18": [39, 137, 153, 217, 265, 281, 349, 436, 472, 485, 488, 521, 610, 627, 647, 736, 838, 864, 893, 897, 903, 954, 960, 1090, 1101, 1366, 1377], "180": [144, 439, 636, 838, 1374], "1800": [470, 1083], "1844": 178, "18446744073709551614": [1227, 1349], "185_000_000": 1358, "186": 1380, "1875": [664, 838, 922, 954], "1897": [448, 460, 1057, 1072], "18d": 960, "19": [178, 254, 281, 349, 448, 472, 647, 652, 654, 656, 658, 725, 838, 883, 903, 954, 1057, 1085, 1098, 1307], "1920": 1372, "196": 1373, "1964": [897, 954], "1969": [1372, 1373], "1970": [70, 71, 168, 1358], "1972": 1358, "1976": [458, 489], "1977": [458, 489], "1978": [451, 452, 456, 458, 459, 461, 462, 466, 473, 475, 489, 1373], "1979": [458, 489], "1980": 477, "1985": [777, 780], "1990": [148, 1358], "1993": 1358, "1994": 1358, "1995": 148, "1998": [467, 1080], "1999": [296, 349, 467, 477, 960, 1080, 1090, 1375], "199992": [888, 954], "199994": [888, 954], "199996": [888, 954], "199998": [888, 954], "1_000_000": [225, 349, 1108, 1349], "1_234_500": 960, "1d": [239, 254, 281, 319, 349, 447, 467, 472, 477, 479, 482, 485, 488, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 782, 798, 825, 826, 838, 878, 883, 903, 954, 960, 1056, 1064, 1070, 1080, 1085, 1089, 1092, 1095, 1098, 1110, 1349], "1e": [12, 171, 172, 173, 174], "1e6": 12, "1h": [239, 254, 281, 319, 349, 454, 467, 472, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1063, 1065, 1080, 1085, 1098, 1110, 1349], "1i": [239, 281, 319, 349, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 838, 878, 903, 954, 1110, 1349], "1m": [239, 254, 281, 319, 349, 467, 472, 484, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1093, 1094, 1096, 1097, 1098, 1110, 1349], "1mo": [239, 254, 281, 319, 349, 450, 464, 465, 467, 471, 472, 478, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1059, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1091, 1098, 1099, 1110, 1349], "1n": [239, 254, 281, 319, 349, 467, 472, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1098, 1110, 1349], "1q": [239, 254, 281, 319, 349, 467, 472, 485, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1098], "1st_col": 960, "1u": [239, 254, 281, 319, 349, 467, 472, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1098, 1110, 1349], "1w": [239, 254, 281, 319, 349, 467, 472, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1098, 1110, 1349], "1w2d": [777, 778], "1y": [239, 254, 281, 319, 349, 467, 472, 485, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1098], "1y2mo": [467, 1080], "1zy3": [686, 1268], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 64, 65, 83, 87, 101, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 151, 157, 158, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 192, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 362, 364, 365, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 405, 406, 408, 413, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 460, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 678, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 812, 816, 817, 818, 819, 820, 821, 823, 826, 827, 828, 834, 838, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 959, 960, 964, 965, 966, 969, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1011, 1022, 1028, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1058, 1060, 1061, 1063, 1065, 1068, 1069, 1070, 1072, 1074, 1075, 1076, 1077, 1078, 1082, 1083, 1084, 1085, 1088, 1098, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1268, 1274, 1276, 1278, 1279, 1280, 1282, 1283, 1285, 1286, 1289, 1290, 1295, 1296, 1298, 1299, 1300, 1303, 1304, 1306, 1307, 1308, 1309, 1312, 1314, 1316, 1317, 1319, 1320, 1321, 1322, 1324, 1325, 1326, 1327, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1349, 1354, 1358, 1359, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1377, 1378, 1379, 1380], "20": [39, 40, 41, 65, 148, 153, 170, 175, 176, 177, 178, 182, 185, 208, 217, 221, 227, 243, 244, 265, 272, 274, 279, 296, 306, 307, 311, 325, 330, 349, 372, 373, 374, 427, 441, 448, 451, 452, 456, 459, 460, 461, 462, 466, 472, 473, 475, 477, 485, 488, 508, 515, 521, 585, 593, 604, 631, 650, 652, 654, 656, 658, 661, 663, 665, 691, 736, 751, 779, 788, 798, 817, 825, 838, 853, 864, 867, 870, 893, 896, 913, 927, 932, 954, 960, 1050, 1057, 1061, 1072, 1085, 1090, 1098, 1101, 1113, 1129, 1229, 1273, 1328, 1330, 1333, 1349, 1365, 1366, 1369, 1375], "200": [480, 481, 483, 641, 642, 838, 960, 1106, 1214, 1229, 1230, 1236, 1237, 1239, 1349, 1369], "2000": [448, 457, 460, 464, 465, 467, 960, 1057, 1066, 1072, 1077, 1078, 1080, 1086, 1358, 1372], "200000": [480, 888, 954], "200000000": 483, "2001": [17, 447, 448, 453, 455, 457, 460, 463, 467, 468, 469, 472, 476, 485, 486, 487, 488, 650, 652, 654, 656, 658, 661, 663, 665, 721, 838, 960, 1056, 1057, 1062, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1081, 1082, 1085, 1089, 1098, 1099, 1100, 1101, 1102, 1303], "2002": [148, 457, 467, 1066, 1080, 1102], "2003": [467, 788, 1080], "2004": [467, 1080], "2005": [467, 1080], "2006": [467, 1080], "2008": 1358, "200m": [480, 481, 483], "2010": [296, 349, 477, 960], "2011": [446, 1055], "2012": [446, 1055, 1375], "2013": 1083, "2016": [254, 349, 883, 954], "2017": [254, 349, 883, 954], "2018": [254, 349, 471, 883, 954, 1084], "2019": [254, 349, 883, 954], "202": 1373, "2020": [152, 163, 210, 217, 237, 254, 281, 349, 352, 445, 450, 454, 471, 474, 477, 478, 479, 480, 481, 482, 483, 484, 494, 647, 721, 723, 724, 763, 838, 856, 864, 883, 903, 954, 960, 1054, 1059, 1063, 1084, 1087, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1110, 1303, 1305, 1306, 1349, 1373], "2021": [210, 217, 237, 239, 319, 349, 721, 798, 856, 864, 878, 954, 960, 1060, 1061, 1067, 1088, 1303, 1372], "2022": [56, 210, 217, 237, 349, 449, 472, 485, 721, 777, 778, 780, 781, 782, 788, 856, 864, 954, 960, 1058, 1067, 1085, 1098, 1303], "2023": [17, 41, 137, 170, 252, 349, 449, 782, 798, 960, 1058], "2024": [170, 445, 451, 452, 456, 459, 461, 462, 466, 470, 473, 475, 627, 763, 776, 777, 779, 780, 782, 838, 960, 1054, 1083, 1372, 1375], "2025": [445, 470, 763, 796, 960, 1054], "2026": 1373, "2030": 1372, "2031": 960, "2040": 477, "2047317070637311557": [240, 349], "2055938745": 137, "2065": [451, 452, 456, 459, 461, 462, 466, 473, 475], "2068": 178, "207": 1373, "2077": [296, 349, 477, 960, 1090, 1372, 1373], "2095": 178, "20_000": [41, 349], "20t08": 477, "20t18": 1090, "20word": 151, "21": [170, 217, 265, 298, 349, 448, 650, 652, 654, 656, 658, 661, 663, 665, 779, 788, 796, 838, 864, 893, 954, 960, 1057, 1366], "213": 1380, "2147483647": 1380, "2147483648": [1200, 1349], "21d": 960, "22": [47, 51, 170, 178, 349, 453, 468, 472, 485, 487, 488, 648, 650, 652, 654, 656, 658, 661, 663, 665, 721, 779, 834, 838, 954, 960, 1085, 1098, 1101, 1235, 1303, 1349, 1372, 1373, 1380], "221": 1380, "2246e": [1258, 1322, 1349], "225": [472, 485, 1374], "22500": 816, "22_000_000": 1358, "22_500": 816, "23": [11, 131, 178, 217, 239, 281, 311, 349, 449, 453, 456, 468, 470, 472, 477, 487, 647, 650, 652, 654, 656, 658, 661, 663, 665, 779, 782, 824, 825, 826, 838, 864, 878, 903, 913, 954, 960, 1058, 1065, 1083, 1333, 1349, 1379, 1380], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1358, "2337": [41, 349], "234": 28, "2345": 960, "23456789": 11, "235": 1380, "23h": 960, "24": [58, 170, 239, 254, 258, 281, 296, 319, 349, 435, 437, 453, 467, 468, 472, 479, 485, 487, 608, 647, 650, 652, 654, 656, 658, 661, 663, 665, 704, 777, 778, 780, 781, 782, 825, 826, 838, 878, 883, 903, 954, 1047, 1080, 1085, 1092, 1098, 1151, 1349, 1372, 1379], "24030": 177, "249": [752, 838], "25": [1, 28, 41, 60, 137, 217, 221, 239, 254, 281, 306, 311, 319, 323, 349, 406, 441, 453, 454, 468, 472, 477, 485, 487, 494, 632, 634, 637, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 745, 779, 780, 781, 782, 788, 796, 797, 800, 825, 826, 838, 864, 867, 878, 883, 890, 903, 922, 924, 954, 960, 1011, 1049, 1050, 1063, 1085, 1090, 1098, 1104, 1110, 1132, 1218, 1223, 1289, 1349, 1366, 1371, 1377, 1378], "250": [752, 838, 1237, 1349, 1369, 1380], "2500": [252, 311, 349], "254508": [494, 838, 1110, 1349], "255": 1380, "256": [258, 349, 406, 1011, 1218, 1349, 1371], "2560": 1011, "259921": [425, 838, 1032, 1349, 1371], "25_000_000": 1358, "26": [39, 41, 170, 175, 176, 177, 178, 182, 217, 349, 454, 486, 864, 954, 1063], "266667": [217, 349, 864, 954], "27": [1, 60, 306, 342, 349, 436, 463, 469, 486, 736, 838, 944, 960, 1221, 1328, 1349, 1379, 1380], "270": 1374, "28": [302, 307, 349, 358, 471, 488, 838, 1084, 1101, 1330, 1349, 1372, 1374, 1379, 1380], "283185": [636, 838], "2846": 349, "285714": [522, 838, 1136, 1349], "289962": 1374, "28_341_469": 1358, "29": [17, 170, 446, 464, 1055, 1077], "29096": 1380, "290994": [914, 954], "292432": [972, 1349], "292893": [494, 838, 1110, 1349], "2_color_scal": [41, 349], "2d": [281, 306, 307, 349, 467, 647, 798, 838, 903, 954, 1055, 1062], "2h": [650, 652, 654, 656, 658, 661, 663, 665, 838], "2i": [239, 349, 878, 954], "2m": [960, 1075], "2x": 177, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 56, 57, 58, 59, 60, 64, 65, 83, 95, 101, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 151, 153, 157, 158, 159, 162, 168, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 358, 359, 360, 361, 363, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 606, 607, 608, 609, 610, 611, 613, 615, 617, 618, 621, 624, 625, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 679, 680, 681, 684, 685, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 722, 723, 728, 729, 732, 733, 734, 735, 736, 737, 739, 743, 744, 747, 748, 749, 751, 752, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 838, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 930, 931, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 959, 960, 965, 966, 969, 971, 973, 974, 975, 977, 978, 979, 980, 981, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1058, 1059, 1062, 1064, 1065, 1066, 1068, 1069, 1070, 1072, 1074, 1075, 1076, 1081, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1093, 1094, 1096, 1098, 1100, 1101, 1103, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1155, 1156, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1267, 1269, 1270, 1271, 1274, 1275, 1276, 1279, 1280, 1281, 1282, 1284, 1285, 1289, 1290, 1291, 1292, 1293, 1297, 1304, 1305, 1310, 1311, 1314, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1329, 1330, 1331, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1349, 1354, 1358, 1359, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1377, 1378, 1379, 1380], "30": [41, 217, 227, 239, 243, 272, 279, 302, 323, 349, 352, 372, 373, 374, 441, 449, 451, 452, 456, 459, 461, 462, 463, 464, 466, 469, 471, 472, 473, 475, 477, 478, 485, 486, 515, 593, 672, 779, 796, 798, 824, 825, 838, 864, 870, 878, 896, 924, 954, 960, 1050, 1058, 1077, 1084, 1085, 1090, 1091, 1098, 1129, 1349, 1354, 1365, 1366, 1369, 1371, 1372, 1374, 1375, 1378, 1380], "300": [302, 349, 514, 625, 642, 838, 960, 1230, 1236, 1237, 1239, 1349, 1369], "3000": 960, "3002": [448, 460, 1057, 1072], "30103": [581, 838, 1371], "3022416320763508302": [1130, 1349], "30_000": [41, 349], "30m": [239, 349, 472, 485, 878, 954, 1085, 1098], "30t16": 477, "31": [60, 65, 217, 296, 349, 448, 449, 453, 460, 464, 467, 470, 478, 691, 721, 776, 779, 788, 798, 817, 864, 954, 960, 1055, 1057, 1058, 1062, 1072, 1077, 1083, 1090, 1091, 1229, 1273, 1303, 1349, 1373, 1375, 1380], "31t06": 1090, "32": [58, 70, 76, 80, 90, 249, 254, 281, 349, 608, 647, 672, 838, 883, 903, 954, 1051, 1081, 1218, 1240, 1349, 1366, 1372], "321": [28, 1380], "3212": [725, 1307], "321cba": 1372, "3265500": 960, "32971": [488, 1101], "32974": [488, 1101], "32976": [488, 1101], "32bit": [306, 349], "33": [217, 265, 349, 666, 838, 864, 893, 954, 1240, 1349, 1373], "333": [17, 667, 838, 1106, 1214, 1246, 1349], "33333": 1375, "333333": [245, 349, 610, 796, 881, 954, 1218, 1244, 1349, 1366], "34": [217, 349, 707, 721, 864, 954, 1290, 1303], "3420": [725, 1307], "343622": [677, 838], "345": [422, 423, 702, 703, 1027, 1028, 1284, 1285], "3450": [1246, 1349], "3456": 960, "34776706224699483": [1260, 1349], "35": [41, 349, 441, 477, 779, 838, 1050, 1349], "350": [349, 352, 514, 625, 838, 1237, 1349, 1354], "3500": [1246, 1349], "356": [453, 468, 487], "356194": [759, 760, 1374], "357": [453, 468, 487], "358": [453, 468, 487], "359": [453, 468, 487], "36": [217, 349, 864, 954, 1377], "360": [439, 636, 838, 1374], "361": 1380, "363961": [573, 1190], "366": [468, 1081], "37": [13, 960], "370h": [494, 838, 1110, 1349], "37338": 1380, "38": [41, 137, 175, 178, 349], "38180177416060584": [659, 838, 1241, 1349], "381802": [659, 838, 1241, 1349], "386294": [582, 838, 1199, 1349, 1371], "389056": [498, 838, 1113, 1349, 1371], "39": [663, 788, 838], "39m": 960, "3_color_scal": [41, 349], "3d12h4m25": [239, 254, 281, 319, 349, 472, 485, 494, 647, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1085, 1098, 1110, 1349], "3f": [151, 721, 724, 1303, 1306], "3i": [239, 281, 349, 878, 954], "3rd": [1280, 1304], "3xy": [686, 1268], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 56, 57, 58, 59, 60, 64, 65, 83, 104, 130, 131, 132, 133, 134, 135, 136, 137, 144, 162, 170, 182, 206, 207, 208, 209, 210, 211, 212, 216, 218, 222, 226, 227, 228, 229, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 265, 267, 268, 269, 271, 272, 273, 274, 277, 281, 283, 284, 291, 292, 295, 299, 300, 301, 302, 303, 304, 307, 310, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 362, 364, 376, 383, 384, 385, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 400, 406, 417, 418, 419, 422, 423, 425, 426, 427, 431, 432, 435, 436, 437, 439, 442, 449, 452, 453, 460, 468, 469, 470, 471, 472, 473, 474, 477, 479, 482, 484, 485, 487, 491, 492, 494, 498, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 516, 518, 520, 521, 522, 523, 532, 533, 537, 538, 539, 546, 547, 548, 549, 550, 552, 553, 555, 563, 565, 566, 567, 568, 569, 570, 571, 575, 576, 581, 584, 585, 586, 606, 608, 610, 611, 613, 615, 617, 618, 621, 622, 623, 626, 627, 629, 630, 631, 632, 635, 637, 641, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 671, 674, 678, 679, 680, 681, 684, 686, 690, 693, 696, 698, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 719, 720, 721, 722, 726, 731, 732, 734, 735, 736, 737, 739, 742, 743, 744, 745, 751, 752, 754, 756, 757, 759, 760, 761, 762, 764, 765, 766, 767, 768, 770, 772, 773, 774, 775, 776, 779, 780, 781, 783, 785, 786, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 834, 838, 853, 854, 856, 857, 858, 859, 860, 863, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 896, 897, 898, 900, 903, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 927, 928, 930, 931, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 959, 960, 964, 969, 972, 979, 986, 988, 989, 990, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1011, 1022, 1027, 1028, 1033, 1034, 1036, 1042, 1047, 1049, 1051, 1061, 1065, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1082, 1084, 1085, 1087, 1092, 1095, 1097, 1098, 1099, 1100, 1107, 1110, 1114, 1115, 1117, 1118, 1123, 1124, 1126, 1131, 1132, 1135, 1136, 1137, 1138, 1142, 1145, 1146, 1147, 1148, 1150, 1156, 1163, 1164, 1165, 1166, 1167, 1172, 1176, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1192, 1193, 1208, 1211, 1212, 1215, 1218, 1219, 1220, 1221, 1225, 1226, 1229, 1230, 1231, 1234, 1238, 1240, 1241, 1242, 1243, 1244, 1247, 1249, 1253, 1254, 1257, 1260, 1261, 1262, 1266, 1268, 1272, 1275, 1278, 1280, 1284, 1285, 1287, 1288, 1293, 1295, 1296, 1301, 1302, 1303, 1304, 1308, 1313, 1314, 1317, 1319, 1321, 1327, 1330, 1332, 1334, 1340, 1349, 1354, 1358, 1359, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1377, 1378, 1379, 1380], "40": [41, 217, 227, 254, 272, 349, 472, 477, 485, 515, 579, 725, 736, 838, 864, 883, 896, 954, 960, 1067, 1098, 1196, 1307, 1365, 1366, 1369, 1372], "400": [318, 349, 480, 481, 483, 921, 954, 1236, 1237, 1239, 1349, 1369], "4000000": [1108, 1349], "400157": 95, "404": [255, 349, 692, 694, 884, 954, 1274, 1276], "4096": 1371, "41": [217, 349, 663, 838, 864, 954, 1366, 1380], "412277": 178, "414214": [681, 838, 1263, 1349, 1371], "4160": 60, "416147": 1374, "4164": [254, 349, 883, 954], "42": [60, 217, 240, 265, 281, 349, 477, 647, 838, 864, 893, 903, 954, 1130, 1349, 1365, 1379], "424778": [636, 838], "428571": [493, 838, 1109, 1349], "429101": 1366, "4294967296": [47, 349], "43": [217, 281, 349, 436, 647, 663, 838, 864, 903, 954], "4321": 960, "433013": [660, 838, 914, 954], "44": [11, 265, 349, 442, 838, 893, 954], "4411": [254, 349, 883, 954], "44225": [1032, 1349], "444": 11, "44444444444": 11, "45": [41, 217, 281, 349, 449, 472, 485, 647, 663, 686, 693, 733, 760, 779, 798, 824, 825, 838, 864, 903, 954, 960, 1058, 1085, 1090, 1098, 1268, 1275, 1316, 1371, 1372, 1374, 1378, 1380], "450": [1237, 1349], "45000": 816, "4500000": 960, "456": [9, 11, 449, 960, 1058, 1326, 1349], "456000": [449, 1058], "456001\u00b5": 960, "4566": [254, 349, 883, 954], "456789": [477, 960, 1086], "456789\u00b5": 960, "456m": 960, "457658": 1374, "459148": [490, 838], "46": 960, "4696": [254, 349, 883, 954], "47": [56, 217, 349, 663, 838, 864, 954, 960, 1366], "470": [897, 954], "47033": [659, 838, 1241, 1349], "47033046033698594": [659, 838, 1241, 1349], "475": [897, 954], "48": [13, 178, 281, 349, 647, 736, 838, 903, 954, 960], "4827": [254, 349, 883, 954], "485": 1380, "49": [217, 349, 864, 954, 960], "492474": [494, 838, 1110, 1349], "498": [255, 349, 884, 954], "4_500_000": 960, "4ab4a": 1372, "4d": [494, 838, 1110, 1349], "4f6228": [41, 349], "4f71": [41, 349], "4x": [251, 349], "5": [1, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 38, 40, 43, 44, 47, 52, 56, 57, 59, 60, 64, 104, 130, 133, 134, 135, 136, 137, 139, 149, 170, 171, 173, 176, 178, 182, 207, 210, 211, 212, 217, 218, 221, 226, 227, 228, 229, 230, 232, 233, 234, 236, 237, 238, 239, 241, 242, 244, 245, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 267, 268, 269, 271, 273, 274, 275, 277, 281, 284, 291, 292, 295, 296, 299, 300, 301, 302, 303, 304, 306, 307, 310, 311, 313, 316, 317, 318, 319, 322, 323, 325, 326, 328, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 358, 359, 362, 377, 378, 383, 384, 385, 387, 389, 393, 398, 400, 405, 406, 417, 418, 419, 422, 423, 426, 427, 437, 438, 439, 441, 442, 445, 448, 449, 450, 451, 452, 456, 459, 460, 461, 462, 466, 471, 473, 474, 475, 477, 478, 484, 488, 492, 494, 496, 497, 500, 502, 506, 507, 510, 511, 513, 516, 518, 521, 523, 526, 529, 530, 531, 532, 533, 537, 539, 546, 549, 550, 552, 553, 555, 558, 560, 561, 565, 566, 567, 568, 569, 570, 574, 575, 579, 585, 606, 608, 610, 622, 626, 627, 628, 629, 630, 631, 632, 634, 635, 637, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 660, 662, 663, 664, 665, 666, 669, 680, 686, 696, 697, 698, 701, 702, 703, 722, 726, 737, 739, 743, 744, 745, 757, 759, 760, 762, 763, 764, 765, 766, 768, 770, 772, 773, 774, 775, 776, 777, 779, 782, 783, 784, 785, 786, 790, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 816, 817, 819, 821, 822, 823, 827, 834, 838, 856, 857, 858, 859, 860, 864, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 890, 891, 897, 900, 903, 909, 910, 911, 912, 913, 914, 915, 916, 920, 921, 923, 924, 927, 928, 930, 932, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 954, 960, 969, 972, 976, 979, 982, 983, 986, 988, 989, 990, 992, 994, 998, 1003, 1004, 1005, 1010, 1011, 1022, 1027, 1034, 1036, 1043, 1047, 1048, 1049, 1050, 1051, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1072, 1084, 1086, 1087, 1088, 1090, 1091, 1097, 1099, 1100, 1101, 1107, 1110, 1112, 1114, 1115, 1116, 1126, 1131, 1132, 1135, 1137, 1141, 1144, 1156, 1163, 1166, 1167, 1172, 1175, 1178, 1182, 1183, 1184, 1185, 1186, 1187, 1191, 1192, 1196, 1200, 1208, 1215, 1218, 1219, 1220, 1223, 1224, 1225, 1226, 1230, 1231, 1234, 1235, 1236, 1237, 1239, 1240, 1243, 1247, 1249, 1254, 1260, 1263, 1268, 1278, 1279, 1280, 1283, 1284, 1304, 1308, 1321, 1328, 1330, 1333, 1334, 1337, 1340, 1349, 1354, 1359, 1362, 1364, 1366, 1367, 1368, 1371, 1372, 1373, 1374, 1377, 1379, 1380], "50": [13, 28, 41, 217, 227, 237, 349, 427, 472, 477, 485, 777, 778, 838, 864, 954, 960, 1036, 1049, 1098, 1289, 1349, 1365, 1366], "500": [41, 318, 349, 352, 451, 452, 456, 459, 461, 462, 466, 473, 475, 921, 954, 1071, 1073, 1079, 1236, 1237, 1239, 1349, 1354], "5000": [311, 349, 1333, 1349], "50000": 149, "500000": [459, 1071], "500000000": [466, 1079], "5000555": 960, "500_000": [451, 452, 456, 459, 461, 462, 466, 473, 475], "500m": [1071, 1073, 1079], "51": 960, "512": [47, 150, 251, 349, 406, 632, 838, 1011, 1218, 1349], "51966": [726, 1308], "52": [323, 349, 486, 666, 838, 924, 954], "523599": 1374, "527525": [1242, 1349], "53": [486, 1099, 1377], "533316061": 1358, "533_316_061": 1358, "54": [498, 838, 1152, 1349, 1371, 1380], "540": [439, 636, 838], "540302": 1374, "543": 9, "543081": [429, 838, 1039, 1349], "5432": 150, "54321": 9, "544": 1380, "544705": 768, "549306": [976, 1349], "55": [41, 58, 349, 519, 838, 1134, 1349, 1368, 1372, 1373], "5555": 960, "55550": 960, "56": [137, 707, 740, 838, 1290], "566371": [636, 838], "567": 28, "56789": [1033, 1122, 1245, 1349], "57": [663, 838, 1245, 1349, 1374, 1380], "570796": [366, 368, 838, 971, 973, 1349, 1374], "575050513": [175, 178], "58": [144, 273, 349], "581139": [1049, 1349], "584963": [580, 838], "587401": [425, 838, 1371], "59": [137, 217, 349, 449, 462, 470, 473, 477, 507, 779, 824, 825, 826, 838, 864, 954, 960, 1058, 1075, 1083, 1086], "59815": [498, 838, 1371], "5_000_555": 960, "5th": [41, 349], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 55, 57, 59, 64, 96, 97, 104, 130, 133, 134, 135, 136, 157, 158, 170, 207, 210, 213, 214, 218, 219, 220, 222, 223, 224, 226, 227, 230, 233, 234, 235, 236, 237, 239, 241, 243, 244, 245, 247, 249, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 266, 267, 270, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 292, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 313, 315, 316, 317, 319, 320, 321, 322, 323, 325, 326, 332, 342, 343, 349, 352, 353, 358, 362, 383, 384, 385, 387, 393, 418, 419, 422, 423, 435, 436, 442, 445, 449, 453, 463, 467, 468, 469, 480, 481, 483, 486, 487, 490, 492, 501, 502, 507, 510, 516, 518, 521, 539, 540, 541, 550, 553, 566, 567, 568, 569, 573, 585, 586, 622, 626, 633, 636, 637, 638, 643, 645, 647, 649, 651, 653, 655, 657, 660, 662, 663, 664, 669, 674, 680, 686, 691, 702, 703, 726, 737, 739, 744, 752, 754, 756, 763, 765, 770, 772, 773, 774, 776, 779, 783, 786, 792, 799, 800, 804, 817, 821, 834, 838, 856, 859, 860, 861, 862, 865, 866, 868, 869, 870, 871, 874, 875, 876, 878, 879, 881, 882, 883, 885, 887, 888, 895, 897, 899, 900, 901, 903, 904, 905, 907, 909, 910, 911, 912, 913, 916, 919, 920, 923, 924, 927, 928, 934, 944, 945, 954, 960, 986, 988, 989, 990, 992, 998, 1027, 1034, 1038, 1040, 1045, 1046, 1051, 1054, 1080, 1090, 1100, 1107, 1114, 1126, 1132, 1157, 1158, 1167, 1170, 1183, 1184, 1185, 1186, 1190, 1208, 1222, 1225, 1226, 1231, 1233, 1238, 1240, 1242, 1244, 1249, 1254, 1257, 1268, 1273, 1284, 1308, 1320, 1330, 1349, 1354, 1359, 1362, 1364, 1366, 1367, 1371, 1377, 1378, 1380], "60": [41, 227, 273, 349, 456, 461, 462, 473, 484, 507, 663, 721, 838, 1081, 1086, 1097, 1227, 1303, 1349, 1374], "600": [318, 349, 480, 481, 483, 921, 954, 960], "60000": 459, "600000": 960, "60000000": 466, "60206": [581, 838, 1371], "605551": 819, "605551275463989": 819, "609438": 1371, "60_000": [451, 452, 456, 459, 461, 462, 466, 473, 475], "61": [273, 349], "625": [657, 838], "626172": [688, 1270], "63": [663, 838], "63204": 1380, "6331e16": [1322, 1349, 1374], "636253": 1374, "64": [1, 58, 60, 71, 73, 77, 81, 88, 91, 169, 206, 311, 349, 430, 608, 632, 838, 1218, 1221, 1349, 1371], "64030": [726, 1308], "642093": 1374, "647961": 178, "64bit": [170, 639, 838, 1227, 1349], "65": [221, 349, 867, 954, 1104, 1349], "650": [514, 625, 838], "65280": [726, 1308], "654": [28, 817, 913, 954], "65432": 1375, "654321": 594, "65536": 1371, "65552": [405, 1010], "66": [254, 318, 349, 663, 752, 838, 883, 921, 954, 1152, 1240, 1349], "663053": 137, "666": 960, "666000": 960, "666667": [217, 245, 320, 337, 349, 493, 796, 797, 803, 838, 864, 881, 922, 939, 954, 1109, 1349], "666f6f": [688, 1270], "67500": 816, "676": [255, 349, 884, 954], "678": [686, 693, 1268, 1275], "6789": [29, 960], "67890": 29, "686241": 1366, "69": [663, 838, 1152, 1349], "693147": [582, 838, 1197, 1199, 1349, 1371], "6_000_000": 1358, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 57, 59, 64, 157, 158, 170, 185, 207, 210, 213, 214, 215, 217, 219, 220, 223, 224, 226, 230, 233, 235, 239, 241, 243, 245, 253, 257, 259, 261, 263, 265, 266, 270, 273, 275, 278, 279, 281, 282, 284, 285, 286, 287, 289, 292, 294, 297, 298, 299, 300, 305, 307, 308, 309, 317, 319, 320, 321, 349, 352, 353, 358, 362, 384, 385, 387, 396, 436, 448, 449, 453, 460, 468, 471, 472, 477, 485, 487, 498, 510, 516, 521, 522, 539, 553, 566, 567, 568, 569, 626, 627, 637, 643, 647, 662, 663, 680, 696, 725, 739, 763, 772, 773, 776, 779, 780, 786, 791, 799, 800, 817, 821, 838, 856, 861, 862, 864, 866, 869, 871, 874, 876, 878, 879, 881, 882, 887, 893, 895, 898, 901, 903, 904, 905, 909, 913, 916, 954, 960, 976, 989, 990, 992, 1001, 1057, 1058, 1062, 1067, 1072, 1084, 1085, 1090, 1098, 1100, 1113, 1136, 1151, 1170, 1183, 1184, 1185, 1186, 1230, 1231, 1243, 1249, 1278, 1307, 1349, 1354, 1359, 1364, 1366, 1367, 1368, 1371, 1373, 1377, 1380], "70": [217, 349, 752, 780, 838, 864, 954, 1152, 1349, 1366], "700": [318, 349, 921, 954], "702963": [41, 349], "7051579356916758811": 164, "707107": [395, 495, 660, 661, 759, 838, 1000, 1111, 1349, 1374], "712389": 1374, "714": 1380, "714286": [522, 838, 1136, 1349], "718281828459045": [11, 490, 580, 838, 1104, 1197, 1349], "718282": [498, 838, 1113, 1349, 1371], "720": [439, 636, 838], "7264": 1380, "732051": [1263, 1349], "7415e16": 178, "742": [255, 349, 884, 954], "75": [41, 217, 221, 349, 362, 626, 634, 637, 649, 651, 653, 655, 660, 662, 664, 796, 800, 838, 864, 867, 954, 960, 1049, 1132, 1152, 1223, 1289, 1349, 1366, 1374, 1380], "7500": [252, 349], "7508": 1380, "754": [745, 838], "754888": [490, 838], "761594": [741, 838, 1323, 1349], "764052": 95, "7654": 960, "765431": 1086, "7654321": 28, "76933c": [41, 349], "77": 1090, "78": [9, 144, 707, 1290], "780": 9, "784": [254, 349, 883, 954], "785398": [370, 759, 760, 838, 975, 1349, 1374], "789": [11, 960], "79": [1152, 1349], "7d": 960, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 48, 56, 57, 59, 60, 64, 82, 86, 92, 157, 158, 170, 207, 210, 213, 214, 215, 217, 219, 220, 222, 223, 224, 226, 230, 233, 235, 237, 241, 243, 250, 253, 254, 255, 257, 258, 259, 261, 263, 266, 275, 278, 279, 281, 282, 284, 285, 286, 287, 289, 292, 294, 296, 297, 298, 300, 305, 307, 308, 309, 317, 320, 321, 323, 349, 362, 364, 376, 384, 385, 387, 433, 436, 437, 449, 477, 510, 517, 521, 522, 547, 549, 553, 566, 567, 568, 569, 608, 626, 627, 632, 637, 643, 644, 648, 672, 678, 680, 704, 705, 706, 721, 752, 757, 763, 768, 770, 773, 775, 783, 785, 790, 791, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 819, 822, 823, 827, 838, 856, 861, 862, 864, 866, 868, 869, 871, 874, 876, 879, 882, 883, 884, 887, 888, 897, 901, 904, 905, 909, 913, 916, 924, 954, 960, 989, 990, 992, 1040, 1047, 1067, 1132, 1136, 1151, 1164, 1166, 1170, 1183, 1184, 1185, 1186, 1218, 1221, 1231, 1234, 1235, 1238, 1240, 1242, 1244, 1287, 1288, 1303, 1349, 1358, 1359, 1364, 1366, 1367, 1368, 1371, 1372, 1373, 1377, 1380], "80": [41, 221, 349, 867, 954], "800": [480, 481, 483, 1090], "8000": 150, "803065983": 137, "81": 1371, "814697265625": [1108, 1349], "816497": [297, 349], "8192": 148, "82": [254, 349, 883, 954], "8257e14": 1380, "83": [254, 349, 883, 954], "833": [254, 349, 883, 954], "833333": [337, 939], "848062": 1374, "848808": 178, "85": [41, 144, 349, 1152, 1349, 1380], "850": [514, 625, 838], "8568409950394724": [1104, 1349], "8589934592": [672, 838], "86": 1380, "8601": 1372, "87": 1380, "876": 9, "88": [217, 349, 864, 954], "881374": [369, 838, 974, 1349], "888": [817, 913, 954], "8_000_000": 1358, "8a": [1007, 1008], "8nin": 1380, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 52, 56, 64, 207, 215, 217, 230, 232, 241, 245, 253, 255, 257, 258, 273, 281, 283, 284, 287, 299, 300, 317, 321, 323, 342, 349, 358, 362, 364, 376, 384, 385, 387, 392, 394, 433, 436, 439, 449, 477, 503, 510, 521, 527, 547, 553, 564, 572, 610, 626, 627, 636, 643, 647, 648, 659, 662, 663, 674, 678, 693, 725, 733, 736, 766, 772, 773, 776, 779, 791, 826, 838, 864, 874, 879, 881, 882, 884, 887, 903, 905, 916, 924, 944, 954, 960, 984, 985, 989, 990, 992, 997, 999, 1049, 1062, 1071, 1073, 1079, 1085, 1098, 1099, 1142, 1151, 1164, 1170, 1181, 1189, 1231, 1235, 1241, 1243, 1245, 1257, 1275, 1307, 1316, 1349, 1358, 1359, 1364, 1367, 1368, 1377], "90": [217, 255, 349, 725, 864, 884, 954, 1307, 1366, 1374], "90000": 816, "901234": [1033, 1122, 1245, 1349], "909": [254, 349, 883, 954], "910": [254, 349, 693, 883, 954, 1275], "910t": [686, 693, 1268, 1275], "914": [254, 349, 883, 954], "9223372036854775807": [748, 838], "9223372036854775808": [583, 838], "927295": 1374, "928571": [496, 838, 1112, 1349], "93": [1152, 1349], "94": [359, 838], "9477376373212048": [1152, 1349], "95": [18, 359, 838, 960], "95b3d7": [41, 349], "96": [18, 217, 349, 359, 838, 864, 954, 1152, 1349], "961": 60, "963624": [495, 838, 1111, 1349], "964028": [273, 349], "96_067_179": 1358, "97": [18, 244, 349, 359, 838, 1152, 1349], "9774092659964970114": [515, 838], "978307200": [455, 1064], "978307200000": 476, "978307200000000": [455, 476, 1064, 1089], "978307200000000000": 1089, "978393600": [455, 1064], "978393600000": 476, "978393600000000": [455, 476, 1064, 1089], "978393600000000000": 1089, "978480000": [455, 1064], "978480000000": 476, "978480000000000": [455, 476, 1064, 1089], "978480000000000000": 1089, "978738": 95, "98": [18, 244, 273, 349, 417, 509, 512, 679, 725, 743, 838, 1307], "987": [28, 594], "987000": 960, "9876": 9, "987654": [28, 960], "987654321": 11, "9876543210": 137, "987m": 960, "988": 11, "99": [18, 41, 228, 229, 244, 247, 273, 318, 349, 359, 417, 500, 502, 509, 512, 679, 743, 828, 838, 872, 873, 921, 954, 1090, 1104, 1116, 1349, 1371], "9914e218": 178, "998347": [273, 349], "999": [448, 460, 960, 1057, 1072, 1369, 1380], "999000": 960, "999954": [273, 349], "999999": [470, 731, 779, 824, 825, 826, 960, 1083, 1090, 1313], "999999\u00b5": 960, "9bbb59": [41, 349], "A": [14, 38, 41, 47, 48, 52, 53, 54, 62, 63, 68, 74, 129, 137, 141, 143, 148, 149, 150, 151, 162, 164, 169, 184, 214, 223, 232, 239, 254, 260, 262, 267, 273, 299, 302, 317, 318, 319, 323, 324, 349, 357, 423, 443, 444, 449, 474, 477, 491, 492, 500, 511, 513, 525, 528, 530, 531, 537, 577, 584, 585, 598, 612, 621, 622, 644, 649, 651, 653, 655, 657, 660, 662, 664, 684, 685, 686, 692, 693, 694, 695, 696, 697, 698, 701, 703, 707, 708, 709, 711, 722, 731, 766, 782, 783, 787, 838, 862, 869, 878, 883, 901, 921, 924, 925, 954, 960, 1028, 1052, 1053, 1058, 1087, 1090, 1106, 1116, 1214, 1236, 1237, 1239, 1242, 1243, 1244, 1266, 1267, 1268, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1283, 1285, 1289, 1290, 1291, 1293, 1304, 1313, 1349, 1358, 1359, 1362, 1375, 1377], "AND": [753, 754, 817, 960, 1368], "ANDs": [408, 838, 1013, 1349], "AS": [296, 349, 817, 818, 913, 954, 1358, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1377, 1379], "And": [729, 1311], "As": [13, 55, 96, 97, 130, 132, 133, 134, 136, 153, 157, 158, 166, 230, 277, 306, 311, 349, 577, 828, 874, 900, 954], "At": [47, 48, 49, 50, 51, 62, 63, 273, 349, 859, 860, 870, 897, 910, 954], "BY": [817, 913, 954, 1358, 1361, 1367, 1376, 1377], "Be": 954, "By": [5, 13, 15, 31, 34, 56, 148, 149, 162, 239, 253, 254, 281, 283, 292, 297, 319, 320, 349, 393, 467, 472, 485, 570, 573, 579, 627, 642, 647, 650, 652, 654, 656, 658, 661, 663, 665, 671, 682, 750, 770, 777, 778, 780, 781, 782, 798, 819, 825, 826, 827, 838, 859, 878, 882, 883, 903, 909, 914, 922, 954, 998, 1080, 1085, 1098, 1187, 1230, 1253, 1264, 1339, 1349], "For": [15, 40, 41, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 221, 222, 225, 227, 253, 254, 273, 281, 306, 335, 349, 352, 464, 465, 477, 493, 495, 496, 507, 577, 586, 598, 639, 677, 684, 692, 693, 694, 696, 698, 722, 772, 782, 786, 787, 834, 838, 867, 868, 883, 903, 937, 954, 1090, 1108, 1109, 1111, 1112, 1115, 1202, 1227, 1260, 1266, 1274, 1275, 1276, 1278, 1280, 1304, 1328, 1349, 1354], "IF": 1370, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61, 62, 63, 72, 130, 131, 132, 133, 134, 135, 136, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 179, 180, 181, 192, 206, 210, 222, 227, 230, 237, 239, 241, 249, 250, 251, 253, 254, 257, 258, 262, 269, 273, 277, 281, 283, 284, 285, 289, 292, 294, 296, 299, 300, 303, 304, 306, 307, 313, 314, 316, 317, 318, 349, 352, 361, 363, 386, 393, 398, 405, 419, 445, 449, 450, 464, 465, 474, 477, 503, 517, 523, 527, 535, 556, 565, 570, 571, 577, 585, 586, 593, 594, 600, 602, 627, 632, 634, 637, 639, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 671, 673, 677, 678, 683, 693, 694, 696, 698, 699, 700, 711, 712, 713, 714, 716, 717, 718, 721, 722, 723, 724, 728, 731, 749, 753, 755, 758, 762, 763, 764, 767, 768, 770, 772, 777, 778, 780, 781, 782, 785, 786, 792, 793, 794, 796, 797, 798, 800, 804, 810, 813, 814, 815, 820, 822, 825, 826, 828, 829, 838, 859, 860, 868, 870, 874, 878, 882, 883, 888, 892, 897, 899, 900, 901, 903, 907, 909, 910, 911, 913, 918, 920, 921, 929, 937, 947, 954, 959, 960, 967, 968, 991, 998, 1003, 1010, 1023, 1036, 1054, 1058, 1059, 1077, 1078, 1087, 1090, 1115, 1131, 1132, 1137, 1142, 1151, 1152, 1156, 1173, 1182, 1187, 1188, 1194, 1202, 1221, 1223, 1225, 1227, 1229, 1230, 1231, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1247, 1249, 1251, 1253, 1256, 1260, 1261, 1265, 1275, 1276, 1278, 1280, 1281, 1282, 1289, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1303, 1304, 1305, 1306, 1310, 1313, 1321, 1324, 1328, 1330, 1338, 1349, 1354, 1358, 1359, 1361, 1369, 1372, 1377], "In": [56, 63, 150, 152, 163, 164, 167, 178, 182, 202, 207, 225, 227, 230, 239, 254, 255, 258, 269, 273, 281, 307, 316, 349, 352, 585, 586, 627, 647, 707, 708, 838, 860, 878, 883, 884, 903, 920, 954, 1108, 1115, 1221, 1226, 1290, 1349, 1354], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 72, 78, 95, 97, 140, 141, 142, 143, 144, 152, 158, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 204, 217, 255, 265, 272, 296, 306, 311, 318, 326, 335, 349, 352, 353, 437, 438, 445, 517, 577, 586, 597, 634, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 763, 765, 796, 797, 834, 838, 855, 859, 860, 864, 884, 888, 893, 913, 921, 928, 937, 954, 962, 1031, 1047, 1048, 1054, 1132, 1223, 1235, 1238, 1240, 1241, 1248, 1250, 1328, 1333, 1349, 1354], "Its": [240, 349, 515, 838, 1130, 1349], "NO": 960, "NOT": [133, 250, 290, 349, 577, 596, 670, 838, 908, 954, 1377], "No": [21, 253, 265, 349, 882, 893, 954], "Not": [228, 253, 349, 501, 530, 531, 838, 859, 870, 872, 882, 897, 910, 954, 1117, 1349], "ON": 1377, "OR": [755, 756, 874, 954, 960, 1368], "ORs": [413, 838, 1018, 1349], "On": [745, 838, 886, 954], "One": [56, 217, 269, 306, 311, 349, 362, 626, 757, 769, 785, 791, 794, 803, 805, 808, 809, 818, 838, 864, 954, 960, 1049, 1349], "Or": [238, 239, 254, 281, 295, 319, 328, 349, 352, 494, 647, 680, 777, 778, 780, 781, 825, 826, 828, 834, 838, 877, 878, 883, 903, 912, 930, 954, 1110, 1349], "That": [154, 888, 954], "The": [10, 21, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 70, 71, 73, 74, 75, 83, 87, 88, 95, 97, 98, 100, 130, 132, 133, 134, 136, 143, 145, 148, 149, 150, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 178, 179, 180, 182, 184, 192, 209, 217, 218, 220, 221, 222, 223, 226, 227, 230, 237, 238, 239, 240, 245, 251, 253, 254, 255, 258, 265, 271, 273, 277, 281, 282, 283, 284, 287, 288, 289, 296, 306, 307, 312, 315, 319, 323, 324, 326, 327, 328, 335, 349, 360, 401, 402, 403, 417, 418, 438, 440, 443, 444, 445, 453, 463, 467, 468, 472, 474, 477, 485, 486, 497, 500, 503, 507, 515, 548, 552, 585, 586, 600, 627, 634, 637, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 674, 677, 683, 687, 688, 692, 697, 698, 699, 700, 705, 706, 707, 708, 716, 717, 718, 719, 720, 721, 722, 732, 736, 742, 743, 744, 763, 766, 784, 788, 797, 798, 800, 814, 815, 816, 817, 820, 828, 830, 831, 833, 834, 838, 839, 840, 843, 845, 846, 847, 854, 859, 860, 864, 865, 867, 868, 870, 871, 874, 877, 878, 881, 882, 883, 884, 888, 893, 897, 900, 903, 905, 906, 907, 910, 913, 917, 919, 924, 925, 928, 930, 937, 954, 958, 959, 960, 966, 969, 1006, 1007, 1008, 1022, 1035, 1048, 1049, 1052, 1053, 1054, 1062, 1076, 1080, 1081, 1085, 1087, 1090, 1098, 1099, 1115, 1116, 1119, 1130, 1165, 1169, 1202, 1221, 1223, 1225, 1229, 1230, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1257, 1260, 1265, 1269, 1270, 1279, 1280, 1281, 1282, 1287, 1288, 1289, 1290, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1330, 1332, 1334, 1341, 1343, 1345, 1349, 1350, 1355, 1356, 1357, 1358, 1363, 1377, 1378, 1380], "Then": 167, "There": 1377, "These": [1, 33, 41, 139, 145, 150, 151, 202, 313, 349, 485, 837, 838, 1085, 1098], "To": [40, 63, 228, 349, 427, 443, 444, 501, 502, 684, 691, 692, 693, 696, 707, 708, 717, 718, 719, 720, 729, 838, 872, 954, 1036, 1052, 1053, 1117, 1266, 1273, 1274, 1275, 1278, 1289, 1290, 1311, 1330, 1349, 1377], "Will": [62, 63, 129, 859, 860, 870, 897, 910, 954, 1349], "With": [157, 249, 292, 349, 393, 570, 671, 838, 859, 909, 954, 998, 1151, 1187, 1253, 1349], "_": [1, 56, 60, 202, 273, 304, 308, 349, 386, 422, 423, 556, 685, 693, 695, 697, 702, 703, 709, 712, 713, 1027, 1028, 1030, 1267, 1275, 1279, 1284, 1285, 1291, 1295, 1325, 1349], "__array_ufunc__": 962, "__call__": 834, "__enter__": 1377, "__exit__": 1377, "__getattr__": 834, "__getitem__": 732, "__init__": [1, 32, 33, 34, 35, 52, 53, 54, 55, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 140, 141, 142, 175, 187, 193, 194, 196, 197, 929, 1377], "__name__": [252, 349], "_bar_": 787, "_btm_by_a": [418, 838], "_btm_by_b": [418, 838], "_by_ca": [418, 744, 838], "_by_cb": [418, 744, 838], "_check_ord": [62, 63, 129, 859, 860, 870, 897, 910, 954], "_df": [1, 57], "_diff": [323, 349, 924, 954], "_eager": [577, 859, 954], "_expr": [1, 58], "_foo": 591, "_geventdataframeresult": [63, 860, 954], "_is_not_nan": [531, 838], "_is_odd": [287, 349, 905, 954], "_isnan": [530, 838], "_isnul": [533, 838], "_kwarg": [859, 897, 954], "_ldf": 1, "_lf": 59, "_lower_boundari": [239, 349, 878, 954], "_mean_squar": [328, 930], "_not_nul": [532, 838], "_o": [422, 423, 702, 703, 1027, 1028, 1284, 1285], "_revers": [611, 615, 644, 838], "_right": [253, 254, 255, 349, 882, 883, 884, 954], "_storage_account": 34, "_suffix": 616, "_sum": [328, 930], "_top_by_a": [744, 838], "_top_by_b": [744, 838], "_train": [926, 954], "_type": [899, 954], "_type_check": [48, 49, 50, 51, 62, 63, 129, 859, 860, 870, 897, 910, 954], "_upper_boundari": [239, 349, 878, 954], "_world": 787, "a1": [41, 57, 59, 349], "a101": 1380, "a123": [41, 349], "a2": [41, 57, 59, 349], "a_1": [713, 1295, 1325, 1349], "a_2": [1325, 1349], "a_3": [1325, 1349], "a_a": 818, "a_agg_list": [239, 349, 878, 954], "a_b_doubl": 783, "a_btm_by_a": [418, 838], "a_btm_by_b": [418, 838], "a_by_ca": [418, 744, 838], "a_by_cb": [418, 744, 838], "a_div_2": 1371, "a_div_5": 1371, "a_interpol": [522, 838], "a_is_even": [296, 349, 817, 913, 954], "a_isnul": [533, 838], "a_lag_": 766, "a_log2": 1371, "a_mod_2": 1371, "a_not_nul": [532, 838], "a_revers": [611, 615, 644, 838], "a_rol": 766, "a_suffix": 616, "a_times_2": [586, 838], "a_times_b": [585, 838], "a_top_by_a": [744, 838], "a_top_by_b": [744, 838], "a_txt": 818, "aa": [497, 684, 696, 784, 838, 960, 1049, 1266, 1278, 1349, 1372], "aaa": [1, 41, 349, 684, 696, 732, 734, 735, 960, 1266, 1278], "aaaa": [1007, 1008], "aabcdef": 718, "aad": [1007, 1008], "aag": 27, "aazz": 1372, "ab": [241, 257, 300, 323, 349, 708, 732, 734, 735, 838, 924, 954, 960, 1131, 1156, 1321, 1349, 1370, 1372], "ab12": 708, "ab12cd34ef": 708, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 358, 690, 693, 707, 717, 838, 960, 1272, 1275, 1289, 1290, 1372], "abc123": 1372, "abc456": [707, 1289, 1290, 1372], "abcabc": 708, "abcd": 1372, "abcdeff": 717, "abf": [152, 163, 164], "abl": [104, 150, 577], "about": [52, 53, 54, 104, 143, 145, 150, 677, 684, 692, 693, 696, 707, 708, 838, 1260, 1266, 1274, 1275, 1278, 1289, 1290, 1349, 1380], "abov": [41, 254, 273, 349, 352, 828, 883, 954], "abs_a": 1371, "absolut": [145, 152, 163, 164, 171, 172, 173, 174, 357, 493, 495, 496, 838, 965, 1109, 1111, 1112, 1349, 1371], "acc": [772, 773, 786, 812], "accent": 960, "accept": [38, 43, 47, 48, 49, 50, 51, 54, 143, 145, 146, 148, 149, 152, 154, 156, 158, 160, 162, 165, 166, 167, 178, 192, 209, 219, 238, 287, 288, 292, 295, 312, 323, 324, 328, 349, 358, 418, 427, 497, 523, 627, 641, 642, 680, 709, 736, 744, 752, 754, 756, 761, 764, 765, 766, 767, 775, 784, 802, 804, 807, 816, 820, 822, 828, 834, 838, 854, 866, 877, 905, 906, 909, 912, 917, 924, 925, 930, 954, 959, 1036, 1137, 1221, 1229, 1230, 1253, 1291, 1349], "access": [38, 43, 47, 48, 49, 50, 51, 57, 58, 59, 60, 154, 158, 160, 162, 164, 165, 166, 167, 192, 206, 213, 251, 282, 283, 296, 349, 694, 732, 861, 913, 926, 954, 959, 1276, 1380], "accord": [282, 349, 634, 777, 778, 780, 781, 825, 826, 838, 1067, 1223, 1349], "accordingli": [143, 146, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161], "account": [41, 137, 151, 164, 349, 467, 493, 495, 496, 838, 1080, 1109, 1111, 1112, 1349], "accumul": [772, 773, 786, 812], "acg": 27, "achiev": [258, 273, 335, 349, 423, 586, 703, 838, 1028, 1202, 1285, 1349], "aco": 1370, "acosd": 1370, "across": [41, 56, 151, 153, 218, 240, 253, 260, 262, 267, 289, 299, 349, 440, 515, 600, 754, 756, 772, 773, 775, 802, 804, 807, 822, 838, 865, 882, 907, 954, 1130, 1349], "action": [40, 349], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 549, 693, 1166, 1275], "actual": [41, 133, 178, 182, 284, 349, 1255, 1349, 1372, 1379], "ad": [39, 41, 133, 153, 239, 296, 306, 311, 313, 318, 323, 324, 349, 364, 477, 500, 593, 594, 736, 772, 773, 817, 838, 878, 913, 921, 924, 925, 954, 960, 1090, 1116, 1328, 1333, 1349], "adbc": [39, 150, 151, 349], "adbc_driver_manag": 170, "adbc_ingest": [39, 349], "add": [40, 41, 42, 149, 227, 239, 258, 323, 324, 325, 326, 349, 352, 438, 613, 614, 615, 616, 634, 736, 782, 786, 828, 838, 878, 882, 924, 925, 926, 927, 928, 954, 1115, 1349, 1354], "add_calendar_dai": 782, "add_calendar_month": 782, "add_calendar_year": 782, "add_chart": [41, 349], "add_dai": 782, "add_format": [41, 349], "add_hour": 782, "add_milli": 782, "add_second": 782, "add_seri": [41, 349], "add_week": 782, "add_worksheet": [41, 349], "addit": [30, 37, 39, 40, 41, 133, 147, 152, 153, 163, 164, 176, 178, 180, 182, 192, 222, 226, 238, 256, 271, 287, 288, 295, 308, 315, 323, 324, 328, 349, 358, 454, 497, 500, 627, 680, 684, 692, 693, 696, 707, 708, 732, 736, 761, 764, 765, 766, 767, 784, 816, 817, 820, 834, 838, 871, 877, 905, 906, 912, 919, 924, 925, 930, 954, 960, 1055, 1063, 1116, 1266, 1274, 1275, 1278, 1289, 1290, 1331, 1349, 1359, 1377], "addition": [64, 153, 282, 349, 960], "address": 693, "adjac": [41, 349], "adjust": [493, 495, 496, 677, 838, 1109, 1111, 1112, 1260, 1349], "adl": [152, 163, 164], "adlf": 164, "advanc": [41, 273, 349, 398, 577, 610, 613, 615, 617, 618, 1003, 1194, 1380], "advantag": [41, 202, 272, 349], "advis": [41, 55, 97, 349], "aedt": 779, "aeiuo": [696, 1278], "af1": 56, "af2": 56, "af3": 56, "affect": [39, 171, 172, 173, 174, 349], "afm": 164, "afoo": [926, 954], "after": [41, 133, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 209, 210, 227, 312, 315, 349, 417, 418, 419, 497, 627, 637, 731, 743, 744, 838, 854, 917, 919, 954, 1022, 1115, 1225, 1313, 1334, 1349, 1364], "afterward": [55, 828], "ag": [265, 349, 893, 954, 1378], "again": [586, 838], "against": [39, 106, 148, 150, 230, 277, 296, 349, 549, 696, 817, 874, 900, 913, 954, 1166, 1278, 1358, 1377, 1379, 1380], "agg": [238, 239, 273, 281, 349, 359, 408, 413, 416, 418, 503, 505, 509, 512, 585, 586, 627, 679, 680, 744, 751, 777, 780, 800, 838, 859, 860, 870, 877, 878, 897, 899, 903, 910, 954, 960], "agg_group": [789, 838], "agg_list": [585, 838], "aggreg": [145, 148, 149, 152, 160, 163, 232, 238, 239, 259, 261, 263, 266, 269, 273, 274, 275, 281, 297, 298, 317, 320, 328, 329, 331, 333, 349, 359, 408, 413, 416, 503, 518, 585, 586, 627, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 753, 754, 755, 756, 772, 773, 774, 775, 786, 791, 801, 802, 804, 806, 807, 812, 821, 822, 838, 878, 888, 889, 890, 891, 894, 895, 898, 903, 914, 915, 922, 930, 931, 933, 935, 954, 1013, 1018, 1021, 1133, 1235, 1236, 1237, 1239, 1242, 1243, 1244, 1349, 1365, 1367, 1370, 1376], "aggregate_funct": [273, 349, 960], "aho": [685, 695, 697, 709, 1267, 1277, 1279, 1291], "aiosqlit": 150, "alchemy_conn": 150, "algorithm": [208, 349, 365, 685, 695, 697, 709, 757, 838, 853, 954, 970, 1267, 1277, 1279, 1291, 1349], "alia": [1, 13, 56, 58, 60, 64, 94, 195, 199, 213, 239, 257, 273, 281, 315, 323, 326, 349, 352, 358, 362, 401, 402, 403, 404, 407, 417, 420, 422, 423, 424, 432, 433, 434, 435, 436, 438, 441, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485, 486, 487, 488, 491, 492, 505, 507, 511, 513, 519, 520, 523, 526, 529, 537, 539, 561, 573, 579, 584, 586, 590, 593, 594, 596, 598, 603, 606, 608, 610, 621, 622, 626, 628, 632, 634, 637, 639, 667, 669, 684, 685, 686, 687, 689, 690, 692, 693, 695, 696, 697, 698, 702, 703, 709, 710, 711, 712, 713, 714, 715, 719, 720, 722, 732, 733, 734, 735, 737, 742, 743, 745, 751, 752, 758, 759, 760, 764, 765, 766, 767, 777, 780, 782, 783, 786, 787, 792, 795, 796, 799, 800, 812, 816, 820, 825, 828, 838, 878, 880, 887, 903, 919, 924, 928, 954, 1048, 1055, 1056, 1059, 1062, 1063, 1064, 1065, 1070, 1071, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1087, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1156, 1223, 1228, 1274, 1275, 1279, 1290, 1295, 1296, 1349], "alias": [296, 349, 593, 594, 913, 954], "alic": [148, 1378], "align": [11, 16, 17, 41, 56, 64, 349, 1378], "align_fram": 64, "align_ful": 64, "align_inn": 64, "align_left": 64, "align_right": 64, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 48, 49, 50, 51, 56, 62, 69, 115, 117, 130, 131, 135, 144, 148, 149, 152, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 175, 176, 179, 182, 202, 207, 208, 210, 217, 219, 221, 222, 229, 241, 246, 248, 250, 251, 252, 253, 255, 256, 257, 262, 264, 268, 269, 273, 276, 278, 282, 283, 284, 288, 294, 295, 299, 300, 304, 306, 307, 311, 314, 316, 317, 318, 319, 324, 326, 349, 352, 362, 364, 386, 418, 431, 437, 443, 444, 445, 446, 477, 497, 502, 514, 515, 518, 521, 525, 528, 532, 533, 538, 548, 549, 556, 574, 577, 585, 607, 610, 611, 613, 614, 615, 616, 617, 618, 625, 627, 637, 642, 644, 648, 672, 678, 680, 686, 690, 693, 694, 698, 701, 704, 708, 716, 717, 718, 722, 744, 754, 763, 765, 772, 773, 774, 775, 784, 786, 791, 792, 795, 804, 812, 820, 821, 822, 828, 834, 838, 844, 850, 853, 856, 859, 860, 864, 866, 867, 868, 870, 873, 882, 884, 888, 892, 897, 901, 906, 910, 911, 912, 918, 920, 921, 925, 926, 928, 954, 960, 991, 1047, 1049, 1052, 1053, 1054, 1055, 1090, 1131, 1138, 1150, 1156, 1165, 1166, 1173, 1191, 1194, 1225, 1230, 1235, 1261, 1268, 1272, 1275, 1276, 1279, 1280, 1283, 1290, 1298, 1299, 1300, 1304, 1321, 1330, 1349, 1353, 1354, 1359, 1361, 1366, 1367, 1372, 1376, 1377, 1379, 1380], "all_compat": 1361, "all_data": 1377, "all_horizont": [221, 222, 349, 753, 867, 868, 954], "all_stat": 31, "alloc": [145, 148, 149, 225, 276, 349, 838, 929, 1108, 1349], "allow": [1, 8, 40, 41, 48, 49, 50, 51, 55, 64, 97, 106, 131, 150, 153, 162, 165, 166, 167, 168, 175, 178, 179, 182, 202, 206, 251, 254, 256, 282, 283, 285, 307, 308, 311, 314, 327, 349, 420, 424, 467, 474, 477, 565, 585, 586, 593, 594, 639, 668, 721, 723, 724, 838, 882, 883, 888, 892, 899, 918, 926, 954, 958, 960, 1080, 1087, 1090, 1182, 1202, 1227, 1247, 1303, 1305, 1306, 1330, 1331, 1349, 1372, 1380], "allow_alias": [593, 594], "allow_chunk": [178, 182], "allow_copi": [131, 206, 307, 349, 1330, 1349], "allow_dupl": [634, 838, 1223, 1349], "allow_exact_match": [254, 349, 883, 954], "allow_infin": [178, 182], "allow_masked_out": [178, 182], "allow_missing_column": [160, 167], "allow_nul": [175, 178, 182, 1380], "allow_object": 798, "allow_parallel": [254, 349, 882, 883, 954], "allow_pyarrow_filt": 168, "allow_time_zon": [178, 179, 182], "allowed_dtyp": [178, 179, 182, 1380], "almost": [63, 258, 335, 349, 721, 723, 724, 860, 954, 958, 1202, 1303, 1305, 1306, 1349], "along": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 954], "alpha": [493, 495, 496, 838, 960, 1109, 1111, 1112, 1349], "alpha_i": [494, 838, 1110, 1349], "alphabet": [960, 1380], "alphanumer": [729, 960, 1311], "alreadi": [39, 40, 105, 306, 349, 437, 549, 601, 749, 838, 910, 954, 1047, 1166, 1338, 1349], "also": [28, 38, 41, 48, 49, 50, 51, 55, 62, 63, 133, 150, 153, 154, 159, 160, 162, 167, 177, 178, 181, 182, 187, 196, 202, 223, 238, 239, 265, 269, 273, 281, 283, 287, 295, 306, 318, 323, 326, 349, 433, 436, 445, 467, 471, 477, 503, 523, 586, 593, 594, 627, 637, 641, 642, 680, 707, 708, 709, 716, 717, 732, 763, 772, 773, 776, 779, 786, 788, 812, 828, 837, 838, 844, 859, 860, 870, 877, 878, 893, 897, 903, 905, 910, 912, 921, 924, 926, 928, 954, 960, 1054, 1084, 1137, 1225, 1229, 1230, 1268, 1289, 1290, 1291, 1298, 1349, 1353, 1359, 1361, 1364, 1368, 1372, 1375, 1377, 1378], "alt": [349, 352, 1349, 1354], "altair": [170, 349, 352, 1349, 1354], "altern": [41, 187, 349, 834, 1369], "although": [296, 349, 913, 954], "alwai": [14, 38, 40, 48, 54, 72, 78, 148, 154, 158, 160, 209, 238, 253, 254, 258, 312, 335, 349, 417, 418, 585, 597, 721, 743, 744, 828, 838, 854, 882, 883, 888, 917, 954, 960, 1022, 1202, 1303, 1334, 1349, 1358, 1359, 1377, 1380], "am": [710, 1292], "amarillo": 1372, "amaz": [349, 352, 1349, 1354], "amazonaw": 33, "ambigu": [470, 471, 472, 485, 721, 724, 779, 1083, 1084, 1085, 1098, 1303, 1306], "america": 780, "amount": [52, 55, 73, 97, 158, 162, 165, 166, 586, 782, 838, 1366], "amsterdam": [471, 1084], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 57, 59, 60, 64, 72, 73, 74, 95, 102, 106, 109, 112, 119, 121, 130, 132, 133, 136, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 165, 166, 167, 176, 178, 182, 192, 211, 212, 213, 219, 225, 228, 232, 234, 239, 250, 251, 252, 254, 255, 258, 269, 273, 278, 279, 281, 282, 286, 296, 301, 307, 311, 313, 317, 318, 323, 326, 335, 349, 352, 360, 382, 385, 397, 402, 408, 411, 413, 414, 416, 433, 434, 435, 436, 437, 438, 445, 449, 450, 467, 471, 474, 488, 494, 502, 503, 508, 509, 512, 546, 549, 552, 554, 576, 577, 585, 586, 598, 600, 610, 611, 632, 633, 634, 642, 643, 647, 648, 649, 651, 653, 655, 657, 660, 662, 664, 683, 684, 687, 693, 696, 700, 721, 723, 724, 726, 728, 742, 745, 753, 758, 762, 764, 768, 770, 777, 778, 780, 781, 783, 785, 788, 792, 793, 794, 795, 796, 797, 798, 810, 812, 813, 816, 820, 825, 826, 828, 829, 834, 838, 856, 857, 858, 860, 864, 866, 870, 874, 878, 883, 884, 888, 901, 903, 904, 913, 921, 924, 926, 928, 929, 937, 951, 954, 958, 959, 960, 987, 990, 1002, 1007, 1013, 1016, 1018, 1019, 1021, 1035, 1037, 1043, 1044, 1045, 1046, 1047, 1054, 1058, 1087, 1101, 1108, 1110, 1151, 1163, 1166, 1169, 1171, 1193, 1202, 1230, 1231, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1248, 1250, 1265, 1266, 1269, 1275, 1278, 1282, 1303, 1305, 1306, 1308, 1310, 1330, 1332, 1349, 1367, 1369, 1372, 1376, 1377, 1379], "ana": [710, 1292], "anan": [710, 1292], "ananab": 1372, "and_": 838, "ang": 1372, "angl": [759, 760], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 71, 72, 78, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 202, 204, 207, 209, 215, 219, 221, 222, 227, 229, 230, 232, 234, 249, 251, 252, 253, 254, 255, 258, 262, 272, 277, 278, 282, 283, 284, 296, 299, 302, 303, 306, 307, 308, 311, 312, 314, 317, 318, 326, 349, 352, 353, 358, 361, 362, 386, 417, 418, 419, 437, 438, 445, 473, 491, 492, 502, 503, 507, 509, 511, 513, 517, 527, 537, 544, 549, 556, 566, 567, 568, 569, 584, 585, 586, 593, 603, 606, 608, 610, 611, 613, 615, 617, 618, 621, 622, 626, 631, 634, 641, 642, 643, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 669, 673, 683, 685, 699, 717, 718, 719, 720, 721, 723, 724, 726, 728, 737, 743, 744, 745, 752, 753, 754, 756, 763, 765, 767, 768, 769, 796, 797, 798, 800, 804, 822, 828, 838, 854, 859, 860, 866, 867, 868, 873, 874, 882, 883, 884, 896, 897, 900, 901, 913, 917, 918, 921, 928, 929, 954, 958, 960, 962, 964, 967, 991, 1022, 1031, 1047, 1048, 1054, 1086, 1105, 1106, 1115, 1118, 1123, 1125, 1127, 1132, 1142, 1151, 1154, 1161, 1166, 1173, 1183, 1184, 1185, 1186, 1201, 1202, 1213, 1214, 1223, 1229, 1230, 1231, 1235, 1238, 1240, 1241, 1248, 1249, 1265, 1267, 1281, 1303, 1305, 1306, 1308, 1310, 1328, 1329, 1330, 1331, 1333, 1334, 1349, 1354, 1377, 1380], "anna": [265, 349, 893, 954], "annex": [704, 1286], "announc": [899, 954], "anoth": [99, 177, 210, 218, 224, 238, 254, 289, 349, 437, 440, 447, 522, 552, 590, 596, 600, 641, 650, 652, 654, 656, 658, 661, 663, 665, 696, 838, 856, 865, 877, 883, 907, 926, 954, 1047, 1056, 1107, 1115, 1136, 1169, 1229, 1230, 1278, 1349, 1371, 1372], "anti": [253, 349, 882, 937, 954, 1248, 1250, 1349, 1365], "antipattern": [148, 154, 158, 160], "any_horizont": 755, "anyth": [40, 282, 349], "anywher": [404, 407, 721, 723, 724, 1303, 1305, 1306], "ap": 1372, "apach": [36, 43, 44, 47, 131, 146, 150, 151, 154, 156, 164, 205, 349, 963], "apaya": [722, 1304], "api": [0, 33, 38, 43, 47, 48, 49, 50, 51, 131, 158, 160, 162, 165, 166, 167, 168, 187, 192, 206, 258, 335, 349, 586, 800, 838, 937, 954, 1202, 1349, 1376], "apia": [446, 1055], "app": [424, 715, 1029, 1297], "appear": [41, 68, 133, 173, 174, 349, 708, 747, 838, 960, 1336, 1349, 1378], "append": [39, 40, 42, 178, 227, 253, 254, 255, 349, 638, 828, 838, 882, 883, 884, 954, 1115, 1349], "appl": [214, 243, 253, 278, 279, 302, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 349, 418, 420, 424, 644, 689, 715, 744, 838, 882, 901, 932, 933, 935, 936, 938, 939, 940, 941, 942, 943, 944, 954, 1024, 1029, 1271, 1297, 1365, 1372], "appli": [11, 21, 38, 41, 48, 62, 64, 129, 143, 150, 162, 175, 178, 182, 202, 217, 232, 255, 258, 272, 295, 296, 306, 335, 349, 374, 448, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 466, 468, 469, 473, 475, 486, 487, 489, 495, 496, 585, 586, 631, 649, 650, 651, 652, 655, 656, 662, 663, 680, 707, 708, 721, 723, 724, 728, 761, 772, 773, 786, 799, 800, 812, 817, 828, 838, 864, 884, 888, 896, 912, 913, 937, 954, 1036, 1057, 1060, 1061, 1062, 1065, 1066, 1067, 1071, 1072, 1073, 1075, 1076, 1079, 1081, 1082, 1086, 1088, 1099, 1100, 1102, 1111, 1112, 1202, 1236, 1237, 1239, 1243, 1289, 1290, 1303, 1305, 1306, 1310, 1349, 1358], "applic": [54, 307, 349, 586, 838], "apply_on_context_ent": 202, "appropri": [41, 168, 230, 277, 307, 349, 477, 637, 838, 874, 900, 954, 1090, 1225, 1349], "approx": [365, 838], "approx_n_uniqu": [349, 838, 954, 1349], "approxim": [47, 208, 349, 365, 494, 757, 838, 853, 954, 970, 1110, 1349, 1371, 1380], "april": [474, 1087, 1372, 1373], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 63, 64, 95, 96, 97, 104, 110, 126, 130, 131, 132, 133, 134, 135, 136, 137, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 176, 178, 179, 180, 182, 192, 202, 206, 209, 210, 215, 217, 221, 222, 225, 228, 230, 231, 232, 237, 238, 239, 251, 253, 254, 255, 256, 258, 264, 265, 271, 273, 277, 281, 282, 283, 284, 287, 288, 292, 295, 302, 306, 307, 308, 311, 312, 316, 318, 319, 323, 324, 327, 328, 349, 361, 363, 377, 393, 398, 417, 418, 419, 427, 433, 435, 436, 445, 472, 477, 485, 490, 492, 493, 494, 495, 496, 501, 503, 517, 523, 525, 527, 528, 530, 531, 532, 533, 535, 540, 570, 577, 585, 622, 627, 634, 637, 640, 641, 642, 643, 647, 650, 652, 654, 656, 658, 659, 661, 663, 665, 671, 674, 677, 679, 680, 685, 694, 698, 700, 701, 705, 706, 707, 708, 709, 711, 722, 724, 726, 731, 736, 738, 742, 743, 744, 753, 754, 756, 761, 764, 765, 766, 767, 768, 775, 777, 778, 780, 781, 796, 797, 802, 804, 807, 816, 820, 822, 825, 826, 828, 830, 831, 833, 837, 838, 839, 840, 843, 844, 845, 846, 847, 850, 854, 859, 860, 864, 867, 868, 872, 874, 877, 878, 882, 883, 884, 888, 892, 893, 897, 899, 900, 901, 903, 905, 906, 909, 912, 917, 920, 921, 924, 925, 926, 930, 954, 958, 960, 967, 968, 982, 998, 1003, 1022, 1026, 1036, 1045, 1046, 1054, 1085, 1090, 1098, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1117, 1119, 1121, 1132, 1137, 1140, 1142, 1143, 1145, 1146, 1147, 1148, 1152, 1157, 1187, 1194, 1214, 1223, 1225, 1229, 1230, 1231, 1241, 1253, 1257, 1260, 1267, 1276, 1280, 1282, 1287, 1288, 1289, 1290, 1293, 1304, 1306, 1308, 1313, 1320, 1328, 1330, 1331, 1332, 1334, 1341, 1343, 1345, 1349, 1350, 1353, 1355, 1356, 1357, 1359, 1361, 1364, 1369, 1377, 1380], "arbitrari": [52, 85, 234, 349, 440, 838, 865, 954, 960], "arbitrarili": [258, 349], "arcco": [838, 1349], "arccosh": [838, 1349], "arcsin": [838, 1349], "arcsinh": [838, 1349], "arctan": [759, 760, 838, 1349], "arctan2": 760, "arctanh": [838, 1349], "aren": [38, 48, 349, 954], "arg": [32, 55, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 145, 195, 199, 230, 272, 277, 349, 374, 631, 761, 787, 838, 874, 896, 900, 954, 1202, 1349, 1362], "arg_max": [838, 1349], "arg_min": [838, 1349], "arg_sort": [838, 1349], "arg_tru": [762, 838, 1349], "arg_uniqu": [838, 1349], "arg_wher": [375, 838], "argmax": [585, 838], "argument": [37, 40, 47, 95, 143, 145, 147, 148, 152, 160, 162, 163, 178, 180, 182, 192, 215, 219, 226, 238, 239, 254, 271, 272, 281, 287, 288, 295, 308, 315, 319, 323, 324, 328, 349, 472, 485, 497, 503, 523, 585, 627, 631, 647, 680, 716, 717, 718, 736, 753, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 784, 816, 820, 828, 834, 838, 866, 871, 877, 878, 883, 896, 903, 905, 906, 912, 919, 924, 925, 930, 951, 954, 960, 1085, 1098, 1137, 1298, 1299, 1300, 1331, 1349, 1371, 1372], "aris": 150, "arithmet": [232, 349], "arm": 170, "arm64": 170, "around": [38, 48, 349, 954], "arr": [307, 349, 830, 1330, 1341, 1349, 1372], "arr_bar": 1367, "arr_foo": 1367, "arrai": [130, 134, 148, 149, 152, 160, 163, 204, 225, 226, 301, 306, 307, 308, 349, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 405, 433, 434, 435, 436, 544, 559, 560, 561, 562, 564, 573, 574, 576, 579, 581, 585, 643, 649, 651, 653, 655, 657, 660, 662, 664, 670, 742, 765, 783, 797, 817, 838, 871, 954, 959, 962, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1043, 1044, 1045, 1046, 1051, 1108, 1161, 1176, 1177, 1178, 1179, 1181, 1189, 1190, 1191, 1193, 1196, 1198, 1199, 1231, 1236, 1237, 1239, 1242, 1243, 1244, 1251, 1255, 1324, 1328, 1330, 1331, 1332, 1349, 1370, 1372, 1376, 1379], "array_agg": 1370, "array_contain": 1370, "array_get": 1370, "array_length": 1370, "array_low": 1370, "array_mean": 1370, "array_revers": 1370, "array_sum": 1370, "array_to_str": 1370, "array_uniqu": 1370, "array_upp": 1370, "arraylik": [1051, 1349], "arrow": [43, 44, 49, 130, 131, 150, 151, 154, 156, 165, 205, 251, 283, 284, 301, 303, 307, 349, 954, 963, 1324, 1330, 1349], "arrowarrayexport": [130, 131], "arrowinvaliderror": [40, 349], "arrowstreamexport": [130, 131], "as_": [1349, 1354], "as_arrai": 797, "as_dict": [149, 271, 349], "as_expr": 960, "as_seri": [210, 302, 349, 856, 954, 960], "asarrai": [204, 962], "ascend": [239, 265, 281, 349, 627, 647, 838, 878, 893, 903, 954], "ascii": [7, 21, 422, 423, 685, 695, 697, 698, 702, 703, 709, 711, 722, 731, 960, 1027, 1028, 1267, 1277, 1279, 1280, 1284, 1285, 1291, 1293, 1304, 1313], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [685, 695, 697, 709, 1267, 1277, 1279, 1291], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1380, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 960, "ascii_t": 202, "ascii_uppercas": [317, 349], "asd": [686, 693, 1268, 1275], "asia": [137, 960, 1060, 1061, 1088], "asid": 477, "asin": 1370, "asind": 1370, "asof": [254, 349, 883, 954], "asofjoinstrategi": [254, 349, 883, 954], "assert": [171, 172, 173, 174, 178, 182, 281, 349, 850, 960], "assert_frame_equ": [172, 173, 224, 349, 1380], "assert_frame_not_equ": [171, 174], "assert_series_equ": [171, 174, 1107, 1349, 1380], "assert_series_not_equ": [172, 173], "assert_someth": 176, "assertionerror": [171, 172, 173, 174], "assign": [176, 239, 334, 349, 398, 577, 627, 637, 713, 714, 838, 878, 936, 954, 1003, 1194, 1225, 1295, 1296, 1349], "associ": [39, 41, 56, 151, 153, 177, 180, 284, 349, 959, 1360, 1362, 1366], "assum": [33, 284, 349, 888, 937, 954, 1372], "assume_rol": 33, "assumpt": [585, 838], "async": [62, 63, 150, 860, 954], "async_engin": 150, "asynchron": [63, 150, 860, 954], "asyncio": [63, 150, 860, 954], "asyncresult": [63, 860, 954], "asyncsurrealdb": 150, "ata": 27, "atan": 1370, "atan2": [759, 760, 1370], "atan2_ab": 1374, "atan2d": [760, 1370], "atan2d_ab": 1374, "atand": 1370, "atg": 27, "atgataaaggag": 27, "atol": [171, 172, 173, 174], "attain": [680, 838], "attempt": [1, 10, 48, 49, 50, 51, 62, 63, 440, 838, 859, 860, 865, 870, 897, 910, 954], "attr": [349, 352, 1349, 1354], "attribut": [65, 68, 71, 72, 73, 74, 75, 83, 87, 140, 141, 142, 175, 193, 194, 196, 197, 349, 352, 830, 831, 833, 834, 839, 840, 843, 845, 846, 847, 929, 954, 1341, 1343, 1345, 1349, 1350, 1354, 1355, 1356, 1357], "attributeerror": 1, "audi": [302, 349, 644, 838], "august": 477, "australia": 779, "auth": 35, "authent": [40, 152, 160, 162, 163, 164, 165, 167, 187, 349], "author": 1, "auto": [10, 38, 40, 43, 47, 48, 49, 50, 51, 62, 63, 64, 130, 132, 133, 134, 136, 152, 157, 158, 160, 162, 163, 165, 166, 167, 187, 192, 313, 349, 859, 860, 870, 897, 910, 954, 1380], "auto_structifi": [287, 323, 349, 905, 924, 954], "autofilt": [41, 349], "autofit": [41, 349], "autogener": [148, 149, 153, 159, 162], "automat": [8, 38, 48, 64, 130, 132, 133, 134, 136, 137, 145, 148, 149, 150, 151, 157, 158, 160, 162, 165, 166, 178, 182, 184, 187, 287, 296, 323, 349, 585, 642, 716, 717, 718, 817, 838, 905, 913, 924, 954, 1229, 1230, 1298, 1299, 1300, 1333, 1349, 1359, 1361, 1364, 1377], "autumn": [707, 708], "avail": [41, 47, 51, 139, 150, 151, 152, 163, 164, 176, 189, 190, 191, 202, 273, 296, 348, 349, 477, 637, 817, 830, 831, 833, 837, 838, 839, 840, 843, 844, 845, 846, 847, 850, 913, 952, 953, 954, 960, 1049, 1225, 1341, 1343, 1345, 1349, 1350, 1353, 1355, 1356, 1357, 1368], "available_timezon": [71, 960], "averag": [41, 349, 493, 494, 495, 496, 637, 838, 1109, 1110, 1111, 1112, 1225, 1349, 1366], "avg": 1370, "avocado": 1372, "avoid": [178, 182, 230, 277, 283, 349, 360, 838, 874, 900, 954], "avro": [36, 146, 195, 349, 850], "avrocompress": [36, 349], "aw": [33, 38, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 954], "awai": 1371, "await": [63, 150, 860, 948, 954], "await_result": [899, 954], "awar": [11, 150, 251, 283, 284, 303, 349, 494, 685, 695, 697, 709, 724, 838, 954, 1110, 1267, 1277, 1279, 1291, 1306, 1349], "aws_access_key_id": [40, 152, 163, 167, 349], "aws_region": [40, 163, 167, 349], "aws_secret_access_kei": [40, 152, 163, 167, 349], "awsassumerolekwarg": 33, "axi": [264, 316, 349, 352, 759, 760, 892, 920, 954, 1349, 1354], "aya": [711, 1293, 1304], "az": [152, 163, 164], "azur": [34, 38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 164, 165, 166, 167, 192, 349, 954], "azure_storage_account_kei": [152, 163, 164], "azure_storage_account_nam": [152, 163, 164], "b": [1, 11, 36, 38, 40, 43, 44, 47, 52, 59, 64, 87, 95, 101, 104, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 150, 153, 206, 207, 208, 209, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 248, 249, 250, 251, 252, 253, 256, 257, 259, 261, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 292, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 358, 360, 361, 363, 364, 374, 376, 381, 386, 401, 402, 403, 404, 405, 406, 407, 408, 413, 416, 418, 419, 431, 438, 442, 474, 477, 497, 499, 501, 502, 503, 505, 514, 515, 518, 521, 522, 523, 525, 528, 530, 531, 532, 533, 538, 544, 549, 556, 566, 567, 568, 569, 585, 586, 591, 607, 610, 611, 612, 613, 614, 615, 616, 624, 625, 627, 631, 634, 637, 641, 642, 644, 646, 672, 678, 680, 687, 691, 696, 700, 707, 708, 732, 733, 744, 747, 751, 753, 754, 755, 756, 757, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 783, 784, 785, 786, 787, 790, 791, 792, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 814, 815, 817, 819, 820, 821, 822, 823, 827, 834, 838, 853, 854, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 885, 886, 887, 888, 889, 890, 891, 894, 895, 896, 897, 898, 900, 901, 902, 904, 905, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 954, 960, 966, 969, 991, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1026, 1030, 1031, 1048, 1051, 1087, 1090, 1104, 1107, 1108, 1115, 1118, 1137, 1142, 1161, 1183, 1184, 1185, 1186, 1223, 1228, 1269, 1273, 1278, 1282, 1289, 1290, 1314, 1316, 1317, 1319, 1331, 1336, 1349, 1359, 1361, 1362, 1364, 1365, 1366, 1367, 1372, 1373, 1374, 1377], "b1": [57, 59], "b2": [57, 59], "b345": [41, 349], "b4": [41, 349], "b_b": [296, 349], "b_btm_by_a": [418, 838], "b_btm_by_b": [418, 838], "b_by_ca": [418, 744, 838], "b_by_cb": [418, 744, 838], "b_is_not_nan": [531, 838], "b_isnan": [530, 838], "b_isnul": [533, 838], "b_not_nul": [532, 838], "b_revers": [611, 615, 644, 838], "b_suffix": 616, "b_sum": [328, 930], "b_top_by_a": [744, 838], "b_top_by_b": [744, 838], "ba": [440, 497, 600, 715, 784, 838, 960], "back": [4, 56, 167, 227, 239, 289, 307, 308, 349, 600, 627, 708, 838, 859, 870, 878, 897, 907, 910, 929, 954, 1115, 1331, 1349], "backend": [40, 150, 151, 152, 163, 164, 349, 352, 1349, 1354], "background": [62, 63, 349, 353, 859, 860, 953, 954], "backward": [47, 51, 229, 254, 349, 445, 465, 502, 838, 873, 883, 954, 1054, 1078, 1118, 1349], "backward_fil": 838, "bad": [707, 708, 1289, 1290], "balanc": [181, 183, 1380], "ballon_dor": [692, 694, 1274, 1276], "banana": [214, 302, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 418, 644, 689, 715, 744, 838, 933, 935, 938, 939, 940, 941, 942, 943, 944, 1372], "banded_column": [41, 349], "banded_row": [41, 349], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 144, 157, 158, 210, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 230, 232, 234, 235, 236, 241, 243, 244, 245, 247, 253, 257, 258, 259, 260, 261, 262, 263, 266, 267, 270, 273, 275, 277, 278, 279, 282, 285, 286, 287, 289, 294, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 314, 315, 320, 321, 322, 327, 349, 352, 421, 440, 520, 590, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 677, 686, 688, 691, 693, 694, 710, 712, 714, 719, 720, 757, 768, 769, 770, 785, 790, 791, 794, 795, 801, 803, 805, 806, 808, 809, 816, 819, 823, 827, 828, 834, 838, 856, 861, 862, 866, 867, 868, 869, 874, 880, 881, 882, 895, 900, 901, 904, 905, 918, 919, 923, 954, 959, 960, 1025, 1173, 1260, 1268, 1270, 1273, 1275, 1276, 1292, 1296, 1301, 1302, 1349, 1363, 1365, 1366, 1367, 1369, 1372, 1375], "bar2": 1372, "bar22": [232, 349], "bar_": 712, "bar_3": [304, 349], "bar_4": [304, 349], "bar_a": [273, 349], "bar_at_2": 1367, "bar_avg": 1366, "bar_b": [273, 349], "bar_color": [41, 349], "bar_max": 1366, "bar_median": 1366, "bar_min": 1366, "bar_negative_border_color_sam": [41, 349], "bar_negative_color_sam": [41, 349], "bar_std": 1366, "bar_sum": 1366, "bar_var": 1366, "bare": [593, 594, 960], "base": [32, 41, 52, 53, 54, 69, 115, 117, 153, 180, 222, 230, 239, 255, 277, 281, 349, 446, 454, 490, 493, 494, 495, 496, 503, 517, 522, 580, 581, 585, 586, 632, 634, 642, 647, 650, 652, 654, 656, 658, 661, 663, 665, 726, 838, 874, 878, 884, 900, 903, 954, 960, 1055, 1063, 1104, 1109, 1110, 1111, 1112, 1132, 1136, 1197, 1198, 1202, 1221, 1223, 1229, 1230, 1308, 1340, 1349, 1365, 1371, 1380], "base64": [402, 403, 687, 688, 1007, 1008, 1269, 1270], "base_nam": [313, 349], "base_path": [52, 53, 54], "base_utc_offset": [454, 1063], "baseexcept": 1377, "basepartitioncontext": 53, "basi": [41, 153, 178, 349], "basic": [41, 204, 349, 592, 962, 1380], "basic_chart": [41, 349], "batch": [44, 95, 139, 143, 149, 150, 156, 158, 166, 168, 283, 311, 349, 859, 888, 954], "batch_siz": [38, 48, 143, 148, 149, 150, 158, 166, 168, 311, 349, 954], "batchedcsvread": 149, "baz": [234, 244, 245, 315, 349, 694, 712, 714, 785, 794, 809, 834, 881, 919, 954, 959, 960, 1276, 1296, 1363, 1369, 1372], "bb": [960, 1049, 1349, 1372, 1377], "bbb": [1, 41, 349, 732, 734, 735, 960], "bc": [696, 708, 821, 1278], "bcbc45": 1372, "bea": 13, "bear": 960, "bearer": 187, "bearer_token": 187, "beauti": 13, "becaus": [158, 166, 225, 239, 256, 258, 317, 335, 349, 507, 549, 577, 838, 878, 937, 954, 1108, 1166, 1202, 1349], "becom": [180, 348, 952, 953], "bed3": [41, 349], "been": [5, 31, 41, 185, 206, 330, 349, 508, 586, 604, 637, 838, 932, 1225, 1349], "beetl": [302, 349, 644, 838], "befor": [41, 48, 49, 50, 51, 52, 70, 71, 143, 145, 148, 150, 153, 162, 168, 171, 172, 173, 174, 184, 202, 227, 239, 254, 296, 306, 311, 315, 349, 411, 412, 414, 415, 435, 436, 437, 585, 627, 628, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 691, 731, 738, 766, 814, 815, 838, 878, 880, 883, 919, 954, 1016, 1017, 1019, 1020, 1045, 1046, 1047, 1115, 1218, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1273, 1313, 1320, 1349, 1365], "beforehand": [721, 723, 724, 1303, 1305, 1306], "begin": [13, 41, 349, 493, 495, 496, 692, 722, 838, 1109, 1111, 1112, 1274, 1304, 1349], "behav": [230, 277, 349, 503, 586, 717, 718, 838, 874, 900, 954], "behavior": [47, 51, 160, 167, 221, 222, 230, 253, 254, 349, 385, 508, 552, 554, 691, 785, 794, 838, 867, 868, 882, 883, 951, 954, 990, 1169, 1171, 1273], "behaviour": [11, 56, 221, 222, 230, 277, 296, 349, 684, 692, 693, 696, 707, 708, 745, 817, 838, 867, 868, 874, 900, 913, 954, 1266, 1274, 1275, 1278, 1289, 1290], "behind": 184, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 140, 141, 142, 143, 144, 148, 149, 150, 152, 153, 158, 159, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 210, 226, 255, 296, 304, 306, 311, 318, 349, 352, 353, 437, 438, 445, 517, 586, 634, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 691, 763, 765, 783, 796, 797, 838, 856, 859, 860, 871, 884, 913, 921, 954, 1031, 1047, 1048, 1054, 1132, 1223, 1235, 1238, 1240, 1241, 1273, 1325, 1328, 1333, 1349, 1354, 1380], "belong": [1, 239, 349, 878, 954], "below": [20, 40, 152, 153, 163, 164, 222, 230, 273, 277, 349, 477, 502, 698, 707, 708, 722, 777, 778, 780, 781, 825, 826, 828, 834, 838, 874, 900, 954, 1090, 1280, 1289, 1290, 1304], "best": [258, 335, 349, 586, 838, 1202, 1349], "better": [258, 306, 307, 335, 349, 423, 586, 703, 838, 855, 937, 954, 1028, 1248, 1250, 1285, 1349], "between": [25, 64, 100, 175, 176, 178, 182, 207, 215, 253, 265, 275, 283, 341, 349, 386, 419, 441, 442, 477, 523, 547, 556, 566, 567, 568, 569, 628, 634, 635, 657, 658, 683, 699, 759, 760, 763, 768, 770, 797, 811, 814, 815, 838, 882, 893, 898, 943, 954, 991, 1023, 1030, 1050, 1051, 1090, 1137, 1164, 1173, 1183, 1184, 1185, 1186, 1218, 1223, 1224, 1240, 1265, 1281, 1349, 1366, 1374], "between_ab": [523, 838], "beyond": [52, 729, 1311], "bia": [495, 496, 535, 659, 677, 838, 1111, 1112, 1152, 1241, 1260, 1349], "bias": [535, 677, 838, 1152, 1260, 1349], "big": [149, 405, 1010], "big_fil": 149, "bigidx": 138, "bigqueri": 151, "bigquery_format": 195, "bin": [438, 517, 634, 726, 752, 831, 838, 1048, 1132, 1223, 1308, 1343, 1349, 1354], "bin2int": 405, "bin_count": [517, 838, 1132, 1349], "bin_i": [752, 838], "bin_x": [752, 838], "bin_xor_xi": [752, 838], "binari": [41, 43, 144, 150, 218, 289, 349, 401, 402, 403, 404, 405, 406, 407, 440, 600, 687, 838, 865, 907, 954, 960, 1006, 1007, 1009, 1010, 1011, 1012, 1269, 1368], "binary_str": [752, 838], "bind": 153, "birthdai": 148, "bit": [70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 409, 410, 411, 412, 414, 415, 639, 684, 838, 1014, 1016, 1017, 1019, 1020, 1227, 1266, 1349, 1368, 1372], "bit_and": 1370, "bit_count": 1370, "bit_length": 1370, "bit_or": 1370, "bit_xor": 1370, "bitmap": [225, 349, 1108, 1349], "bitwis": [362, 408, 413, 416, 626, 752, 753, 754, 755, 756, 838, 1013, 1018, 1021, 1349, 1370, 1376], "bitwise_and": [838, 1349], "bitwise_count_on": [838, 1349], "bitwise_count_zero": [838, 1349], "bitwise_leading_on": [838, 1349], "bitwise_leading_zero": [838, 1349], "bitwise_or": [838, 1349], "bitwise_trailing_on": [838, 1349], "bitwise_trailing_zero": [838, 1349], "bitwise_xor": [838, 1349], "bla": [686, 693, 1268, 1275], "black": [258, 349, 401, 402, 403, 404, 407], "blindli": [549, 1166], "block": [21, 63, 238, 314, 349, 828, 860, 877, 901, 918, 927, 928, 937, 954, 1248, 1250, 1349], "blue": [55, 96, 97, 401, 402, 403, 404, 407, 749, 838, 1338, 1349], "bob": [148, 265, 349, 893, 954, 1378], "bodi": [41, 349, 353], "bold": [41, 349], "bom": [38, 48, 349, 954], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 54, 56, 62, 63, 64, 95, 96, 129, 130, 131, 132, 133, 135, 136, 137, 143, 144, 145, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 204, 206, 209, 210, 211, 212, 217, 219, 224, 229, 230, 231, 232, 236, 237, 238, 239, 243, 244, 246, 247, 248, 251, 253, 254, 262, 271, 273, 277, 278, 282, 283, 284, 285, 290, 293, 295, 296, 299, 302, 304, 307, 308, 312, 313, 314, 315, 318, 319, 321, 323, 331, 333, 336, 339, 349, 360, 361, 362, 363, 364, 374, 377, 378, 381, 385, 386, 394, 399, 401, 402, 404, 407, 418, 419, 420, 424, 432, 433, 434, 435, 436, 437, 438, 445, 457, 473, 490, 491, 492, 493, 495, 496, 511, 513, 514, 517, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 540, 541, 545, 549, 552, 554, 556, 565, 572, 577, 578, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 621, 622, 624, 626, 627, 629, 630, 634, 637, 639, 648, 649, 651, 653, 655, 657, 659, 660, 662, 664, 668, 670, 672, 677, 679, 680, 683, 684, 685, 686, 687, 689, 695, 696, 697, 699, 707, 708, 709, 712, 713, 715, 721, 723, 724, 726, 728, 732, 734, 735, 744, 746, 749, 752, 753, 754, 755, 756, 758, 761, 762, 763, 764, 767, 768, 770, 771, 772, 777, 778, 780, 781, 792, 793, 796, 797, 798, 800, 804, 810, 813, 816, 817, 820, 822, 825, 826, 828, 829, 838, 854, 856, 857, 859, 860, 864, 866, 870, 873, 874, 877, 878, 882, 883, 888, 892, 897, 900, 901, 908, 910, 912, 913, 917, 918, 919, 920, 921, 924, 929, 933, 935, 938, 941, 954, 959, 960, 962, 967, 968, 979, 982, 983, 986, 990, 991, 999, 1004, 1006, 1007, 1009, 1012, 1023, 1024, 1026, 1029, 1031, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1054, 1066, 1086, 1104, 1106, 1107, 1109, 1111, 1112, 1119, 1121, 1128, 1129, 1132, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1157, 1158, 1162, 1166, 1169, 1171, 1173, 1182, 1189, 1195, 1202, 1214, 1216, 1219, 1220, 1223, 1225, 1226, 1227, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1247, 1250, 1251, 1255, 1260, 1262, 1265, 1266, 1267, 1268, 1269, 1271, 1277, 1278, 1279, 1281, 1289, 1290, 1291, 1294, 1295, 1297, 1303, 1305, 1306, 1308, 1310, 1325, 1330, 1331, 1335, 1338, 1349, 1358, 1359, 1361, 1367, 1372, 1377], "boolean": [56, 95, 178, 209, 230, 232, 277, 295, 312, 349, 361, 362, 363, 377, 378, 381, 401, 404, 407, 418, 457, 503, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 540, 541, 545, 624, 626, 629, 630, 680, 700, 744, 751, 752, 761, 762, 820, 828, 838, 854, 874, 900, 912, 917, 954, 960, 967, 968, 980, 982, 983, 986, 1006, 1066, 1119, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1157, 1158, 1162, 1216, 1219, 1220, 1250, 1266, 1340, 1349, 1369], "border": 21, "both": [11, 26, 38, 48, 55, 96, 97, 150, 153, 167, 213, 239, 253, 254, 255, 265, 281, 282, 308, 318, 349, 364, 427, 438, 477, 497, 523, 634, 647, 650, 652, 654, 656, 658, 661, 663, 665, 711, 777, 778, 780, 781, 796, 797, 825, 826, 834, 838, 849, 878, 882, 883, 884, 893, 903, 921, 954, 960, 1036, 1090, 1137, 1293, 1331, 1349, 1377, 1378], "boto3": 33, "bottom": [209, 349, 418, 838, 854, 954], "bottom_k": [312, 349, 418, 743, 744, 838, 917, 954, 1334, 1349], "bottom_k_bi": [417, 743, 744, 838], "bound": [111, 148, 149, 225, 239, 349, 385, 427, 523, 552, 554, 577, 583, 748, 758, 777, 778, 780, 781, 796, 797, 825, 826, 838, 878, 954, 990, 1036, 1108, 1137, 1169, 1171, 1200, 1337, 1349, 1367], "boundari": [239, 349, 427, 729, 838, 878, 954, 1036, 1311, 1349], "box": [21, 258, 349], "box_draw": 21, "branch": [62, 63, 129, 859, 860, 870, 897, 910, 954], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 140, 141, 142, 143, 144, 152, 158, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 253, 255, 296, 306, 311, 318, 349, 352, 353, 437, 438, 445, 517, 586, 634, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 763, 765, 796, 797, 838, 859, 860, 882, 884, 913, 921, 954, 1031, 1047, 1048, 1054, 1132, 1223, 1235, 1238, 1240, 1241, 1328, 1333, 1349, 1354], "breakpoint": [438, 517, 634, 838, 1048, 1132, 1223, 1349], "breezah": 162, "breviti": 202, "broadcast": [709, 765, 960, 1291], "broader": 960, "brotli": [47, 51, 349, 954], "brussel": [471, 1084], "bst": [450, 454, 471, 1059, 1063, 1084], "bucket": [40, 152, 163, 164, 167, 349, 472, 485, 517, 838, 1085, 1098, 1132, 1349], "bud": [707, 708, 1289, 1290], "budget": 1358, "buffer": [52, 148, 149, 150, 225, 251, 349, 405, 1010, 1108, 1349], "buffer_s": [251, 349], "bug": [95, 143, 585, 586, 838, 888, 937, 954, 1202, 1349], "build": [61, 131, 960, 1380], "built": 100, "builtin": [146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 218, 349, 440, 838, 865, 954], "bundl": 202, "busi": [445, 763, 1054], "by_alternate_row": 1, "by_dtyp": 960, "by_first_letter_of_column_nam": 57, "by_first_letter_of_column_valu": 57, "by_index": 960, "by_left": [254, 349, 883, 954], "by_nam": 960, "by_pred": [282, 349], "by_right": [254, 349, 883, 954], "bye": 1, "byi": 1372, "bys": [239, 349, 878, 954], "byte": [36, 38, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 144, 146, 147, 148, 149, 154, 155, 156, 157, 158, 161, 162, 165, 166, 218, 225, 289, 349, 405, 422, 423, 440, 600, 696, 697, 698, 702, 703, 711, 722, 838, 865, 907, 954, 1010, 1027, 1028, 1108, 1278, 1279, 1280, 1284, 1285, 1293, 1304, 1349, 1372], "bytesio": [41, 43, 44, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 218, 289, 349, 440, 600, 838, 865, 907, 954], "c": [1, 11, 36, 38, 40, 43, 44, 47, 52, 57, 59, 64, 104, 131, 133, 135, 137, 145, 153, 162, 206, 207, 209, 210, 211, 212, 213, 214, 216, 219, 220, 221, 222, 223, 224, 226, 230, 232, 235, 236, 237, 238, 239, 241, 243, 244, 252, 253, 256, 257, 259, 261, 263, 266, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 282, 285, 286, 287, 294, 295, 296, 297, 298, 300, 301, 304, 305, 306, 307, 308, 309, 312, 316, 317, 318, 320, 321, 323, 328, 331, 332, 333, 336, 337, 339, 342, 343, 349, 353, 358, 360, 361, 363, 381, 418, 438, 477, 514, 523, 544, 556, 586, 593, 610, 611, 625, 627, 631, 634, 672, 713, 721, 744, 747, 754, 756, 757, 759, 760, 761, 764, 765, 767, 768, 769, 770, 772, 773, 775, 785, 786, 787, 790, 791, 794, 795, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 819, 821, 822, 823, 827, 834, 838, 854, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 874, 877, 878, 882, 886, 895, 897, 900, 901, 902, 904, 905, 910, 911, 912, 913, 917, 920, 921, 924, 926, 930, 933, 934, 935, 938, 939, 941, 944, 945, 954, 960, 1030, 1048, 1137, 1161, 1223, 1295, 1303, 1317, 1336, 1349, 1359, 1361, 1362, 1364, 1365, 1366, 1367, 1372, 1377], "c00": 960, "c01": 960, "c02": 960, "c03": 960, "c05": 960, "c1": 398, "c123": 1372, "c2": 398, "c20": 960, "c25": 960, "c3": 398, "c40": 960, "c45": 1372, "c4d79b": [41, 349], "c50": 960, "c567": [41, 349], "c60": 960, "c75": 960, "c80": 960, "c8ae6d2b276": [41, 349], "c93": 960, "c95": 960, "c96": 960, "c97": 960, "c98": 960, "c99": 960, "c_btm_by_a": [418, 838], "c_btm_by_b": [418, 838], "c_by_ca": [418, 744, 838], "c_by_cb": [418, 744, 838], "c_c_c": [817, 913, 954], "c_contigu": [307, 349], "c_max": [627, 838], "c_mean_squar": [328, 930], "c_min": [627, 838], "c_top_by_a": [744, 838], "c_top_by_b": [744, 838], "c_total": 1377, "cach": [55, 62, 63, 96, 97, 124, 129, 154, 162, 165, 167, 171, 172, 173, 174, 186, 641, 642, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 721, 723, 724, 728, 838, 849, 859, 860, 870, 897, 910, 954, 1026, 1229, 1230, 1303, 1305, 1306, 1310, 1349], "cadi": [273, 349], "cafe": [726, 1308], "caf\u00e9": [422, 423, 702, 703, 960, 1027, 1028, 1284, 1285], "calamin": 153, "calcul": [41, 47, 51, 56, 217, 239, 297, 320, 349, 441, 493, 494, 495, 496, 535, 547, 566, 573, 579, 583, 659, 677, 682, 748, 750, 770, 814, 815, 819, 827, 838, 864, 878, 914, 922, 954, 1049, 1050, 1109, 1110, 1111, 1112, 1152, 1164, 1183, 1241, 1260, 1264, 1339, 1349], "calendar": [70, 71, 239, 254, 281, 319, 349, 448, 458, 460, 467, 472, 485, 489, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 782, 825, 826, 838, 878, 883, 903, 954, 1057, 1067, 1072, 1080, 1085, 1098, 1102, 1110, 1349], "calendar_year": [458, 489], "call": [10, 38, 40, 41, 43, 47, 48, 49, 50, 51, 55, 62, 63, 129, 135, 143, 145, 148, 149, 150, 152, 153, 154, 158, 160, 162, 163, 165, 166, 167, 171, 172, 173, 174, 178, 182, 192, 202, 209, 238, 239, 256, 258, 281, 296, 307, 312, 348, 349, 417, 418, 433, 436, 445, 585, 586, 610, 611, 613, 615, 617, 618, 641, 642, 673, 743, 744, 763, 769, 834, 838, 854, 859, 860, 870, 877, 878, 897, 903, 910, 913, 917, 951, 952, 953, 954, 960, 1022, 1054, 1202, 1230, 1256, 1330, 1334, 1349, 1359, 1363, 1377], "callabl": [52, 53, 54, 57, 58, 59, 60, 95, 143, 162, 232, 258, 272, 278, 335, 349, 398, 577, 585, 586, 611, 612, 631, 648, 772, 773, 786, 799, 800, 812, 838, 888, 896, 901, 937, 954, 1003, 1194, 1202, 1235, 1349], "callback": [52, 53, 54, 140, 142], "caller": [95, 151, 265, 349, 577, 888, 893, 937, 954], "cam": [278, 349, 901, 954], "can": [1, 15, 28, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 55, 56, 62, 70, 71, 73, 87, 95, 96, 97, 133, 143, 148, 149, 150, 152, 153, 154, 158, 159, 160, 162, 163, 165, 166, 167, 168, 176, 177, 178, 182, 184, 187, 192, 202, 204, 209, 211, 221, 222, 223, 232, 234, 238, 239, 246, 248, 250, 253, 254, 258, 269, 273, 281, 283, 284, 287, 289, 290, 295, 306, 307, 311, 312, 313, 317, 323, 326, 335, 349, 352, 361, 398, 418, 433, 436, 437, 440, 445, 464, 465, 467, 471, 474, 477, 485, 494, 500, 503, 523, 549, 577, 585, 586, 593, 597, 600, 601, 607, 610, 611, 613, 615, 617, 618, 627, 632, 634, 639, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 670, 672, 677, 680, 685, 694, 701, 707, 708, 709, 716, 717, 718, 721, 732, 744, 761, 763, 776, 779, 786, 788, 792, 793, 796, 800, 817, 828, 834, 837, 838, 849, 854, 855, 859, 860, 865, 867, 868, 870, 878, 882, 883, 903, 905, 907, 908, 910, 912, 913, 917, 924, 927, 928, 954, 960, 962, 1003, 1047, 1054, 1077, 1078, 1080, 1084, 1085, 1087, 1090, 1098, 1110, 1116, 1137, 1166, 1194, 1202, 1207, 1221, 1223, 1227, 1230, 1248, 1250, 1251, 1254, 1260, 1267, 1268, 1276, 1283, 1289, 1290, 1291, 1298, 1299, 1300, 1303, 1328, 1330, 1349, 1354, 1364, 1377], "cancel": [859, 954], "candid": [692, 694, 1274, 1276], "cannot": [1, 47, 48, 49, 50, 51, 62, 63, 106, 109, 148, 149, 153, 154, 156, 158, 159, 160, 167, 184, 202, 254, 258, 284, 285, 307, 326, 335, 349, 402, 477, 497, 565, 586, 601, 668, 687, 713, 734, 800, 838, 859, 860, 870, 883, 897, 910, 928, 929, 937, 954, 960, 1007, 1090, 1182, 1202, 1247, 1269, 1295, 1330, 1349], "capabl": [1, 41, 349], "capac": [225, 293, 349, 1108, 1255, 1349], "capit": [729, 1311], "captur": [692, 694, 707, 708, 1274, 1276, 1289, 1290], "car": [278, 302, 349, 644, 838, 901, 954], "cardin": [208, 349, 365, 757, 838, 853, 954, 970, 1349], "care": [41, 290, 349, 586, 627, 670, 838, 908, 954, 1251, 1349], "cars_revers": [644, 838], "cartesian": [253, 349, 882, 954], "case": [41, 55, 56, 63, 95, 104, 130, 132, 133, 134, 136, 143, 145, 150, 157, 158, 166, 167, 184, 227, 239, 251, 258, 273, 281, 283, 284, 303, 306, 307, 349, 446, 494, 585, 597, 598, 611, 627, 647, 684, 685, 693, 695, 696, 697, 707, 708, 709, 729, 838, 860, 878, 900, 903, 954, 960, 1055, 1110, 1115, 1266, 1267, 1275, 1277, 1278, 1279, 1289, 1290, 1291, 1311, 1328, 1349], "cast": [1, 40, 58, 59, 130, 132, 133, 136, 145, 171, 172, 173, 174, 232, 239, 272, 281, 306, 307, 311, 323, 349, 364, 435, 436, 447, 474, 477, 488, 626, 631, 632, 639, 641, 647, 700, 701, 731, 738, 742, 766, 767, 818, 838, 878, 896, 903, 924, 954, 960, 1031, 1045, 1046, 1056, 1087, 1090, 1101, 1221, 1227, 1282, 1283, 1313, 1320, 1326, 1330, 1332, 1333, 1349, 1370], "cast_str_to_int": [272, 349, 896, 954], "cast_to_supertyp": [145, 838], "cat": [27, 55, 96, 97, 438, 634, 684, 686, 727, 730, 742, 767, 833, 838, 960, 1048, 1132, 1223, 1266, 1268, 1309, 1312, 1345, 1349], "catalog": [0, 850], "catalog_nam": [188, 190, 191, 192], "cataloginfo": [189, 200], "categor": [40, 55, 74, 96, 97, 99, 171, 172, 173, 174, 253, 304, 349, 420, 421, 422, 423, 424, 438, 634, 641, 642, 742, 838, 960, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1048, 1223, 1229, 1230, 1332, 1349], "categori": [41, 55, 74, 97, 304, 349, 421, 438, 517, 634, 838, 1025, 1048, 1132, 1223, 1325, 1349], "categorical_as_str": [171, 172, 173, 174], "categoricalord": 68, "categoricaltyp": [301, 349], "caus": [112, 121, 131, 148, 149, 150, 162, 206, 227, 307, 349, 585, 838, 1115, 1330, 1349], "cba": 718, "cbrt": [838, 1349, 1370], "cbrt_a": 1371, "cc": [497, 784, 838, 960, 1049, 1349, 1372], "ccc": [1, 41, 349, 732, 734, 735, 960, 1372], "ccy": 1380, "cd": [708, 732, 734, 735, 960], "cd34": 708, "cdatainterfac": [131, 205, 963], "cde": [960, 1372], "cdt": [472, 485, 1085, 1098], "ceil": [58, 838, 1349, 1370], "ceil_a": 1371, "cell": [16, 17, 41, 273, 349], "cent": [448, 1289], "center": [16, 17, 41, 349, 493, 495, 496, 648, 649, 651, 653, 655, 657, 660, 662, 664, 838, 1109, 1111, 1112, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1349], "central": [163, 164, 202, 535, 677, 838, 1152, 1260, 1349], "centuri": 1373, "certain": [48, 49, 50, 51, 52, 63, 244, 319, 349, 717, 718, 834, 859, 860, 897, 954, 1349], "certainli": [721, 723, 724, 1303, 1305, 1306], "cest": [471, 1084], "cet": [471, 1084], "cfg": [2, 4, 18, 202], "cfg_ascii_fram": 202, "cfg_markdown": 202, "cfg_verbos": 202, "cfoo": [926, 954], "chain": [610, 611, 613, 615, 617, 618, 828], "chanc": [175, 178, 182, 1380], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 63, 72, 78, 131, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 158, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 255, 296, 306, 311, 318, 325, 349, 352, 353, 437, 438, 441, 445, 477, 517, 586, 627, 628, 634, 641, 646, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 763, 765, 796, 797, 838, 859, 860, 884, 913, 921, 927, 954, 960, 1030, 1031, 1047, 1048, 1054, 1090, 1132, 1218, 1223, 1229, 1234, 1235, 1238, 1240, 1241, 1255, 1328, 1333, 1349, 1354], "changes_length": [145, 838], "char": [28, 148, 162, 693, 1275], "char_length": 1372, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 48, 98, 147, 148, 149, 151, 162, 349, 422, 423, 467, 690, 691, 693, 698, 702, 703, 705, 706, 707, 708, 711, 712, 713, 716, 717, 718, 719, 720, 722, 729, 731, 897, 954, 960, 1027, 1028, 1080, 1272, 1273, 1275, 1280, 1284, 1285, 1287, 1288, 1289, 1290, 1293, 1294, 1295, 1298, 1299, 1300, 1304, 1311, 1313, 1372], "character_length": 1372, "characterist": [178, 182], "charli": [148, 1378], "chart": [41, 349, 352, 897, 954, 1349, 1354], "cheap": [211, 212, 288, 324, 349, 857, 858, 906, 925, 954, 1035, 1037, 1349], "cheaper": [552, 1169], "check": [40, 71, 106, 148, 149, 162, 171, 172, 173, 174, 186, 224, 249, 253, 254, 349, 381, 401, 404, 407, 420, 424, 514, 523, 527, 545, 684, 689, 696, 715, 838, 882, 883, 888, 954, 986, 1006, 1009, 1012, 1024, 1029, 1107, 1128, 1129, 1139, 1142, 1149, 1151, 1162, 1266, 1271, 1278, 1297, 1349], "check_column_ord": [171, 172], "check_dtyp": [171, 172, 173, 174, 959, 1107, 1349], "check_exact": [171, 172, 173, 174], "check_nam": [173, 174, 1107, 1349], "check_ord": [173, 174], "check_row_ord": [171, 172], "check_sorted": [254, 349, 883, 954], "choos": [47, 49, 51, 239, 273, 349, 477, 878, 954, 1090], "chrono": [38, 48, 100, 349, 474, 477, 721, 723, 724, 728, 954, 1087, 1090, 1303, 1305, 1306, 1310, 1372, 1373], "chunk": [15, 51, 139, 148, 149, 152, 158, 160, 162, 163, 165, 166, 167, 178, 182, 227, 252, 268, 307, 349, 364, 638, 838, 954, 969, 1034, 1115, 1126, 1208, 1226, 1324, 1330, 1349], "chunk_length": 1349, "chunkedarrai": [130, 268, 349], "citi": [707, 708], "clang": 170, "clariti": [282, 349], "class": [1, 18, 32, 33, 34, 35, 52, 53, 54, 55, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 115, 117, 140, 141, 142, 175, 176, 187, 193, 194, 196, 197, 284, 289, 349, 600, 796, 825, 834, 838, 844, 850, 862, 869, 904, 923, 929, 954, 959, 1329, 1349, 1353, 1361, 1377], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 218, 349, 440, 508, 838, 865, 954, 1359, 1377], "claus": [850, 1367, 1376], "clean": [721, 723, 724, 1303, 1305, 1306], "cleaner": 202, "cleanli": [11, 237, 349, 1377], "clear": [55, 96, 212, 349, 858, 954, 1037, 1349], "clearer": 133, "clickhous": 151, "client": [33, 150, 187], "clip": [838, 1349], "clipboard": [37, 147, 349, 850], "clone": [132, 133, 134, 135, 136, 211, 307, 349, 857, 954, 1035, 1349], "close": [41, 48, 49, 50, 51, 53, 150, 239, 281, 296, 349, 438, 523, 582, 634, 647, 650, 652, 654, 656, 658, 661, 663, 665, 677, 777, 778, 780, 781, 796, 797, 825, 826, 838, 878, 903, 913, 954, 1048, 1137, 1223, 1260, 1349], "closedinterv": [239, 281, 349, 523, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 796, 797, 825, 826, 838, 878, 903, 954, 1137, 1349], "closest": [130, 254, 349, 883, 954, 1366, 1371], "closur": [650, 652, 661, 663, 665, 838], "cloud": [35, 38, 40, 43, 47, 48, 49, 50, 51, 95, 150, 152, 158, 160, 162, 163, 164, 165, 166, 167, 168, 192, 349, 850, 899, 954], "cloudi": [707, 708], "cloudpickl": 170, "cluster": 167, "cluster_with_column": [62, 63, 129, 859, 860, 870, 897, 910, 954], "co": [693, 838, 1275, 1349, 1370], "coalesc": [64, 253, 254, 318, 349, 521, 695, 697, 721, 838, 882, 883, 921, 954, 1279, 1303, 1365, 1370], "code": [202, 213, 253, 349, 401, 402, 403, 404, 407, 440, 586, 670, 838, 865, 882, 886, 954, 1251, 1349, 1359], "codebas": 202, "coeffici": [215, 349, 677, 838, 1260, 1349], "coerc": [64, 640, 838, 1349], "coercion": [48, 49, 50, 51, 62, 63, 129, 640, 838, 859, 860, 870, 897, 910, 954, 1349], "col": [1, 13, 38, 41, 48, 52, 56, 57, 58, 59, 134, 136, 162, 176, 178, 230, 238, 239, 247, 249, 253, 254, 255, 258, 269, 272, 273, 277, 281, 282, 287, 295, 306, 311, 315, 317, 323, 328, 349, 353, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 413, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 516, 517, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 531, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 609, 610, 612, 614, 616, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 757, 761, 762, 764, 765, 766, 767, 769, 771, 774, 776, 777, 779, 780, 782, 786, 787, 788, 789, 790, 791, 801, 803, 805, 806, 808, 811, 812, 816, 817, 819, 821, 823, 824, 827, 828, 838, 874, 877, 878, 880, 882, 883, 884, 896, 900, 903, 905, 912, 913, 919, 924, 926, 930, 954, 960, 1080, 1084, 1166, 1248, 1250, 1279, 1283, 1303, 1349, 1380], "col0": [178, 1380], "col1": [178, 273, 349, 954, 1380], "col2": [178, 273, 349, 954, 1380], "col3": [273, 349, 1380], "col4": 1380, "col_nam": [272, 349, 586, 828, 838, 896, 954], "cole": 144, "coli": [41, 349, 617, 618, 960, 1380], "collaps": [48, 49, 50, 51, 62, 63, 129, 859, 860, 870, 897, 910, 954], "collapse_join": [48, 49, 50, 51, 62, 63, 129, 859, 860, 870, 897, 910, 954], "collect": [10, 48, 49, 50, 51, 59, 62, 63, 95, 129, 162, 163, 164, 168, 178, 179, 182, 221, 222, 256, 273, 296, 301, 314, 315, 349, 497, 527, 566, 567, 568, 569, 586, 766, 784, 788, 816, 817, 820, 838, 853, 854, 856, 857, 860, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 905, 907, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 927, 928, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 951, 953, 954, 960, 1142, 1183, 1184, 1185, 1186, 1349, 1359, 1360, 1361, 1364, 1365, 1377, 1378, 1380], "collect_al": [59, 63, 129, 859, 860, 954], "collect_all_async": [860, 954], "collect_async": [63, 954], "collect_schema": [59, 256, 349, 862, 869, 896, 904, 923, 954], "collis": 64, "colnam": [25, 41, 162, 349], "color": [55, 96, 97, 335, 349, 352, 401, 402, 403, 404, 407, 687, 749, 838, 937, 1006, 1007, 1008, 1009, 1012, 1269, 1338, 1349, 1372], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 51, 52, 54, 55, 56, 57, 64, 71, 87, 97, 101, 105, 130, 132, 133, 134, 135, 136, 137, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 178, 194, 197, 207, 209, 210, 213, 215, 216, 219, 220, 221, 222, 223, 226, 230, 231, 234, 235, 237, 238, 239, 243, 244, 249, 250, 251, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 290, 295, 297, 298, 299, 302, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 328, 334, 349, 352, 353, 360, 361, 363, 374, 383, 392, 394, 397, 405, 418, 427, 431, 432, 438, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 466, 468, 469, 470, 473, 474, 475, 477, 486, 487, 489, 497, 499, 503, 505, 517, 522, 523, 538, 544, 550, 552, 572, 576, 577, 586, 592, 593, 595, 597, 599, 610, 612, 613, 614, 615, 616, 617, 618, 627, 634, 638, 640, 641, 642, 643, 645, 646, 647, 650, 652, 654, 656, 658, 661, 663, 665, 672, 673, 679, 680, 683, 691, 696, 698, 699, 709, 713, 714, 721, 722, 723, 724, 725, 726, 728, 733, 736, 744, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 838, 854, 856, 863, 866, 867, 868, 869, 871, 874, 877, 878, 882, 883, 884, 888, 889, 890, 891, 892, 894, 895, 898, 900, 901, 903, 904, 905, 906, 908, 912, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 936, 937, 954, 959, 960, 967, 968, 988, 997, 999, 1002, 1010, 1026, 1030, 1036, 1041, 1042, 1048, 1057, 1060, 1061, 1062, 1065, 1066, 1067, 1071, 1072, 1073, 1075, 1076, 1079, 1081, 1082, 1086, 1087, 1088, 1090, 1099, 1100, 1102, 1114, 1132, 1136, 1161, 1167, 1169, 1189, 1193, 1223, 1230, 1231, 1234, 1254, 1265, 1273, 1278, 1281, 1295, 1296, 1303, 1305, 1306, 1307, 1308, 1310, 1316, 1319, 1325, 1326, 1338, 1349, 1365, 1367, 1369, 1371, 1372, 1374, 1375, 1378, 1379, 1380], "column_0": [1, 258, 313, 349, 899, 954], "column_1": [258, 313, 349, 1374], "column_2": [313, 349, 1374], "column_abc": 16, "column_format": [41, 349], "column_nam": [278, 313, 349, 901, 954], "column_tot": [41, 349], "column_width": [41, 349], "column_x": [148, 149, 153, 159, 162], "column_xyz": 16, "columnar": [134, 136, 251, 283, 349], "columnformatdict": [41, 349], "columninfo": [197, 200], "columnnameorselector": [210, 219, 221, 222, 264, 271, 273, 284, 304, 314, 315, 316, 317, 349, 856, 866, 867, 868, 892, 918, 919, 920, 954], "columnnotfounderror": [234, 235, 349], "columntotalsdefinit": [41, 349], "columnwidthsdefinit": [41, 349], "colx": [41, 349, 617, 618, 960, 1364, 1380], "colz": [960, 1380], "com": [33, 41, 151, 349, 493, 495, 496, 692, 693, 694, 838, 1109, 1111, 1112, 1274, 1275, 1276, 1349], "combin": [47, 51, 62, 63, 64, 129, 230, 239, 240, 254, 273, 277, 281, 319, 349, 362, 375, 485, 494, 507, 601, 626, 642, 647, 716, 717, 718, 777, 778, 780, 781, 825, 826, 828, 838, 859, 860, 870, 878, 883, 897, 900, 903, 910, 954, 1085, 1098, 1110, 1230, 1298, 1299, 1300, 1349, 1365, 1378], "come": [124, 151, 239, 314, 316, 349, 445, 464, 465, 535, 577, 763, 838, 878, 918, 920, 954, 1054, 1077, 1078, 1152, 1349], "comm_subexpr_elim": [62, 63, 129, 859, 860, 870, 897, 910, 954], "comm_subplan_elim": [62, 63, 129, 859, 860, 870, 897, 910, 954], "comma": [37, 38, 148, 149, 162, 349], "comment": [148, 149, 162, 193, 194, 196, 197], "comment_prefix": [148, 149, 162], "common": [56, 62, 63, 64, 104, 129, 148, 149, 162, 318, 349, 611, 844, 859, 860, 870, 897, 910, 921, 954, 1353], "compact": 1375, "compani": 151, "compar": [167, 171, 172, 173, 174, 224, 230, 277, 349, 491, 492, 511, 513, 523, 537, 584, 621, 622, 838, 874, 900, 954, 1030, 1106, 1107, 1214, 1349], "comparison": [168, 230, 277, 349, 874, 900, 954], "compat": [21, 41, 43, 44, 47, 49, 51, 99, 301, 349, 684, 686, 692, 693, 694, 696, 707, 708, 954, 960, 1090, 1266, 1268, 1274, 1275, 1276, 1278, 1289, 1290, 1324, 1349, 1359, 1372, 1373, 1377], "compat_level": [43, 44, 49, 301, 349, 954, 1324, 1349], "compatibleframetyp": [1360, 1362, 1377], "compatlevel": [43, 44, 49, 301, 349, 954, 1324, 1349], "competit": [637, 838, 1225, 1349], "compil": [61, 379, 380, 542, 543, 958, 984, 985, 1159, 1160], "complement": 960, "complet": [148, 150, 162, 1378], "complex": [179, 417, 418, 437, 743, 744, 838, 1022, 1047, 1334, 1349], "compliant": [41, 349, 477, 1090], "compon": [449, 473, 477, 721, 724, 782, 1058, 1086, 1090, 1303, 1306], "compos": 1378, "composit": [87, 1380], "compound": [137, 284, 349, 960], "comprehens": 176, "compress": [36, 40, 43, 44, 47, 49, 51, 349, 645, 838, 954, 1233, 1349], "compression_level": [47, 51, 349, 954], "comput": [62, 64, 102, 225, 238, 254, 273, 308, 314, 328, 341, 349, 357, 366, 367, 368, 369, 370, 371, 388, 389, 390, 395, 396, 400, 425, 428, 429, 430, 433, 434, 435, 436, 442, 490, 493, 494, 495, 496, 498, 535, 559, 560, 561, 562, 566, 567, 568, 569, 573, 579, 580, 581, 582, 607, 627, 628, 633, 637, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 674, 675, 676, 677, 681, 740, 741, 749, 754, 756, 759, 760, 761, 768, 770, 783, 804, 814, 815, 828, 838, 859, 877, 880, 882, 883, 899, 918, 926, 930, 943, 954, 965, 971, 972, 973, 974, 975, 976, 993, 994, 995, 1000, 1001, 1005, 1032, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1051, 1104, 1108, 1109, 1110, 1111, 1112, 1113, 1152, 1176, 1177, 1178, 1179, 1183, 1184, 1185, 1186, 1190, 1196, 1197, 1198, 1199, 1207, 1218, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1257, 1258, 1259, 1260, 1263, 1322, 1323, 1331, 1338, 1349, 1371, 1374], "computecontext": [899, 954], "computeerror": [597, 726, 1308], "concat": [55, 96, 97, 105, 149, 254, 349, 883, 926, 954, 1034, 1126, 1208, 1226, 1349, 1370], "concat_list": [549, 783], "concat_w": [296, 349, 817, 913, 954, 1370, 1377], "concaten": [55, 64, 96, 97, 232, 272, 349, 631, 683, 699, 765, 766, 767, 838, 896, 954, 1034, 1208, 1265, 1281, 1349, 1372], "concatmethod": 64, "conclus": [134, 136, 349, 954], "concret": [178, 182], "condit": [41, 222, 230, 255, 277, 282, 349, 420, 424, 503, 523, 689, 715, 762, 786, 828, 838, 874, 884, 900, 954, 1137, 1349, 1365, 1370, 1376], "conditional_format": [41, 349], "conditionalformatdict": [41, 349], "config": [0, 56, 217, 287, 306, 323, 349, 685, 695, 697, 709, 777, 778, 780, 781, 782, 850, 859, 864, 905, 924, 954, 1267, 1279, 1291], "configur": [5, 33, 40, 152, 163, 164, 202, 349, 352, 851, 859, 870, 897, 910, 929, 954, 1349, 1354], "configure_axisx": [349, 352, 1349, 1354], "configure_point": [349, 352, 1349, 1354], "conflat": [523, 838], "conform": 1380, "confus": [104, 361, 530, 531, 709, 838], "conjunct": [41, 96, 150, 153, 159, 176, 349, 792, 795, 954], "conn": 150, "connect": [38, 39, 43, 47, 48, 49, 50, 51, 74, 148, 150, 151, 154, 156, 158, 160, 162, 165, 166, 167, 168, 192, 349, 851, 954], "connectionorcursor": [39, 150, 349], "connector": 151, "connectorx": [150, 151, 170], "consecut": [229, 349, 502, 683, 699, 707, 838, 873, 954, 1118, 1265, 1281, 1290, 1349], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 96, 97, 140, 141, 142, 143, 144, 148, 149, 150, 152, 158, 160, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 209, 221, 222, 224, 250, 255, 258, 264, 283, 296, 306, 311, 312, 314, 316, 318, 349, 352, 353, 418, 427, 437, 438, 445, 507, 517, 585, 586, 593, 609, 610, 613, 615, 617, 618, 634, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 744, 763, 765, 772, 786, 796, 797, 834, 838, 854, 859, 860, 867, 868, 870, 884, 892, 897, 910, 913, 917, 918, 920, 921, 937, 954, 960, 1026, 1031, 1036, 1047, 1048, 1054, 1107, 1132, 1202, 1223, 1235, 1238, 1240, 1241, 1248, 1250, 1328, 1333, 1349, 1354, 1359], "consider": 144, "consist": [238, 271, 307, 349, 721, 777, 778, 796, 877, 954, 960, 969, 1115, 1303, 1330, 1349], "consola": [41, 349], "const": 11, "constant": [225, 281, 349, 446, 494, 500, 797, 838, 903, 954, 1055, 1108, 1110, 1116, 1349], "constrain": [56, 162, 221, 222, 349, 867, 868, 954, 960], "constraint": [230, 277, 349, 503, 610, 611, 613, 615, 617, 618, 828, 838, 874, 900, 954, 960, 1379], "construct": [55, 96, 97, 104, 130, 132, 133, 134, 135, 136, 137, 144, 150, 349, 508, 810, 813, 829, 834, 838, 865, 954, 1026, 1349, 1364], "construct_categor": 55, "constructor": [144, 153, 182], "contain": [5, 38, 39, 40, 41, 48, 52, 53, 54, 56, 61, 100, 132, 135, 137, 145, 150, 151, 152, 160, 163, 164, 167, 177, 178, 180, 182, 209, 214, 221, 222, 223, 239, 247, 252, 269, 306, 307, 311, 312, 318, 330, 349, 361, 363, 386, 404, 407, 420, 424, 440, 514, 527, 556, 586, 683, 685, 689, 692, 694, 696, 699, 701, 714, 715, 731, 753, 754, 755, 756, 767, 800, 838, 854, 862, 865, 867, 868, 869, 878, 897, 917, 921, 932, 954, 960, 967, 968, 991, 1024, 1029, 1128, 1129, 1173, 1208, 1265, 1267, 1271, 1274, 1276, 1278, 1281, 1283, 1296, 1297, 1313, 1324, 1330, 1349, 1367], "contains_with_expr": 401, "contains_with_lit": 401, "content": [14, 48, 49, 50, 51, 673, 838, 954, 958, 1256, 1349], "context": [55, 96, 97, 140, 142, 184, 269, 296, 349, 359, 503, 549, 585, 586, 597, 679, 680, 749, 769, 785, 788, 794, 795, 800, 809, 813, 816, 837, 838, 849, 850, 899, 913, 926, 954, 1166, 1338, 1349, 1364, 1377, 1379], "contigu": [64, 130, 131, 135, 148, 149, 152, 154, 156, 158, 160, 162, 163, 165, 166, 167, 276, 307, 349], "continu": [438, 634, 677, 838, 1048, 1223, 1260, 1349, 1366], "contrast": 782, "control": [11, 12, 41, 63, 64, 153, 176, 178, 295, 296, 306, 349, 642, 680, 817, 838, 859, 860, 870, 897, 910, 912, 913, 929, 951, 954, 1230, 1328, 1349, 1361, 1364, 1377], "conveni": [227, 311, 349, 946, 969, 1115, 1349, 1359], "convers": [131, 206, 251, 252, 283, 284, 303, 307, 308, 349, 450, 721, 723, 724, 728, 850, 1059, 1303, 1305, 1306, 1310, 1330, 1331, 1349, 1375, 1377], "convert": [40, 100, 131, 135, 145, 152, 153, 159, 163, 206, 284, 302, 303, 304, 305, 306, 307, 308, 310, 311, 349, 397, 398, 439, 450, 474, 477, 576, 577, 585, 611, 636, 694, 721, 723, 724, 725, 726, 728, 733, 838, 954, 1002, 1003, 1030, 1059, 1087, 1090, 1193, 1194, 1276, 1303, 1305, 1306, 1307, 1308, 1310, 1316, 1319, 1327, 1328, 1329, 1330, 1331, 1333, 1349, 1372, 1374, 1375, 1377], "convert_time_zon": [471, 1084], "coo": [278, 349, 901, 954], "coord": 736, "coordin": [41, 349], "copi": [37, 130, 131, 147, 204, 206, 211, 212, 252, 301, 307, 308, 323, 349, 500, 838, 857, 858, 924, 954, 962, 1035, 1037, 1116, 1324, 1329, 1330, 1331, 1349, 1377], "corasick": [685, 695, 697, 709, 1267, 1277, 1279, 1291], "core": [1, 255, 349, 884, 954, 1377, 1380], "cores_right": [255, 349, 884, 954], "corner": [21, 41, 137, 349], "corr": 349, "corrcoef": [215, 349], "correct": [95, 145, 153, 159, 495, 496, 535, 577, 659, 677, 838, 888, 954, 1111, 1112, 1152, 1241, 1260, 1349], "correctli": [41, 349, 585, 838], "correl": [215, 349, 768, 814], "correlationmethod": 768, "correspond": [239, 254, 281, 307, 319, 349, 418, 458, 467, 472, 485, 586, 637, 647, 650, 652, 654, 656, 658, 661, 663, 665, 744, 777, 778, 780, 781, 825, 826, 838, 859, 878, 883, 903, 954, 1067, 1080, 1085, 1098, 1225, 1349, 1366], "cosd": 1370, "cosh": [838, 1349], "cosin": [366, 367, 428, 429, 585, 838, 971, 972, 1038, 1039, 1349, 1374], "cost": [255, 284, 349, 707, 884, 954, 1290], "cost_usd": [707, 1290], "cot": [838, 1349, 1370], "cotang": [430, 838, 1040, 1349, 1374], "cotd": 1370, "could": [40, 93, 102, 349, 674, 772, 782, 786, 838, 856, 864, 954, 1257, 1349], "count": [41, 168, 208, 217, 239, 269, 270, 281, 313, 319, 325, 340, 349, 365, 382, 391, 432, 445, 494, 517, 538, 546, 558, 563, 586, 609, 625, 637, 647, 650, 652, 654, 656, 658, 661, 663, 665, 686, 747, 749, 757, 763, 771, 795, 808, 838, 853, 864, 878, 895, 903, 927, 942, 954, 960, 970, 987, 996, 1042, 1049, 1054, 1110, 1132, 1155, 1163, 1175, 1180, 1209, 1217, 1268, 1336, 1338, 1349, 1354, 1358, 1370], "count_digit": 686, "count_num": [41, 349], "counterpart": 144, "countri": [254, 349, 446, 883, 954, 1055], "country_holidai": [445, 763, 1054], "covari": [145, 770, 815, 838], "cover": 11, "cow": [705, 706, 1287, 1288], "cpu": [148, 149, 170, 306, 349, 929, 1328, 1349], "crab": [684, 696, 1266, 1278], "crate": [38, 48, 100, 349, 684, 686, 692, 693, 694, 696, 707, 708, 721, 723, 724, 728, 954, 960, 1266, 1268, 1274, 1275, 1276, 1278, 1289, 1290, 1303, 1305, 1306, 1310], "creat": [39, 41, 48, 49, 50, 51, 52, 54, 55, 97, 130, 134, 136, 148, 149, 150, 151, 154, 156, 160, 163, 164, 176, 177, 178, 179, 180, 181, 182, 183, 202, 211, 212, 239, 270, 273, 281, 306, 307, 319, 323, 326, 349, 352, 353, 449, 472, 485, 494, 517, 577, 585, 638, 647, 650, 652, 654, 656, 658, 661, 663, 665, 766, 776, 777, 778, 779, 780, 781, 782, 796, 824, 825, 826, 834, 838, 857, 858, 864, 870, 878, 903, 924, 928, 954, 958, 959, 1035, 1037, 1048, 1058, 1085, 1098, 1110, 1132, 1215, 1223, 1226, 1328, 1330, 1349, 1354, 1376, 1377, 1380], "create_async_engin": 150, "create_engin": [39, 349], "created_at": [193, 196, 197], "created_bi": [193, 196, 197], "creation": [140, 142, 149], "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 850, 954], "credential_provid": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 954], "credentialproviderfunct": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 954], "cross": [253, 349, 882, 954, 1365], "crustacean": [696, 1278], "cst": [472, 485, 1085, 1098], "csv": [37, 38, 48, 49, 50, 51, 52, 53, 54, 147, 148, 149, 153, 154, 162, 195, 349, 850, 954], "csvencod": [148, 149, 162], "csvquotestyl": [38, 48, 349, 954], "ctx": [52, 53, 54, 1358, 1360, 1361, 1362, 1363, 1364, 1377], "cube": [1, 60, 425, 632, 838, 1032, 1349, 1371], "cuda": 929, "cum_count": [838, 1349], "cum_count_revers": [432, 838], "cum_max": [838, 1349], "cum_max_all_fil": [433, 838], "cum_max_revers": [433, 838], "cum_min": [838, 1349], "cum_min_revers": [434, 838], "cum_prod": [358, 838, 1349], "cum_prod_revers": [435, 838], "cum_reduc": 772, "cum_sum": [520, 627, 737, 775, 838, 880, 954, 1151, 1349], "cum_sum_revers": [436, 838], "cumsum_horizont": 774, "cumul": [432, 433, 434, 435, 436, 771, 772, 773, 774, 775, 838, 1042, 1043, 1044, 1045, 1046, 1349], "cumulative_ev": [838, 1349], "cumulative_sal": [627, 838], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 137, 140, 141, 142, 150, 151, 158, 160, 162, 165, 166, 167, 175, 176, 178, 179, 180, 181, 182, 183, 192, 211, 212, 219, 253, 254, 278, 296, 306, 311, 349, 352, 353, 454, 577, 628, 838, 857, 858, 866, 882, 883, 901, 913, 929, 954, 960, 1035, 1037, 1055, 1063, 1218, 1328, 1333, 1349, 1354, 1361, 1377], "cursor": [39, 150, 349], "custom": [1, 28, 40, 41, 57, 58, 59, 60, 103, 144, 181, 183, 217, 258, 273, 335, 349, 398, 445, 474, 477, 577, 585, 586, 648, 749, 763, 799, 800, 838, 864, 888, 937, 954, 1003, 1054, 1087, 1090, 1194, 1202, 1235, 1338, 1349, 1380], "customis": [41, 349], "cut": [634, 838, 1223, 1349], "cxx": 1372, "cypher": 150, "d": [29, 36, 38, 40, 41, 43, 44, 47, 133, 168, 207, 230, 237, 239, 240, 241, 244, 253, 257, 277, 300, 301, 311, 317, 321, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 358, 360, 432, 455, 474, 477, 523, 592, 631, 672, 686, 693, 707, 708, 713, 721, 723, 724, 764, 765, 782, 788, 817, 838, 874, 878, 882, 900, 913, 933, 935, 938, 939, 940, 941, 942, 943, 944, 954, 960, 1030, 1042, 1064, 1087, 1090, 1137, 1161, 1268, 1275, 1289, 1290, 1295, 1303, 1305, 1306, 1317, 1349, 1365, 1367, 1369, 1372, 1373], "d1": [41, 349, 449], "d2": 449, "d3": 449, "d789": [41, 349], "d_4": [713, 1295], "dai": [70, 71, 88, 239, 252, 254, 281, 319, 349, 352, 445, 464, 465, 467, 468, 470, 472, 474, 477, 478, 485, 487, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 763, 776, 777, 778, 779, 780, 781, 782, 825, 826, 838, 878, 883, 903, 954, 960, 1054, 1077, 1078, 1080, 1081, 1083, 1085, 1087, 1090, 1091, 1098, 1100, 1110, 1349, 1373], "dark": 1358, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 64, 69, 70, 71, 73, 84, 85, 87, 88, 97, 100, 104, 106, 109, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 200, 204, 206, 212, 213, 223, 225, 226, 227, 237, 238, 239, 251, 252, 253, 256, 258, 271, 272, 276, 282, 283, 284, 286, 290, 293, 301, 306, 307, 308, 311, 313, 323, 327, 347, 349, 353, 361, 362, 363, 366, 367, 368, 369, 370, 371, 374, 377, 378, 379, 380, 381, 383, 386, 388, 389, 390, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 419, 421, 422, 423, 427, 428, 429, 430, 431, 438, 439, 440, 445, 446, 447, 448, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 499, 509, 511, 512, 513, 517, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 537, 538, 542, 543, 545, 550, 556, 558, 565, 576, 578, 584, 586, 621, 622, 626, 627, 634, 636, 637, 640, 641, 642, 643, 645, 646, 650, 652, 654, 656, 658, 661, 663, 665, 666, 668, 670, 675, 676, 677, 683, 686, 687, 688, 691, 692, 693, 694, 698, 699, 700, 701, 702, 703, 711, 712, 713, 714, 721, 722, 723, 724, 726, 728, 731, 740, 741, 742, 745, 746, 749, 752, 758, 766, 769, 776, 777, 778, 779, 780, 781, 782, 792, 793, 795, 796, 797, 798, 799, 800, 810, 813, 824, 825, 826, 829, 834, 838, 850, 857, 858, 865, 869, 871, 877, 878, 904, 908, 924, 954, 959, 962, 967, 968, 980, 982, 983, 984, 985, 986, 988, 990, 991, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1023, 1025, 1027, 1028, 1035, 1036, 1037, 1048, 1049, 1054, 1055, 1056, 1057, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1086, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1107, 1108, 1110, 1114, 1115, 1132, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1157, 1158, 1159, 1160, 1162, 1167, 1173, 1175, 1182, 1193, 1195, 1202, 1216, 1223, 1225, 1229, 1230, 1231, 1233, 1234, 1245, 1247, 1255, 1260, 1265, 1266, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1280, 1281, 1282, 1283, 1284, 1285, 1293, 1294, 1295, 1296, 1303, 1304, 1305, 1306, 1308, 1310, 1313, 1324, 1329, 1330, 1331, 1332, 1335, 1348, 1349, 1358, 1365, 1372, 1377, 1379], "data_bar": [41, 349], "data_bar_2010": [41, 349], "data_label": [41, 349], "data_page_s": [47, 51, 349, 954], "data_source_format": 197, "databas": [39, 128, 150, 151, 349, 850], "databrick": 187, "databricks_format": 195, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 83, 95, 101, 104, 105, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 171, 172, 175, 176, 202, 347, 348, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 413, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 834, 838, 850, 859, 860, 862, 864, 866, 869, 871, 875, 878, 882, 883, 884, 885, 886, 888, 892, 893, 897, 902, 904, 911, 913, 918, 919, 920, 921, 923, 926, 930, 931, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 954, 959, 960, 1048, 1049, 1084, 1110, 1132, 1202, 1223, 1279, 1283, 1295, 1296, 1319, 1325, 1326, 1338, 1349, 1358, 1359, 1360, 1361, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1377, 1380], "dataframeplot": [349, 352], "dataload": [311, 349], "datapoint": [239, 349, 878, 954], "dataset": [15, 47, 74, 148, 149, 152, 153, 159, 162, 163, 168, 253, 311, 349, 535, 838, 850, 882, 888, 954, 1152, 1349, 1378], "datasourceformat": [197, 200], "datat": [41, 349], "datatyp": [38, 48, 130, 132, 133, 134, 136, 138, 155, 157, 158, 160, 161, 166, 167, 179, 180, 182, 223, 232, 349, 419, 497, 672, 742, 765, 784, 798, 834, 838, 850, 869, 954, 959, 960, 1023, 1049, 1103, 1202, 1254, 1332, 1349, 1375], "date": [17, 41, 56, 71, 148, 149, 151, 153, 159, 160, 162, 165, 167, 168, 210, 217, 237, 239, 252, 254, 281, 296, 349, 352, 381, 445, 447, 448, 449, 450, 453, 455, 457, 458, 460, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 545, 627, 647, 650, 652, 654, 656, 658, 661, 663, 665, 721, 723, 742, 763, 777, 778, 780, 781, 788, 796, 798, 824, 838, 856, 864, 878, 883, 903, 954, 960, 986, 1054, 1056, 1057, 1058, 1059, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1110, 1162, 1211, 1212, 1303, 1305, 1332, 1349, 1370, 1373, 1375], "date32": [252, 349], "date_format": [38, 48, 349, 954], "date_min": 467, "date_minus_1y_2mon": 1080, "date_part": 1370, "date_plus_1i": [467, 1080], "date_rang": [254, 319, 349, 453, 455, 468, 476, 487, 780, 781, 883, 954, 1062, 1076, 1081, 1082, 1099, 1100], "date_right": [254, 349, 883, 954], "datetim": [17, 38, 41, 48, 56, 100, 137, 152, 160, 163, 165, 167, 178, 179, 180, 182, 192, 193, 196, 197, 210, 217, 237, 239, 252, 254, 281, 296, 319, 349, 352, 381, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 545, 594, 627, 647, 650, 652, 654, 656, 658, 661, 663, 665, 721, 724, 742, 763, 776, 777, 778, 780, 781, 782, 788, 796, 798, 825, 826, 838, 856, 864, 878, 883, 903, 954, 959, 960, 986, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1110, 1162, 1211, 1212, 1303, 1306, 1330, 1332, 1349, 1372, 1373], "datetime_format": [38, 48, 349, 954], "datetime_rang": [239, 349, 447, 450, 464, 465, 467, 471, 472, 478, 479, 480, 481, 482, 483, 484, 485, 488, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 838, 878, 954, 1055, 1056, 1059, 1063, 1064, 1065, 1070, 1071, 1073, 1075, 1077, 1078, 1079, 1080, 1084, 1085, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098], "datetime_str": 474, "datetimeindex": 135, "david": 1378, "day_nam": [474, 477], "day_of_month": [453, 468, 487], "day_of_year": [453, 468, 487], "daylight": [239, 254, 281, 319, 349, 446, 454, 467, 472, 485, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 782, 825, 826, 838, 878, 883, 903, 954, 1063, 1080, 1085, 1098], "dayofweek": 1373, "dayofyear": 1373, "days_diff": 478, "db": [39, 150, 151, 349], "dbapi2": 150, "dbc": [686, 1268], "dbreadengin": 151, "dbwriteengin": [39, 349], "dbwritemod": [39, 349], "dd": [41, 349, 1372], "ddd": [1, 41, 349, 732, 734, 735], "dddd": 1372, "ddof": [297, 320, 349, 395, 400, 573, 579, 660, 661, 664, 665, 682, 750, 768, 770, 814, 815, 819, 827, 838, 914, 922, 954, 1000, 1005, 1190, 1196, 1242, 1244, 1264, 1339, 1349], "ddww": 1372, "de": 1372, "deal": [47, 51, 251, 349, 361, 363, 470, 471, 637, 721, 724, 753, 754, 755, 756, 779, 838, 954, 967, 968, 1083, 1084, 1225, 1303, 1306, 1349], "debug": [30, 888, 954, 1380], "decad": [1358, 1373], "decai": [493, 494, 495, 496, 838, 1109, 1110, 1111, 1112, 1349], "decemb": [477, 1090], "decim": [9, 11, 12, 28, 29, 38, 41, 48, 148, 149, 162, 349, 353, 666, 725, 838, 954, 960, 1245, 1307, 1349, 1371], "decimal_comma": [148, 149, 162], "decimal_separ": [9, 28], "declar": [130, 132, 133, 134, 136, 150, 157, 158, 166, 306, 311, 349, 954, 960, 1358], "decod": [148, 149, 700], "decompos": [315, 349, 919, 954], "decompress": [47, 49, 51, 349, 954], "decor": [55, 57, 58, 59, 60, 178, 182, 258, 349, 586, 838, 849, 850, 1202, 1349], "dedic": [1, 131, 251, 283, 349, 960, 1377], "deem": [217, 349, 864, 954], "deepcopi": [211, 349, 857, 954, 1035, 1349], "def": [1, 55, 57, 58, 59, 60, 150, 176, 178, 182, 202, 272, 313, 349, 358, 631, 690, 693, 718, 752, 799, 838, 860, 896, 954, 960, 1272, 1275, 1380], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 62, 63, 64, 68, 71, 72, 73, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 202, 217, 218, 221, 222, 225, 234, 238, 239, 240, 251, 253, 254, 262, 264, 271, 273, 281, 282, 283, 284, 285, 289, 292, 296, 297, 299, 304, 306, 307, 311, 314, 316, 317, 318, 320, 325, 334, 349, 360, 361, 363, 386, 393, 398, 405, 438, 440, 445, 470, 471, 477, 490, 492, 493, 495, 496, 515, 527, 552, 556, 565, 570, 571, 573, 577, 579, 580, 585, 593, 594, 597, 600, 619, 620, 622, 627, 628, 634, 637, 641, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 668, 671, 673, 682, 683, 692, 699, 711, 716, 717, 718, 721, 723, 724, 726, 728, 749, 750, 753, 755, 758, 762, 763, 764, 767, 768, 770, 777, 778, 779, 780, 781, 782, 785, 788, 792, 793, 794, 796, 797, 798, 804, 810, 813, 816, 819, 820, 822, 825, 826, 827, 829, 838, 859, 860, 864, 865, 867, 868, 870, 877, 878, 882, 883, 892, 897, 899, 903, 907, 909, 910, 913, 914, 918, 920, 921, 922, 927, 929, 936, 954, 958, 960, 967, 968, 991, 998, 1003, 1010, 1036, 1048, 1049, 1054, 1083, 1084, 1090, 1104, 1108, 1109, 1111, 1112, 1130, 1142, 1169, 1173, 1182, 1187, 1188, 1194, 1211, 1212, 1218, 1223, 1225, 1229, 1230, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1247, 1253, 1256, 1264, 1265, 1266, 1274, 1278, 1281, 1293, 1298, 1299, 1300, 1303, 1305, 1306, 1308, 1310, 1328, 1330, 1338, 1339, 1349, 1371, 1372, 1380], "default_match": [684, 696], "default_scop": 35, "defaultazurecredenti": 34, "defaultdict": [284, 349], "defer": [202, 349, 352, 353, 1349, 1354], "defin": [38, 41, 48, 71, 74, 150, 157, 175, 176, 178, 210, 221, 222, 226, 239, 258, 269, 272, 281, 318, 335, 349, 423, 523, 552, 586, 631, 634, 646, 647, 650, 652, 654, 656, 658, 661, 663, 665, 698, 703, 711, 722, 729, 777, 778, 780, 781, 796, 797, 800, 820, 825, 826, 838, 856, 867, 868, 871, 878, 896, 903, 921, 937, 954, 958, 959, 960, 1028, 1137, 1169, 1202, 1223, 1234, 1280, 1285, 1293, 1304, 1311, 1349], "definit": [41, 75, 349, 535, 838, 959, 960, 1152, 1349], "deflat": [36, 349], "deg": 1374, "degre": [297, 320, 349, 573, 579, 636, 660, 661, 664, 665, 682, 750, 760, 770, 814, 815, 819, 827, 838, 914, 922, 954, 1242, 1244, 1264, 1339, 1349, 1370], "delai": 95, "delet": [74, 1365, 1376], "delimit": [46, 48, 158, 166, 273, 304, 349, 683, 699, 954, 1265, 1281, 1325, 1349, 1372], "delta": [40, 152, 163, 195, 297, 320, 349, 573, 579, 660, 661, 664, 665, 682, 750, 770, 814, 815, 819, 827, 838, 850, 914, 922, 954, 1242, 1244, 1264, 1339, 1349], "delta_merge_opt": [40, 349], "delta_table_opt": [152, 163, 192], "delta_table_vers": 192, "delta_write_opt": [40, 349], "deltalak": [40, 152, 163, 170, 192, 349], "deltashar": 195, "deltat": [40, 152, 163, 349], "demo": [41, 349], "demonstr": [148, 507, 838, 960], "dens": [21, 237, 349, 637, 838, 1225, 1349], "densiti": [1349, 1354], "depend": [47, 52, 55, 61, 97, 150, 153, 159, 170, 207, 349, 379, 380, 542, 543, 586, 597, 634, 637, 782, 785, 788, 794, 838, 964, 984, 985, 1159, 1160, 1223, 1225, 1349, 1380], "deploi": [178, 182], "deprec": [40, 65, 148, 149, 175, 176, 177, 178, 182, 185, 208, 264, 307, 325, 330, 349, 452, 488, 508, 604, 641, 683, 691, 751, 760, 768, 769, 838, 853, 870, 892, 907, 920, 926, 927, 932, 954, 1061, 1069, 1070, 1101, 1129, 1229, 1265, 1273, 1330, 1349], "depth": 144, "desc": [960, 1358, 1361, 1365, 1367], "descend": [56, 290, 295, 349, 374, 394, 572, 627, 637, 670, 679, 680, 749, 761, 838, 908, 912, 954, 979, 999, 1149, 1189, 1225, 1251, 1262, 1338, 1349], "describ": [178, 237, 349, 704, 954, 1286, 1349], "descript": [239, 349, 878, 954, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1375, 1378, 1379], "deseri": [144, 289, 349, 508, 600, 838, 907, 954], "deserializ": [218, 289, 349, 440, 600, 838, 865, 907, 954], "design": [306, 311, 349], "desir": [178, 253, 349, 398, 488, 577, 882, 954, 1003, 1101, 1194], "destin": 151, "detail": [61, 131, 150, 151, 171, 173, 206, 239, 318, 349, 477, 742, 838, 878, 921, 929, 954, 1090, 1332, 1349, 1380], "determin": [15, 38, 41, 48, 56, 64, 93, 144, 148, 149, 150, 153, 159, 160, 162, 167, 169, 209, 213, 232, 239, 251, 252, 258, 281, 312, 313, 319, 349, 418, 457, 470, 471, 517, 577, 597, 634, 640, 642, 677, 685, 698, 721, 722, 724, 725, 744, 779, 797, 810, 813, 829, 838, 854, 861, 862, 869, 878, 903, 917, 923, 954, 1066, 1083, 1084, 1132, 1194, 1223, 1229, 1230, 1260, 1267, 1303, 1306, 1307, 1349], "dev": [205, 963, 1242, 1349], "develop": [151, 178, 182], "deviat": [297, 349, 495, 660, 661, 682, 819, 838, 914, 954, 1111, 1264, 1349, 1366], "devic": [306, 349, 859, 870, 897, 910, 929, 954, 1328, 1349], "devicememoryresourc": 929, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 57, 58, 83, 101, 105, 131, 132, 133, 134, 135, 136, 137, 149, 150, 151, 162, 175, 176, 178, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 405, 406, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 655, 657, 659, 660, 662, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 834, 838, 878, 903, 919, 921, 934, 937, 945, 954, 960, 1084, 1110, 1279, 1283, 1295, 1296, 1326, 1349, 1354, 1358, 1359, 1360, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1377, 1380], "df0": [265, 349, 893, 954, 1364], "df1": [56, 64, 171, 172, 224, 227, 265, 296, 321, 349, 893, 954, 1361, 1363, 1364, 1365, 1377], "df2": [56, 64, 171, 172, 224, 227, 321, 349, 1361, 1363, 1364, 1365, 1377], "df3": [56, 349], "df4": 349, "df5": 349, "df6": 349, "df_a": 1377, "df_a1": 64, "df_a2": 64, "df_a3": 64, "df_agg_nuniqu": [269, 349], "df_b": 1377, "df_current_batch": 149, "df_d1": 64, "df_d2": 64, "df_from_str_repr": [305, 349], "df_h1": 64, "df_h2": 64, "df_new_grid": [521, 838], "df_nuniqu": [269, 349], "df_original_grid": [521, 838], "df_panda": 1359, "df_pd": 131, "df_tempor": [650, 652, 654, 656, 658, 661, 663, 665, 838], "dfi": 206, "diagon": [64, 313, 349], "diagonal_relax": 64, "diagram": [899, 954], "dict": [31, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 57, 59, 61, 130, 132, 133, 134, 135, 136, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 192, 193, 196, 197, 231, 251, 271, 278, 282, 283, 284, 302, 303, 306, 311, 313, 349, 838, 901, 954, 959, 960, 1121, 1349, 1362], "dictat": [145, 467, 838, 1080], "dictionari": [31, 38, 40, 41, 43, 47, 48, 49, 50, 51, 61, 87, 130, 132, 133, 134, 136, 144, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 162, 163, 165, 166, 167, 192, 251, 271, 282, 283, 284, 302, 303, 306, 311, 349, 954, 959], "did": [446, 1055], "diff": [323, 349, 478, 479, 480, 481, 482, 483, 484, 566, 838, 924, 954, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1183, 1349], "differ": [41, 47, 100, 103, 124, 148, 153, 168, 171, 173, 202, 221, 227, 239, 240, 251, 253, 273, 281, 283, 284, 303, 306, 307, 313, 349, 441, 453, 467, 468, 471, 477, 486, 492, 507, 515, 547, 566, 568, 577, 586, 619, 620, 622, 627, 641, 642, 721, 747, 785, 788, 794, 838, 851, 867, 868, 870, 878, 882, 903, 954, 958, 960, 1030, 1050, 1062, 1080, 1081, 1084, 1090, 1099, 1106, 1115, 1130, 1164, 1183, 1185, 1202, 1211, 1212, 1214, 1229, 1230, 1303, 1349, 1373, 1375, 1377], "digit": [72, 631, 666, 667, 693, 838, 960, 1245, 1246, 1268, 1275, 1349, 1380], "dimens": [130, 132, 134, 136, 157, 158, 166, 349, 643, 838, 954, 1231, 1330, 1349], "dimension": [132, 134, 136, 307, 349, 954, 1349], "direct": [41, 151, 160, 164, 167, 292, 306, 317, 349, 393, 570, 671, 838, 909, 954, 998, 1187, 1253, 1349], "directli": [6, 31, 41, 63, 64, 150, 178, 182, 202, 284, 306, 349, 493, 495, 496, 642, 813, 838, 860, 954, 1109, 1111, 1112, 1230, 1328, 1349, 1361, 1377, 1380], "directori": [41, 47, 48, 49, 50, 51, 52, 54, 145, 160, 162, 165, 167, 349, 954], "dirpath": [36, 38, 43, 44, 47, 162, 349], "disabl": [47, 51, 55, 96, 97, 160, 165, 179, 251, 349, 859, 954], "disable_string_cach": 97, "disallow": 178, "discard": [230, 277, 349, 503, 838, 874, 900, 954, 1119, 1349], "disco": [695, 697, 1277, 1279], "discont": [695, 697, 1277, 1279], "discourag": [586, 838], "discoveri": [273, 349], "discret": [438, 441, 490, 547, 566, 634, 838, 1048, 1050, 1104, 1164, 1183, 1223, 1349], "disk": [47, 48, 49, 50, 51, 154, 349, 601, 851, 910, 954], "dispatch": 960, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 217, 237, 349, 864, 870, 954], "distanc": [254, 349, 883, 954], "distinct": [41, 182, 271, 273, 327, 349, 399, 526, 527, 529, 578, 637, 646, 782, 838, 1004, 1141, 1142, 1144, 1195, 1225, 1234, 1349, 1366, 1376, 1378, 1380], "distinct_count": [47, 51, 349, 954], "distinguish": [477, 1090], "distribut": [535, 677, 838, 899, 954, 1152, 1260, 1349], "div": 1370, "diverg": [62, 129], "divid": [21, 438, 472, 485, 493, 495, 496, 507, 535, 634, 637, 838, 1048, 1085, 1098, 1109, 1111, 1112, 1152, 1223, 1349, 1366, 1371], "divis": [507, 745, 838, 1371], "divisor": [297, 320, 349, 573, 579, 660, 661, 664, 665, 682, 750, 770, 814, 815, 819, 827, 838, 914, 922, 954, 1242, 1244, 1264, 1339, 1349], "dl": [311, 349], "do": [1, 41, 48, 49, 50, 51, 56, 62, 63, 129, 132, 133, 136, 148, 160, 162, 167, 171, 172, 173, 174, 207, 217, 219, 227, 250, 253, 254, 273, 278, 301, 313, 317, 349, 352, 437, 445, 549, 585, 707, 708, 716, 717, 718, 768, 810, 813, 829, 838, 855, 859, 860, 864, 866, 870, 882, 883, 888, 897, 899, 901, 910, 929, 954, 960, 1047, 1054, 1115, 1166, 1289, 1290, 1298, 1299, 1300, 1333, 1349, 1354], "do_polars_oper": 30, "do_someth": 150, "do_various_th": 202, "doc": [40, 43, 44, 131, 151, 154, 156, 171, 173, 204, 205, 215, 349, 962, 963], "document": [33, 100, 151, 204, 349, 353, 474, 477, 701, 721, 723, 724, 728, 834, 929, 962, 1030, 1087, 1090, 1283, 1303, 1305, 1306, 1310], "doe": [11, 38, 40, 48, 49, 50, 51, 56, 62, 63, 118, 130, 132, 133, 134, 136, 137, 148, 149, 150, 151, 152, 153, 157, 158, 162, 163, 166, 168, 212, 227, 234, 239, 240, 252, 253, 277, 282, 283, 284, 314, 323, 326, 349, 352, 353, 488, 503, 507, 515, 577, 586, 685, 695, 697, 709, 717, 718, 747, 834, 838, 858, 859, 860, 864, 870, 874, 878, 882, 888, 897, 900, 910, 918, 924, 928, 954, 1037, 1101, 1115, 1119, 1130, 1255, 1267, 1277, 1279, 1291, 1349, 1354, 1372], "doesn": [40, 148, 162, 239, 254, 349, 490, 838, 878, 883, 954, 1104, 1349], "dog": [684, 727, 730, 767, 1266, 1309, 1312], "doi": 1373, "dollar": [707, 708, 1289, 1290], "domain": [1, 693, 1275], "don": [64, 239, 254, 258, 314, 317, 349, 437, 549, 586, 627, 838, 878, 883, 918, 954, 960, 1047, 1166, 1202, 1349], "done": [149, 168, 202, 208, 254, 349, 364, 365, 627, 838, 853, 856, 883, 954, 970, 1349], "dot": [56, 601, 834, 838, 899, 910, 954, 1349], "doubl": [308, 349, 707, 708, 1289, 1290], "dow": 1373, "down": [162, 165, 166, 167, 168, 210, 349, 419, 506, 838, 1122, 1349], "download": [158, 162, 165, 166, 601, 910, 954], "downstream": [307, 349, 670, 838, 1251, 1349], "dr": 164, "drago": [698, 1280], "dragon": 698, "dragonfr": 1280, "dragonfruit": [698, 711, 722, 1280, 1293, 1304], "dramat": 153, "draw": [21, 26, 178, 182, 1380], "drawback": 834, "drawfn": 1380, "drawing_charact": 21, "dremio": 150, "driver": [39, 150, 151, 349], "drop": [1, 133, 220, 221, 222, 258, 277, 314, 323, 349, 441, 443, 444, 547, 548, 634, 838, 867, 868, 900, 918, 924, 954, 1050, 1052, 1053, 1164, 1165, 1223, 1349, 1376], "drop_dupl": [314, 349, 918, 954], "drop_empty_col": [153, 159], "drop_empty_row": [153, 159], "drop_first": [304, 349, 1325, 1349], "drop_in_plac": 349, "drop_nan": [349, 444, 838, 954, 1053, 1349], "drop_nul": [349, 443, 838, 954, 1052, 1349], "dset": 168, "dst": [472, 485, 1085, 1098], "dst_offset": [446, 1055], "dt": [1, 41, 56, 153, 159, 281, 349, 647, 782, 838, 847, 903, 954, 960, 1357, 1372, 1373], "dt1": 1372, "dt2": 1372, "dtm": [41, 349, 449, 477, 960, 1058, 1090, 1372], "dtm_iso": 477, "dtm_iso_strict": 477, "dtype": [11, 41, 55, 59, 65, 71, 75, 87, 96, 97, 107, 130, 132, 134, 136, 137, 148, 149, 150, 151, 153, 157, 158, 159, 162, 166, 175, 176, 177, 178, 182, 204, 206, 210, 213, 225, 239, 254, 281, 305, 306, 307, 308, 311, 317, 326, 349, 405, 419, 420, 421, 422, 423, 424, 435, 436, 477, 488, 497, 509, 544, 552, 583, 585, 586, 593, 632, 639, 640, 647, 672, 674, 700, 721, 738, 742, 748, 758, 765, 784, 788, 792, 793, 795, 796, 797, 798, 799, 800, 810, 813, 820, 829, 838, 856, 861, 878, 883, 903, 928, 954, 959, 960, 962, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1035, 1045, 1046, 1049, 1050, 1090, 1101, 1108, 1139, 1157, 1158, 1161, 1169, 1193, 1200, 1202, 1221, 1232, 1254, 1257, 1282, 1303, 1320, 1327, 1328, 1330, 1331, 1332, 1333, 1337, 1349, 1377, 1380], "dtype_format": [41, 349], "dtypekind": 206, "dtypelik": [204, 962], "dtypeoper": [1, 59], "dubiou": 100, "due": [239, 254, 281, 284, 319, 349, 360, 454, 467, 472, 485, 610, 611, 613, 615, 617, 618, 647, 650, 652, 654, 656, 658, 661, 663, 665, 763, 777, 778, 780, 781, 825, 826, 838, 856, 878, 883, 903, 954, 1063, 1080, 1085, 1098], "dummi": [304, 349, 1325, 1349], "dump": 144, "duplic": [56, 105, 246, 253, 254, 255, 314, 318, 349, 360, 524, 610, 634, 838, 882, 883, 884, 918, 921, 954, 1138, 1223, 1349, 1378], "duplicateerror": [634, 838, 1223, 1349], "dur": [255, 349, 884, 954], "durat": [202, 254, 319, 349, 446, 454, 477, 478, 479, 480, 481, 482, 483, 484, 488, 494, 742, 777, 778, 780, 781, 825, 826, 838, 883, 954, 959, 960, 1055, 1063, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1101, 1110, 1330, 1332, 1349], "dure": [55, 104, 148, 149, 162, 202, 227, 349, 1115, 1349], "dutch": [445, 763, 1054], "dynam": [145, 239, 349, 398, 577, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 838, 878, 954, 958, 1003, 1194], "dynamicgroupbi": [239, 349], "e": [11, 34, 36, 38, 40, 43, 44, 47, 48, 144, 148, 154, 156, 160, 165, 167, 168, 180, 218, 230, 237, 241, 250, 254, 257, 300, 301, 307, 317, 349, 358, 440, 490, 494, 497, 523, 580, 586, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 672, 677, 696, 717, 718, 729, 784, 800, 817, 828, 838, 865, 874, 883, 886, 901, 954, 958, 960, 1104, 1110, 1137, 1260, 1278, 1311, 1349, 1367, 1372, 1380], "e101": [41, 349], "e_filt": [597, 599], "e_sum_ov": [597, 599], "e_sum_slic": [597, 599], "each": [38, 41, 48, 52, 53, 54, 56, 65, 72, 83, 149, 150, 153, 158, 166, 171, 172, 173, 174, 176, 214, 216, 223, 230, 237, 238, 239, 252, 254, 258, 271, 273, 277, 281, 283, 285, 306, 311, 315, 318, 319, 327, 328, 330, 332, 334, 335, 343, 349, 374, 418, 422, 423, 438, 472, 485, 503, 526, 529, 555, 558, 565, 575, 582, 586, 634, 637, 645, 646, 653, 657, 668, 673, 680, 693, 697, 698, 702, 703, 711, 713, 714, 722, 729, 744, 758, 761, 767, 792, 793, 797, 820, 828, 838, 859, 862, 863, 869, 874, 878, 883, 897, 900, 903, 919, 921, 930, 932, 934, 936, 937, 945, 954, 979, 1027, 1028, 1034, 1048, 1085, 1098, 1141, 1144, 1172, 1175, 1182, 1192, 1223, 1225, 1233, 1234, 1247, 1256, 1275, 1279, 1280, 1284, 1285, 1293, 1295, 1296, 1304, 1311, 1319, 1349, 1366, 1372, 1377, 1378, 1380], "eager": [95, 239, 254, 273, 317, 349, 447, 450, 453, 455, 464, 465, 467, 468, 471, 472, 476, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 650, 652, 654, 656, 658, 661, 663, 665, 758, 762, 764, 768, 770, 777, 778, 780, 781, 788, 792, 793, 796, 797, 810, 813, 816, 817, 820, 825, 826, 829, 837, 838, 878, 883, 888, 954, 959, 1055, 1056, 1059, 1062, 1063, 1064, 1065, 1070, 1071, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1377], "eagerli": [577, 1358], "ear": [711, 722, 1293], "earlier": [254, 349, 883, 954], "earliest": [239, 349, 470, 471, 721, 724, 779, 878, 946, 954, 1083, 1084, 1303, 1306], "easi": 202, "easiest": 207, "easili": [56, 287, 311, 323, 328, 349, 820, 834, 905, 924, 930, 954], "east": [74, 167, 255, 349, 884, 954], "ebf1d": [41, 349], "edg": [517, 838, 1132, 1349], "eee": [1, 41, 349, 960], "ef": 708, "effect": [41, 232, 239, 349, 454, 507, 586, 612, 614, 616, 768, 838, 878, 927, 928, 954, 1055, 1063], "effici": [131, 150, 250, 252, 349, 585, 838], "efgh": 1372, "eg": [18, 26, 27, 41, 64, 151, 202, 306, 349, 472, 721, 724, 745, 838, 960, 1303, 1306], "egnaro": 1372, "either": [62, 63, 87, 145, 178, 249, 253, 254, 255, 271, 281, 282, 306, 307, 349, 494, 585, 632, 634, 647, 721, 753, 761, 765, 820, 838, 859, 860, 882, 883, 884, 886, 903, 954, 958, 960, 1110, 1221, 1223, 1303, 1349, 1362, 1380], "element": [14, 15, 26, 173, 174, 177, 178, 180, 182, 207, 209, 216, 249, 273, 282, 295, 297, 312, 320, 349, 366, 367, 368, 369, 370, 371, 382, 383, 417, 418, 425, 428, 429, 430, 431, 433, 434, 435, 436, 437, 443, 444, 498, 499, 503, 515, 519, 527, 538, 546, 548, 549, 550, 553, 558, 566, 567, 568, 569, 573, 579, 581, 582, 585, 586, 627, 628, 637, 640, 648, 649, 651, 653, 655, 657, 659, 660, 662, 664, 669, 674, 675, 676, 680, 681, 682, 713, 714, 725, 740, 741, 743, 744, 750, 761, 770, 796, 814, 815, 819, 827, 838, 854, 863, 912, 914, 917, 922, 954, 971, 972, 973, 974, 975, 976, 987, 988, 1022, 1032, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1052, 1053, 1113, 1114, 1119, 1120, 1131, 1134, 1142, 1151, 1153, 1155, 1156, 1163, 1165, 1166, 1167, 1170, 1175, 1183, 1184, 1185, 1186, 1198, 1199, 1202, 1218, 1225, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1249, 1257, 1258, 1259, 1263, 1264, 1295, 1296, 1307, 1321, 1322, 1323, 1327, 1334, 1335, 1339, 1349, 1366, 1367], "elementwis": [585, 627, 648, 649, 651, 653, 655, 657, 660, 662, 664, 838, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1349], "elif": 828, "elig": [888, 954], "elimin": [62, 129, 535, 838, 1152, 1349], "elis": [265, 349, 893, 954], "ellips": 21, "ellipsi": [237, 349], "elppa": 1372, "els": [149, 828], "email": [693, 1275], "email_part": [693, 1275], "emphas": [349, 353], "emploi": 960, "empti": [14, 36, 38, 48, 109, 133, 148, 149, 153, 159, 162, 211, 212, 239, 264, 316, 349, 683, 691, 798, 816, 857, 858, 878, 892, 920, 954, 959, 960, 1035, 1037, 1120, 1139, 1153, 1265, 1273, 1349], "en": [21, 41, 349], "enabl": [29, 30, 47, 51, 55, 62, 63, 96, 97, 152, 160, 163, 165, 167, 171, 172, 173, 174, 186, 204, 287, 308, 323, 349, 361, 363, 641, 642, 670, 685, 695, 697, 709, 749, 834, 838, 859, 860, 870, 897, 905, 910, 924, 954, 962, 967, 968, 1229, 1230, 1251, 1267, 1277, 1279, 1291, 1331, 1338, 1349], "enable_string_cach": 96, "enclos": [508, 838], "encod": [68, 74, 86, 144, 148, 149, 162, 304, 349, 352, 402, 508, 645, 687, 733, 838, 1007, 1233, 1269, 1325, 1349, 1354], "encompass": [517, 838, 1132, 1349], "encount": [120, 148, 149, 162, 239, 349, 619, 620, 700, 701, 768, 772, 786, 838, 878, 954, 1211, 1212, 1282, 1283, 1349], "end": [38, 41, 48, 148, 149, 162, 239, 273, 349, 401, 404, 407, 420, 424, 446, 472, 497, 571, 684, 689, 693, 698, 705, 711, 715, 716, 717, 720, 758, 763, 776, 777, 778, 779, 780, 781, 784, 792, 793, 796, 797, 825, 826, 828, 834, 838, 878, 897, 954, 960, 1009, 1024, 1029, 1055, 1085, 1149, 1188, 1271, 1275, 1280, 1287, 1293, 1297, 1298, 1299, 1304, 1349, 1372], "endian": [405, 1010], "endpoint": [187, 438, 634, 796, 838, 1048, 1223, 1349], "ends_a": 1372, "ends_in_digit": 1372, "ends_with": [401, 407, 424, 684, 715, 960, 1029, 1297, 1370], "ends_with_expr": 404, "ends_with_lit": 404, "engin": [10, 15, 39, 48, 49, 50, 51, 62, 63, 95, 143, 150, 151, 153, 159, 184, 238, 253, 258, 307, 314, 335, 349, 585, 817, 838, 859, 860, 870, 877, 882, 888, 892, 897, 910, 918, 929, 937, 951, 954, 958, 1202, 1330, 1349, 1361, 1377], "engine_opt": [39, 153, 349], "enginetyp": [48, 49, 50, 51, 62, 63, 859, 860, 870, 897, 910, 954], "enough": [549, 677, 838, 1166, 1260, 1349], "ensur": [11, 41, 52, 54, 95, 145, 151, 177, 180, 204, 230, 238, 271, 273, 277, 282, 307, 349, 523, 585, 838, 874, 877, 888, 900, 929, 954, 960, 962, 1330, 1349], "enter": 202, "entir": [41, 153, 159, 349], "entri": [202, 349, 954, 959, 1377], "entropi": [838, 1349], "enumer": [74, 135, 148, 149, 153, 159, 162, 252, 349], "env": [4, 183], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 48, 49, 50, 51, 62, 63, 145, 158, 160, 162, 165, 166, 167, 181, 184, 187, 192, 306, 349, 859, 860, 870, 897, 910, 954], "eol_char": [148, 149, 162], "eparg": 1372, "epoch": [70, 71, 788, 1373], "epoch_": [455, 1064], "epoch_n": [455, 1064], "epochtimeunit": [455, 788, 1064], "eq": [230, 277, 349, 492, 503, 838, 874, 900, 954, 1106, 1349], "eq_miss": [838, 1214, 1349], "equal": [55, 97, 148, 149, 162, 171, 172, 173, 174, 239, 254, 255, 265, 295, 349, 438, 485, 491, 492, 511, 537, 577, 622, 634, 640, 648, 649, 651, 653, 655, 657, 660, 662, 664, 680, 705, 706, 709, 731, 761, 796, 814, 815, 828, 834, 838, 874, 878, 883, 884, 893, 900, 912, 954, 1048, 1085, 1106, 1194, 1214, 1223, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1287, 1288, 1291, 1313, 1349, 1366, 1369, 1380], "equival": [41, 64, 130, 132, 133, 134, 136, 157, 158, 166, 239, 249, 269, 349, 358, 362, 423, 491, 492, 494, 507, 511, 513, 537, 584, 606, 608, 621, 622, 623, 626, 632, 703, 727, 729, 730, 737, 745, 752, 838, 878, 954, 1028, 1105, 1106, 1110, 1125, 1127, 1151, 1154, 1201, 1213, 1214, 1285, 1309, 1311, 1312, 1349, 1359, 1367, 1379], "err": 694, "error": [15, 40, 63, 64, 95, 115, 119, 121, 132, 133, 136, 143, 148, 149, 153, 160, 162, 167, 254, 273, 282, 307, 349, 360, 385, 386, 402, 445, 552, 554, 556, 577, 610, 642, 684, 687, 692, 694, 696, 700, 701, 721, 723, 724, 728, 838, 856, 860, 883, 929, 937, 954, 990, 991, 1007, 1054, 1169, 1171, 1173, 1230, 1266, 1269, 1274, 1276, 1278, 1282, 1283, 1303, 1305, 1306, 1310, 1330, 1349, 1375], "escap": [98, 148, 149, 151, 162, 690, 707, 708, 1272, 1289, 1290], "esp": 15, "especi": [176, 646, 838, 954, 1234, 1349], "espresso": 960, "est": 780, "establish": [150, 202], "estim": [148, 149, 208, 225, 349, 365, 495, 496, 535, 757, 838, 853, 954, 970, 1108, 1111, 1112, 1152, 1349], "estimated_s": [349, 1349], "etc": [22, 40, 41, 145, 148, 152, 153, 154, 156, 163, 164, 349, 586, 838, 960, 1248, 1250, 1349, 1373], "eu": [163, 164], "eur": [237, 349, 1380], "europ": [450, 454, 471, 1059, 1063, 1084], "eval": [305, 349, 585, 586, 783, 838, 1202, 1327, 1349], "evalu": [48, 49, 50, 51, 167, 228, 230, 254, 277, 349, 362, 375, 377, 378, 409, 410, 411, 412, 414, 415, 437, 503, 520, 540, 541, 577, 626, 627, 753, 755, 758, 762, 764, 768, 770, 777, 778, 780, 781, 783, 792, 793, 796, 797, 810, 813, 816, 820, 825, 826, 828, 829, 838, 859, 874, 880, 882, 883, 900, 954, 980, 982, 983, 1014, 1015, 1016, 1017, 1019, 1020, 1047, 1119, 1157, 1158, 1340, 1349, 1369], "even": [38, 48, 148, 253, 349, 494, 631, 634, 838, 882, 954, 960, 1110, 1223, 1349], "evenli": [239, 349, 796, 797, 878, 954], "event": [63, 860, 954], "eventu": [39, 349], "ever": [627, 838], "everi": [15, 38, 48, 148, 149, 153, 159, 162, 233, 239, 303, 319, 349, 377, 378, 379, 380, 383, 385, 391, 433, 434, 435, 436, 437, 472, 485, 499, 510, 542, 543, 547, 550, 553, 554, 555, 563, 566, 571, 575, 646, 691, 772, 773, 838, 876, 878, 954, 982, 983, 984, 985, 988, 990, 996, 1043, 1044, 1045, 1046, 1047, 1085, 1098, 1114, 1124, 1159, 1160, 1164, 1167, 1170, 1171, 1172, 1180, 1183, 1188, 1192, 1234, 1273, 1349], "everybodi": [685, 709, 1267, 1291], "everyth": 960, "ew": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "ewm_mean": [838, 1349], "ewm_mean_bi": [838, 1349], "ewm_std": [838, 1349], "ewm_var": [838, 1349], "ewma": [494, 838, 1110, 1349], "exact": [173, 176, 178, 182, 254, 293, 349, 365, 507, 691, 719, 720, 721, 723, 724, 745, 838, 883, 954, 1273, 1303, 1305, 1306], "exactli": [132, 133, 136, 171, 172, 173, 174, 177, 178, 182, 349, 713, 714, 719, 720, 782, 954, 1255, 1295, 1296, 1301, 1302, 1349], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 74, 83, 87, 95, 96, 97, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 148, 149, 150, 151, 152, 153, 157, 158, 159, 162, 163, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 838, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 959, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1349, 1354, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1369, 1371, 1372, 1373, 1374, 1375, 1377, 1378, 1379], "exc_tb": 1377, "exc_typ": 1377, "exc_val": 1377, "exce": [237, 349], "excel": [37, 41, 147, 153, 349, 850], "excelspreadsheetengin": 153, "except": [0, 219, 234, 241, 254, 257, 278, 300, 349, 642, 698, 722, 784, 838, 850, 866, 883, 901, 954, 960, 1023, 1131, 1156, 1230, 1280, 1304, 1321, 1330, 1349, 1376], "exclud": [178, 182, 239, 349, 418, 433, 436, 445, 523, 593, 744, 763, 834, 838, 878, 954, 960, 1054, 1137, 1349], "excluded_dtyp": [178, 179, 182], "exclus": [282, 349, 752, 758, 792, 793, 838], "execut": [10, 40, 48, 49, 50, 51, 55, 62, 63, 64, 95, 145, 150, 151, 256, 296, 349, 440, 549, 749, 817, 838, 855, 859, 860, 865, 870, 888, 897, 899, 910, 913, 929, 954, 1166, 1338, 1349, 1359, 1360, 1361, 1363, 1377, 1379], "execute_glob": 1377, "execute_opt": [150, 151], "exist": [1, 39, 40, 41, 42, 56, 74, 105, 152, 160, 163, 167, 178, 219, 234, 273, 278, 313, 318, 323, 324, 349, 360, 401, 404, 407, 449, 471, 707, 708, 766, 838, 862, 866, 869, 901, 904, 921, 923, 924, 925, 954, 960, 1058, 1084, 1289, 1290, 1379], "existing_t": 1379, "existing_table_path": [40, 349], "exit": [55, 96, 202, 1364, 1377], "exp": [493, 494, 495, 496, 838, 1109, 1110, 1111, 1112, 1349, 1370], "exp_a": 1371, "expand": [145, 148, 160, 162, 167, 499, 591, 595, 640, 735, 838, 960, 1114, 1349], "expand_selector": 960, "expans": 732, "expect": [38, 40, 43, 47, 48, 49, 50, 51, 54, 72, 78, 110, 118, 126, 148, 150, 152, 158, 160, 162, 163, 165, 166, 167, 172, 174, 192, 349, 577, 586, 798, 838, 886, 888, 954], "expens": [148, 149, 158, 160, 162, 166, 167, 181, 183, 251, 258, 282, 283, 284, 313, 314, 349, 586, 838, 862, 864, 869, 904, 918, 923, 954, 1115, 1202, 1349, 1380], "experiment": [255, 311, 349, 796, 797, 884, 924, 954], "expiri": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 954], "explain": [129, 207, 256, 349, 859, 954, 1376], "explainformat": [870, 954], "explicit": [41, 104, 150, 162, 176, 296, 318, 349, 477, 812, 913, 921, 954, 1090], "explicitli": [74, 104, 151, 176, 178, 202, 234, 253, 349, 641, 820, 838, 849, 882, 954, 1377], "explod": [145, 349, 418, 505, 627, 643, 744, 838, 954, 1231, 1349, 1367], "explor": [217, 349, 864, 954], "expon": [632, 838, 1221, 1349, 1371], "exponenti": [493, 494, 495, 496, 498, 632, 838, 1109, 1110, 1111, 1112, 1113, 1349, 1371], "export": [41, 43, 44, 49, 205, 251, 252, 283, 284, 301, 303, 306, 349, 834, 954, 960, 963, 1324, 1349], "expos": 850, "expr": [1, 52, 54, 56, 57, 58, 59, 60, 143, 145, 226, 228, 229, 253, 254, 255, 269, 273, 282, 287, 288, 306, 311, 323, 324, 349, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 834, 838, 839, 840, 843, 844, 845, 846, 847, 871, 872, 873, 882, 883, 884, 898, 905, 906, 924, 925, 954, 960, 1047, 1105, 1106, 1110, 1117, 1118, 1123, 1125, 1127, 1154, 1166, 1172, 1188, 1192, 1201, 1213, 1214, 1266, 1271, 1278, 1297, 1349, 1375], "expr1": [1369, 1377], "expr2": [1369, 1377], "expr_unique_subset": [269, 349], "express": [0, 8, 48, 49, 50, 51, 52, 54, 62, 63, 129, 143, 145, 175, 178, 182, 209, 226, 228, 230, 238, 244, 253, 254, 258, 269, 273, 277, 282, 287, 288, 292, 295, 306, 311, 312, 323, 324, 326, 328, 335, 349, 358, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 374, 375, 379, 380, 381, 382, 383, 386, 397, 401, 402, 403, 404, 405, 406, 407, 418, 420, 422, 423, 424, 427, 428, 429, 430, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 497, 499, 500, 502, 503, 507, 508, 509, 511, 512, 513, 514, 520, 523, 524, 525, 526, 527, 528, 529, 537, 538, 542, 543, 545, 546, 549, 550, 556, 558, 576, 577, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 604, 606, 608, 610, 611, 613, 615, 617, 618, 621, 622, 624, 626, 627, 631, 632, 633, 634, 636, 640, 641, 642, 643, 645, 646, 668, 669, 670, 673, 675, 676, 678, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 707, 708, 709, 711, 712, 713, 714, 722, 726, 736, 737, 740, 741, 744, 745, 746, 748, 749, 751, 752, 753, 754, 756, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 807, 810, 812, 813, 814, 815, 816, 818, 820, 822, 824, 825, 826, 828, 829, 834, 837, 850, 854, 859, 860, 870, 871, 874, 877, 882, 883, 897, 900, 905, 906, 909, 910, 912, 917, 924, 925, 926, 928, 930, 937, 954, 960, 987, 1036, 1047, 1054, 1058, 1090, 1105, 1106, 1110, 1116, 1125, 1127, 1137, 1154, 1163, 1166, 1201, 1202, 1213, 1214, 1229, 1230, 1249, 1253, 1266, 1267, 1268, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1282, 1283, 1289, 1290, 1291, 1304, 1308, 1349, 1367, 1369, 1371, 1372, 1376], "exprmetanamespac": [590, 596], "ext": [52, 53, 54, 150], "extend": [0, 133, 321, 349, 500, 838, 850, 958, 969, 1116, 1349], "extend_const": [838, 1349], "extens": [308, 349, 1331, 1349], "extern": [199, 926, 954], "external_shallow_clon": 199, "extra": [40, 145, 148, 149, 152, 154, 156, 160, 162, 163, 164, 167, 227, 239, 349, 838, 878, 954, 1115, 1349], "extract": [137, 207, 296, 349, 448, 451, 453, 456, 458, 459, 460, 461, 462, 463, 466, 468, 469, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 631, 693, 694, 695, 700, 701, 711, 713, 838, 1057, 1060, 1061, 1062, 1065, 1067, 1071, 1072, 1073, 1075, 1076, 1079, 1081, 1082, 1086, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1102, 1275, 1276, 1277, 1282, 1283, 1293, 1370], "extract_mani": [697, 1279], "extract_numb": [631, 838], "extracted_nr": 693, "extrem": [500, 648, 838, 1116, 1235, 1349], "extrema": [672, 838, 1254, 1349], "f": [52, 57, 149, 150, 230, 237, 252, 301, 307, 313, 317, 349, 358, 398, 406, 577, 672, 691, 721, 724, 766, 838, 874, 954, 960, 1003, 1194, 1273, 1303, 1306, 1349, 1354, 1367], "f32": [1, 59, 210, 296, 305, 311, 349, 672, 817, 838, 856, 913, 954, 960, 1200, 1349, 1375], "f4": [307, 349], "f5ed2452": [41, 349], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 56, 58, 60, 64, 83, 95, 131, 133, 157, 168, 175, 178, 210, 211, 212, 215, 217, 218, 219, 221, 223, 228, 229, 232, 236, 237, 238, 239, 244, 245, 253, 254, 260, 261, 262, 263, 267, 273, 274, 275, 294, 295, 297, 299, 311, 320, 323, 328, 331, 333, 336, 337, 338, 339, 341, 342, 349, 357, 360, 366, 367, 368, 369, 370, 371, 389, 395, 400, 406, 419, 425, 426, 428, 429, 430, 438, 439, 443, 444, 473, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 506, 507, 511, 513, 521, 522, 530, 531, 532, 533, 535, 537, 549, 560, 561, 573, 579, 580, 581, 582, 584, 587, 588, 589, 605, 608, 610, 619, 620, 621, 622, 628, 632, 634, 635, 636, 637, 641, 642, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 674, 675, 676, 677, 681, 682, 736, 740, 741, 745, 750, 759, 760, 764, 766, 768, 770, 783, 784, 796, 797, 800, 803, 804, 805, 817, 819, 827, 834, 838, 856, 857, 864, 866, 867, 872, 873, 877, 878, 881, 882, 883, 890, 891, 898, 912, 914, 922, 924, 926, 930, 933, 935, 938, 939, 940, 941, 943, 944, 954, 960, 971, 972, 973, 974, 975, 976, 994, 1000, 1005, 1011, 1032, 1033, 1038, 1039, 1040, 1048, 1049, 1052, 1053, 1086, 1109, 1110, 1111, 1112, 1113, 1117, 1122, 1132, 1135, 1136, 1166, 1177, 1178, 1190, 1196, 1197, 1198, 1199, 1218, 1221, 1223, 1225, 1230, 1235, 1237, 1238, 1240, 1241, 1242, 1244, 1245, 1246, 1257, 1258, 1259, 1263, 1322, 1323, 1337, 1349, 1358, 1366, 1367, 1371, 1374, 1377, 1380], "f_string": 787, "fa1e": [726, 1308], "face": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 954], "facil": 150, "facilit": [213, 349], "factor": [493, 495, 496, 742, 838, 1109, 1111, 1112, 1332, 1349], "fail": [38, 39, 40, 43, 47, 48, 49, 50, 51, 131, 152, 154, 158, 160, 162, 163, 165, 166, 167, 192, 206, 307, 314, 349, 375, 475, 577, 721, 723, 724, 728, 838, 918, 954, 1202, 1303, 1305, 1306, 1310, 1330, 1349, 1375], "fall": [167, 438, 634, 838, 859, 870, 897, 910, 929, 954, 1048, 1223, 1349, 1366], "fallback": [131, 153], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 56, 62, 63, 64, 129, 131, 132, 133, 135, 136, 137, 143, 145, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 206, 209, 210, 211, 212, 217, 224, 230, 232, 236, 237, 238, 239, 243, 244, 246, 247, 248, 251, 253, 254, 256, 261, 262, 268, 269, 271, 273, 274, 277, 282, 283, 284, 285, 287, 290, 293, 295, 296, 299, 302, 304, 307, 308, 312, 313, 314, 318, 319, 321, 323, 331, 333, 336, 337, 339, 342, 349, 361, 362, 363, 374, 377, 378, 381, 385, 386, 394, 399, 401, 404, 407, 418, 419, 420, 424, 432, 433, 434, 435, 436, 437, 438, 445, 457, 473, 490, 491, 492, 493, 495, 496, 513, 514, 517, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 540, 541, 545, 549, 552, 554, 556, 565, 572, 577, 578, 584, 585, 586, 590, 592, 593, 594, 596, 598, 601, 602, 621, 622, 624, 626, 627, 629, 630, 634, 637, 648, 649, 651, 653, 655, 657, 659, 660, 662, 664, 668, 670, 672, 677, 679, 680, 683, 684, 685, 686, 689, 695, 696, 697, 699, 700, 707, 708, 709, 712, 713, 715, 721, 723, 724, 726, 744, 746, 749, 752, 753, 754, 755, 756, 758, 761, 762, 763, 764, 767, 768, 770, 771, 772, 777, 778, 780, 781, 792, 793, 796, 797, 798, 804, 810, 813, 816, 817, 820, 822, 825, 826, 828, 829, 838, 854, 856, 857, 858, 859, 860, 864, 870, 874, 877, 878, 882, 883, 886, 888, 897, 900, 905, 908, 910, 912, 913, 917, 918, 921, 924, 929, 933, 935, 938, 939, 941, 944, 954, 959, 960, 967, 968, 979, 982, 983, 986, 990, 991, 999, 1004, 1006, 1007, 1009, 1012, 1023, 1024, 1026, 1029, 1031, 1034, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1054, 1066, 1086, 1106, 1107, 1109, 1111, 1112, 1119, 1121, 1126, 1128, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1157, 1158, 1162, 1166, 1169, 1171, 1173, 1182, 1189, 1195, 1208, 1214, 1216, 1219, 1220, 1223, 1225, 1226, 1227, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1247, 1251, 1255, 1260, 1262, 1265, 1266, 1267, 1268, 1271, 1277, 1278, 1279, 1281, 1282, 1289, 1290, 1291, 1294, 1295, 1297, 1303, 1305, 1306, 1308, 1325, 1330, 1331, 1335, 1338, 1340, 1349, 1359, 1361, 1367, 1372, 1377], "far": [41, 349], "fashion": [253, 349], "fast": [47, 49, 51, 145, 181, 183, 349, 500, 670, 838, 954, 958, 1116, 1251, 1349, 1380], "fast_executemani": [39, 349], "faster": [48, 49, 50, 51, 62, 63, 129, 150, 153, 227, 307, 317, 349, 586, 747, 838, 859, 860, 870, 897, 910, 954, 1115, 1202, 1349], "fastexcel": [153, 170], "favor": [39, 349], "fay": 144, "feat1": [306, 311, 349], "feat2": [306, 311, 349], "feather": [43, 154, 165, 349, 850], "featur": [1, 47, 61, 72, 78, 306, 311, 349], "feature_0": [926, 954], "feature_0_train": [926, 954], "feature_1": [926, 954], "feature_nam": [311, 349], "feb": [170, 1372], "februari": 1372, "fed": 717, "feel": [685, 709, 1267, 1291], "fetch": [139, 859, 954], "fetch_california_h": [311, 349], "few": [237, 349], "fewer": [698, 722, 954, 1280, 1304], "ff": 1366, "ff00": [726, 1308], "fff": 1, "ffff00": [402, 403, 687, 1007, 1008, 1269], "ffffff": [41, 349], "ffi": [225, 349, 1108, 1349], "fgg": 960, "fghi": 1372, "fh": 149, "fiction": 1358, "field": [37, 38, 40, 48, 87, 122, 125, 133, 315, 349, 398, 577, 585, 586, 612, 614, 616, 645, 693, 694, 700, 713, 714, 734, 735, 736, 742, 749, 772, 773, 799, 820, 838, 919, 954, 1003, 1194, 1202, 1233, 1276, 1295, 1296, 1317, 1319, 1332, 1349, 1373], "field_0": [398, 577, 1003, 1194], "field_1": [398, 577, 1003, 1194], "field_2": [1003, 1194], "field_n": [398, 577, 1003, 1194], "field_nam": [586, 838, 1202, 1349], "fiftyf": [519, 838], "figsiz": [601, 897, 910, 954], "figur": [601, 667, 838, 910, 954, 1246, 1349], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 218, 227, 289, 349, 440, 508, 600, 604, 838, 865, 907, 954, 958, 1115, 1349], "file_cache_ttl": [158, 162, 165, 166], "file_idx": [53, 140, 142], "file_path": [52, 53, 54, 140, 142], "filenam": 154, "filesourc": [153, 159, 160, 167], "filesystem": [40, 152, 163, 164, 349], "fill": [56, 64, 211, 228, 229, 292, 317, 349, 353, 433, 436, 501, 502, 521, 522, 649, 651, 653, 655, 657, 660, 662, 664, 671, 787, 810, 813, 829, 838, 872, 873, 909, 926, 954, 1117, 1118, 1135, 1136, 1215, 1236, 1237, 1239, 1242, 1243, 1244, 1253, 1349], "fill_char": [705, 706, 1287, 1288], "fill_nan": [229, 349, 502, 838, 873, 954, 1118, 1349], "fill_nul": [56, 228, 319, 349, 433, 436, 501, 671, 838, 872, 926, 954, 1117, 1349], "fill_valu": [292, 317, 349, 671, 838, 909, 954, 1253, 1349], "fillnullstrategi": [229, 349, 502, 838, 873, 954, 1118, 1349], "film": 1358, "filter": [1, 48, 49, 50, 51, 57, 62, 63, 95, 129, 143, 162, 163, 167, 168, 221, 222, 246, 247, 248, 273, 277, 335, 349, 420, 424, 597, 599, 689, 715, 751, 776, 779, 786, 816, 817, 828, 838, 859, 860, 867, 868, 870, 880, 897, 900, 910, 913, 937, 954, 960, 1250, 1349, 1365], "final": [14, 41, 56, 145, 167, 254, 256, 349, 493, 495, 496, 838, 864, 883, 954, 1109, 1111, 1112, 1349, 1378], "find": [64, 235, 349, 519, 669, 684, 685, 697, 838, 1134, 1249, 1267, 1279, 1289, 1349], "find_pat": 696, "fine": [859, 870, 897, 910, 951, 954], "finish": [227, 349, 1115, 1349], "finit": [525, 745, 768, 838, 1140, 1349], "first": [47, 56, 148, 149, 153, 154, 156, 159, 160, 162, 167, 171, 172, 173, 174, 207, 237, 239, 241, 253, 254, 257, 258, 268, 272, 273, 281, 300, 304, 305, 313, 314, 319, 326, 332, 349, 374, 376, 385, 437, 441, 465, 467, 472, 488, 507, 516, 519, 526, 539, 547, 549, 554, 555, 577, 585, 586, 598, 607, 631, 632, 647, 669, 680, 684, 691, 692, 696, 698, 700, 701, 707, 708, 722, 729, 764, 765, 772, 786, 790, 828, 834, 838, 878, 879, 882, 883, 887, 896, 903, 918, 926, 928, 934, 954, 960, 979, 990, 1047, 1049, 1050, 1078, 1080, 1085, 1101, 1131, 1134, 1141, 1156, 1164, 1166, 1171, 1172, 1194, 1202, 1249, 1262, 1273, 1274, 1276, 1278, 1280, 1282, 1283, 1289, 1290, 1304, 1311, 1321, 1325, 1327, 1330, 1349, 1369, 1370, 1372, 1378, 1380], "first_column": [41, 349], "first_non_nul": [577, 1194], "first_part": [713, 714, 1295, 1296], "fisher": [535, 677, 838, 1152, 1260, 1349], "fit": [144, 251, 293, 317, 349, 672, 813, 838, 1254, 1255, 1349], "five": [310, 349, 1380], "fix": [11, 65, 74, 176, 488, 782, 797, 1101], "flag": [61, 152, 163, 175, 290, 307, 349, 670, 684, 692, 693, 696, 707, 708, 838, 870, 888, 908, 954, 960, 1251, 1266, 1274, 1275, 1278, 1289, 1290, 1330, 1349, 1372], "flat": [144, 284, 349, 550, 643, 838, 1167, 1231, 1349], "flatten": 838, "flavour": [41, 150, 349], "flight": 150, "flight_sql": 150, "flightsql": 150, "float": [11, 12, 38, 41, 48, 76, 77, 148, 149, 162, 168, 171, 172, 173, 174, 175, 178, 182, 206, 217, 221, 225, 228, 254, 275, 285, 306, 307, 341, 349, 381, 426, 438, 443, 444, 473, 490, 491, 492, 493, 495, 496, 501, 506, 507, 511, 513, 521, 525, 528, 530, 531, 532, 533, 537, 545, 565, 580, 584, 587, 601, 605, 619, 620, 621, 622, 632, 634, 635, 648, 649, 651, 653, 655, 657, 658, 660, 662, 664, 666, 668, 674, 745, 811, 813, 838, 864, 867, 872, 883, 898, 910, 943, 954, 960, 986, 1023, 1033, 1048, 1049, 1051, 1052, 1053, 1086, 1104, 1108, 1109, 1111, 1112, 1117, 1122, 1132, 1152, 1162, 1182, 1197, 1211, 1212, 1221, 1222, 1223, 1224, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1247, 1250, 1257, 1260, 1264, 1320, 1330, 1339, 1349, 1377, 1380], "float16": [311, 349], "float32": [1, 11, 38, 48, 59, 210, 232, 305, 306, 307, 311, 349, 494, 838, 856, 954, 960, 1110, 1139, 1200, 1328, 1330, 1333, 1349], "float4": [296, 349, 817, 913, 954, 1375], "float64": [11, 38, 41, 48, 95, 133, 148, 157, 175, 178, 213, 223, 225, 232, 286, 311, 323, 349, 366, 367, 368, 369, 370, 371, 406, 419, 428, 429, 430, 439, 473, 494, 497, 530, 531, 636, 675, 676, 740, 741, 784, 800, 810, 813, 829, 834, 838, 861, 869, 904, 924, 954, 959, 960, 1086, 1110, 1331, 1337, 1349], "float_list": 83, "float_precis": [9, 11, 28, 38, 41, 48, 349, 954], "float_scientif": [38, 48, 349, 954], "floatfmt": 12, "floor": [58, 507, 838, 1349, 1370], "floor_a": 1371, "floordiv": [745, 838], "fmt": [12, 254, 349, 520, 787, 838, 880, 883, 954], "fmt_number": [349, 353], "fmt_str_length": [13, 777, 778, 780, 781], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 349], "fn": [772, 773, 786, 812], "foggi": [707, 708, 1289, 1290], "fold": [349, 598, 764, 772, 773, 812], "folder": 168, "follow": [41, 47, 61, 143, 148, 149, 150, 152, 153, 159, 162, 163, 164, 239, 254, 258, 272, 281, 307, 319, 349, 467, 472, 485, 494, 585, 631, 632, 637, 647, 650, 652, 654, 656, 658, 659, 661, 663, 665, 674, 734, 745, 760, 777, 778, 780, 781, 800, 825, 826, 828, 830, 831, 833, 838, 839, 840, 843, 845, 846, 847, 878, 883, 896, 903, 954, 960, 1080, 1085, 1098, 1110, 1221, 1225, 1248, 1250, 1257, 1330, 1341, 1343, 1345, 1349, 1350, 1355, 1356, 1357, 1375, 1380], "font": [41, 349], "font_color": [41, 349], "font_siz": [41, 349], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 144, 157, 158, 210, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 230, 232, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 253, 257, 258, 259, 260, 261, 262, 263, 266, 267, 270, 273, 275, 277, 278, 279, 282, 285, 286, 287, 289, 291, 294, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 313, 314, 315, 320, 321, 322, 327, 349, 421, 438, 440, 467, 510, 516, 520, 539, 590, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 634, 643, 683, 686, 688, 691, 693, 694, 699, 710, 712, 714, 716, 717, 718, 719, 720, 727, 730, 739, 757, 768, 769, 770, 785, 789, 790, 791, 794, 795, 801, 803, 805, 806, 808, 809, 811, 816, 819, 823, 827, 828, 834, 838, 856, 861, 862, 866, 867, 868, 869, 874, 880, 881, 882, 895, 900, 901, 904, 905, 918, 919, 923, 926, 954, 959, 960, 1025, 1048, 1080, 1173, 1221, 1223, 1231, 1268, 1270, 1273, 1275, 1276, 1292, 1296, 1301, 1302, 1309, 1312, 1349, 1363, 1365, 1366, 1367, 1369, 1372, 1375], "foo1": 1372, "foo11": [232, 349], "foo_": [595, 712, 787], "foo_1": [304, 349], "foo_2": [304, 349], "foo_3_4": 1372, "foo_a": [273, 349], "foo_a_bar_1": 787, "foo_at_1": 1367, "foo_b": [273, 349], "foo_b_bar_2": 787, "foo_bar": [590, 596, 712, 798, 1363], "foo_bar2": [590, 596], "foo_bar_baz": 712, "foo_c_bar_3": 787, "foo_low": [727, 1372], "foo_mean": 1367, "foo_q25": 1366, "foo_q50": 1366, "foo_q75": 1366, "foo_std": 1366, "foo_strip": 716, "foo_strip_end": 717, "foo_strip_start": 718, "foo_sum": [1366, 1367], "foo_uniqu": 1367, "foo_upp": [730, 1372], "foo_var": 1366, "foobar": [719, 720, 1301, 1302, 1372], "foobarbar": [720, 1302], "foofoobar": [719, 1301], "foral": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "forc": [148, 154, 158, 160, 254, 258, 307, 335, 349, 577, 882, 883, 937, 954, 1202, 1330, 1349], "force_parallel": [254, 349, 882, 883, 954], "foreign": 199, "form": [38, 48, 130, 132, 133, 134, 136, 157, 158, 166, 251, 283, 317, 349, 477, 628, 704, 729, 838, 954, 1090, 1218, 1286, 1311, 1349, 1372], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 48, 100, 131, 146, 148, 149, 150, 153, 154, 156, 159, 162, 168, 205, 218, 226, 237, 251, 264, 273, 283, 284, 289, 303, 316, 347, 349, 353, 440, 472, 474, 477, 600, 601, 602, 721, 723, 724, 728, 782, 838, 865, 870, 871, 892, 907, 920, 954, 958, 963, 1087, 1090, 1303, 1305, 1306, 1310, 1348, 1372, 1373], "formul": [221, 349, 867, 868, 954], "formula": [41, 349, 490, 838, 1104, 1349], "fortran": [306, 307, 349], "forward": [229, 254, 292, 319, 349, 393, 433, 436, 445, 464, 502, 570, 671, 838, 873, 883, 909, 954, 998, 1054, 1077, 1118, 1187, 1253, 1349], "forward_fil": 838, "found": [21, 38, 41, 48, 101, 122, 125, 133, 137, 153, 160, 167, 223, 296, 349, 519, 669, 696, 701, 719, 720, 721, 724, 838, 913, 954, 1134, 1249, 1278, 1283, 1301, 1302, 1303, 1306, 1349, 1361, 1372, 1377], "four": [310, 349, 1377], "fourth": [535, 838, 1152, 1349], "frac": [493, 494, 495, 496, 677, 838, 1109, 1110, 1111, 1112, 1260, 1349], "fraction": [38, 48, 171, 172, 173, 174, 285, 349, 473, 565, 628, 668, 721, 724, 838, 954, 1086, 1182, 1218, 1247, 1303, 1306, 1349], "fragment": 1377, "frame": [38, 39, 41, 48, 56, 63, 64, 133, 149, 153, 159, 171, 172, 210, 211, 217, 251, 252, 256, 258, 265, 269, 272, 282, 283, 284, 296, 311, 317, 318, 349, 477, 817, 856, 857, 864, 893, 896, 913, 921, 954, 960, 1035, 1090, 1349, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1376, 1380], "frame_data": [1360, 1363], "frameinittyp": [349, 954], "frametyp": [56, 1377], "framework": [273, 316, 349, 920, 954], "freedom": [297, 320, 349, 573, 579, 660, 661, 664, 665, 682, 750, 770, 814, 815, 819, 827, 838, 914, 922, 954, 1242, 1244, 1264, 1339, 1349], "freeli": [817, 913, 954, 960], "freez": [41, 349], "freeze_pan": [41, 349], "frequenc": [319, 349, 749, 838, 1338, 1349], "frequent": [1248, 1250, 1349], "fri": [349, 352], "fridai": [239, 349, 445, 474, 763, 878, 954, 1054, 1087, 1090], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 48, 49, 50, 51, 56, 64, 74, 87, 95, 100, 104, 120, 124, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 187, 192, 207, 210, 217, 218, 219, 225, 227, 230, 231, 237, 239, 251, 252, 253, 254, 255, 256, 264, 273, 277, 278, 281, 282, 284, 285, 287, 288, 296, 304, 311, 313, 314, 316, 317, 318, 319, 325, 349, 352, 353, 398, 406, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 494, 497, 507, 508, 521, 535, 553, 565, 577, 586, 594, 619, 620, 622, 627, 628, 631, 634, 636, 647, 648, 650, 652, 654, 656, 658, 661, 663, 665, 668, 680, 692, 693, 698, 700, 701, 711, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 747, 759, 760, 763, 764, 776, 777, 778, 779, 780, 781, 782, 796, 798, 813, 817, 824, 825, 826, 834, 837, 838, 856, 864, 865, 866, 874, 878, 882, 883, 884, 892, 900, 901, 903, 905, 906, 913, 918, 920, 921, 926, 927, 954, 958, 959, 960, 1003, 1011, 1048, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1106, 1108, 1110, 1115, 1152, 1170, 1182, 1194, 1211, 1212, 1214, 1215, 1218, 1223, 1235, 1247, 1274, 1275, 1280, 1282, 1293, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1310, 1325, 1340, 1349, 1358, 1359, 1360, 1361, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380], "from_arrai": 817, "from_arrow": 131, "from_json": 838, "from_panda": 131, "from_repr": [305, 349, 1327, 1349], "fromkei": [57, 59], "front": [239, 349, 878, 954], "fruit": [302, 349, 420, 424, 644, 689, 715, 722, 838, 1024, 1029, 1271, 1297, 1304], "fruits_revers": [644, 838], "fsspec": [148, 149, 154, 156, 163, 164, 170], "fsspecfileio": 164, "full": [12, 27, 47, 51, 56, 71, 100, 133, 136, 148, 149, 150, 152, 154, 157, 158, 160, 162, 163, 164, 166, 167, 168, 253, 318, 349, 698, 700, 707, 708, 721, 722, 723, 724, 728, 777, 778, 882, 888, 921, 954, 958, 960, 1280, 1282, 1289, 1290, 1303, 1304, 1305, 1306, 1310, 1349, 1365, 1380], "full_path": [140, 142], "full_sent": 767, "fulli": [180, 272, 285, 307, 349, 517, 838, 1132, 1349], "funcnam": [41, 349], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 72, 78, 95, 96, 97, 127, 131, 135, 137, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 198, 202, 204, 206, 209, 215, 218, 225, 232, 255, 258, 264, 272, 273, 278, 296, 306, 307, 308, 311, 312, 313, 316, 318, 335, 349, 352, 353, 361, 398, 417, 418, 437, 438, 440, 445, 493, 495, 496, 517, 577, 585, 586, 611, 612, 627, 631, 634, 646, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 674, 677, 697, 742, 743, 744, 753, 757, 763, 765, 769, 771, 772, 773, 785, 786, 788, 790, 791, 794, 796, 797, 799, 800, 803, 805, 808, 810, 812, 819, 823, 827, 829, 834, 838, 850, 854, 860, 865, 884, 888, 892, 896, 901, 913, 917, 920, 921, 928, 937, 954, 958, 962, 1003, 1022, 1031, 1047, 1048, 1054, 1108, 1109, 1111, 1112, 1132, 1194, 1202, 1223, 1234, 1235, 1238, 1240, 1241, 1248, 1250, 1255, 1257, 1260, 1279, 1328, 1331, 1333, 1334, 1349, 1354, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1375, 1376, 1377, 1378, 1379, 1380], "function_nam": 145, "further": 834, "futur": [63, 206, 217, 253, 290, 349, 860, 864, 882, 908, 954], "g": [34, 38, 48, 144, 148, 152, 154, 156, 163, 168, 180, 206, 218, 250, 307, 317, 349, 358, 440, 494, 497, 586, 672, 784, 838, 865, 901, 954, 958, 1110, 1349, 1380], "g1": [503, 751, 838], "g2": [503, 751, 838], "g_1": [677, 838, 1260, 1349], "gag": 27, "gamma": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "gantt": [897, 954], "gather": [149, 233, 349, 374, 510, 553, 761, 838, 876, 954, 979, 1124, 1170, 1349], "gather_everi": [349, 838, 954, 1349], "gb": [225, 349, 406, 1108, 1349], "gbp": 1380, "gc": [40, 152, 163, 164, 349], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 164, 165, 166, 167, 192, 349, 954], "gdp": [254, 349, 883, 954], "gdp2": [254, 349, 883, 954], "gdp_date": [254, 349, 883, 954], "ge": [838, 1349], "gener": [1, 52, 53, 95, 143, 144, 150, 151, 169, 175, 176, 177, 178, 179, 180, 182, 206, 213, 215, 273, 285, 304, 307, 313, 349, 565, 668, 673, 758, 777, 780, 792, 793, 795, 796, 797, 813, 825, 826, 838, 954, 1023, 1182, 1247, 1256, 1325, 1349, 1380], "geq": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "germani": [254, 349, 883, 954], "get": [56, 63, 74, 145, 155, 161, 168, 198, 207, 209, 213, 214, 223, 231, 234, 236, 239, 241, 242, 246, 248, 249, 257, 260, 267, 268, 273, 281, 282, 286, 291, 294, 300, 308, 312, 322, 332, 343, 349, 359, 372, 373, 374, 376, 384, 387, 399, 406, 418, 421, 433, 434, 435, 436, 445, 455, 504, 509, 516, 519, 534, 536, 539, 551, 557, 578, 587, 588, 589, 597, 599, 605, 619, 620, 629, 630, 635, 646, 647, 678, 682, 691, 738, 739, 743, 744, 746, 750, 761, 763, 785, 790, 794, 800, 801, 802, 803, 805, 806, 807, 809, 819, 823, 827, 838, 854, 859, 860, 862, 869, 874, 875, 878, 879, 885, 887, 903, 904, 911, 916, 917, 923, 934, 945, 954, 959, 964, 977, 978, 979, 980, 981, 989, 992, 1004, 1011, 1025, 1034, 1043, 1044, 1045, 1046, 1054, 1064, 1103, 1120, 1121, 1126, 1131, 1134, 1137, 1138, 1150, 1153, 1156, 1168, 1174, 1195, 1203, 1205, 1206, 1208, 1210, 1211, 1212, 1219, 1220, 1224, 1234, 1261, 1264, 1273, 1321, 1325, 1331, 1335, 1339, 1349], "get_chunk": 1349, "get_column": [206, 309, 349], "get_column_index": 349, "get_polars_schema": 200, "get_table_info": 200, "get_token": 34, "get_worksheet_by_nam": [41, 349], "gevent": [63, 170, 860, 954], "gh": 708, "gh45": 708, "gh45ij67kl": 708, "ghi": [358, 693, 838, 960, 1275], "gil": [586, 838, 958], "git": 61, "github": [151, 349], "give": [158, 165, 166, 254, 264, 314, 316, 349, 455, 507, 535, 640, 745, 749, 838, 850, 883, 892, 899, 918, 920, 954, 1064, 1152, 1338, 1349, 1376], "given": [41, 52, 53, 54, 56, 95, 106, 111, 128, 130, 132, 133, 134, 136, 143, 144, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 173, 174, 175, 176, 178, 180, 181, 182, 183, 204, 225, 226, 228, 230, 239, 249, 258, 265, 271, 272, 277, 282, 283, 284, 292, 295, 311, 318, 349, 381, 393, 398, 406, 418, 427, 446, 450, 474, 476, 477, 490, 494, 517, 523, 545, 570, 577, 580, 586, 627, 631, 637, 640, 641, 643, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 671, 693, 694, 705, 706, 721, 724, 731, 734, 744, 762, 764, 768, 770, 784, 785, 794, 799, 800, 813, 814, 815, 838, 871, 878, 888, 893, 896, 899, 900, 909, 912, 921, 937, 954, 959, 960, 962, 986, 998, 1003, 1011, 1036, 1055, 1059, 1087, 1089, 1090, 1104, 1108, 1110, 1132, 1137, 1151, 1162, 1187, 1194, 1197, 1200, 1202, 1215, 1221, 1225, 1231, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1249, 1253, 1275, 1276, 1287, 1288, 1303, 1306, 1313, 1337, 1340, 1349, 1358, 1360, 1365, 1367, 1368, 1371, 1372, 1377, 1379, 1380], "glimps": [217, 241, 349], "glob": [148, 149, 153, 154, 158, 160, 162, 165, 166, 167], "global": [55, 96, 97, 153, 169, 178, 186, 296, 349, 641, 642, 817, 838, 913, 954, 1026, 1030, 1229, 1230, 1349, 1359, 1361, 1376], "gmt": [450, 454, 471, 1059, 1063, 1084], "go": [13, 148, 149, 162, 420, 689, 1024, 1271], "godfath": 1358, "goe": 13, "gonfruit": 1304, "good": [47, 49, 51, 251, 349, 954, 1371], "goodby": 1, "googl": [35, 152, 163, 164], "gpu": [10, 48, 49, 50, 51, 62, 63, 306, 349, 859, 860, 870, 897, 910, 929, 951, 954, 1328, 1349], "gpu_devic": [306, 349], "gpudevic": [306, 349], "gpuengin": [10, 859, 870, 897, 910, 954], "grade": [1152, 1349], "grain": [859, 870, 897, 910, 951, 954], "granular": 1377, "grape": 1372, "graph": [62, 150, 256, 349, 601, 859, 880, 926, 954], "graphviz": [256, 349, 601, 910, 954], "great": [349, 353], "great_tabl": [349, 353], "greater": [211, 254, 349, 511, 513, 523, 677, 705, 706, 714, 731, 838, 883, 954, 1137, 1260, 1287, 1288, 1296, 1313, 1349], "greatest": [1366, 1370], "greatli": [154, 165], "green": [55, 96, 97, 335, 749, 838, 937, 1338, 1349], "greenlet": [63, 860, 954], "greet": 1, "grid": [521, 838], "grid_point": [521, 838], "gridlin": [41, 349], "gross": 1358, "group": [9, 28, 47, 51, 54, 145, 149, 167, 210, 238, 239, 252, 254, 269, 271, 273, 281, 284, 317, 319, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 359, 418, 437, 499, 505, 509, 512, 549, 585, 586, 597, 599, 627, 637, 646, 647, 679, 680, 684, 692, 693, 694, 696, 707, 708, 744, 749, 800, 838, 856, 877, 878, 883, 903, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 960, 1047, 1166, 1234, 1266, 1274, 1275, 1276, 1278, 1289, 1290, 1338, 1349, 1358, 1366, 1376, 1377], "group_bi": [239, 269, 273, 281, 319, 348, 349, 359, 408, 413, 416, 418, 503, 505, 509, 512, 585, 586, 627, 679, 680, 744, 751, 777, 780, 800, 838, 859, 860, 870, 878, 897, 899, 903, 910, 952, 954, 960], "group_by_dynam": [281, 349, 903, 954], "group_by_partit": [897, 954], "group_col": [503, 751, 838], "group_df": [335, 937], "group_dtyp": [627, 838], "group_index": [692, 1274], "group_to_row": [627, 838], "groupbi": [238, 349, 586, 800, 838], "grouper": [408, 413, 416, 838], "grow": [321, 349], "grown": [243, 349], "gt": [349, 353, 838, 1349], "gte": [503, 751, 838], "guarante": [10, 47, 51, 148, 149, 209, 217, 240, 265, 312, 314, 349, 417, 418, 515, 742, 743, 744, 838, 854, 864, 893, 917, 918, 954, 1022, 1130, 1332, 1334, 1349], "guid": [143, 145, 838, 958, 1380], "gzip": [47, 51, 349, 954], "h": [317, 349, 358, 474, 477, 672, 707, 708, 721, 724, 728, 838, 1289, 1290, 1303, 1306, 1310, 1372, 1373], "ha": [40, 41, 56, 63, 135, 150, 162, 185, 206, 319, 325, 330, 349, 417, 418, 437, 508, 585, 598, 604, 698, 722, 732, 743, 744, 768, 785, 794, 834, 838, 860, 927, 932, 937, 954, 1022, 1035, 1047, 1049, 1280, 1304, 1334, 1349], "half": [311, 349, 472, 493, 494, 495, 496, 838, 1085, 1109, 1110, 1111, 1112, 1349], "half_lif": [493, 494, 495, 496, 838, 1109, 1110, 1111, 1112, 1349], "ham": [36, 38, 40, 43, 44, 47, 210, 213, 214, 215, 219, 220, 221, 222, 223, 224, 230, 235, 240, 241, 243, 253, 257, 259, 261, 263, 266, 270, 275, 277, 278, 279, 282, 285, 286, 287, 294, 297, 298, 300, 304, 305, 307, 308, 309, 314, 320, 321, 349, 421, 601, 602, 834, 856, 861, 862, 866, 867, 868, 869, 874, 882, 895, 900, 901, 904, 905, 918, 926, 954, 1025, 1365, 1366], "ham_a": [304, 349], "ham_b": [304, 349], "ham_right": [253, 349, 882, 954], "hamburg": 834, "hand": [41, 148, 149, 162, 349, 566, 567, 568, 569, 1183, 1184, 1185, 1186], "handi": [445, 763, 1054], "handl": [40, 42, 103, 137, 145, 148, 149, 162, 168, 230, 234, 277, 349, 441, 547, 691, 731, 838, 859, 874, 900, 954, 1050, 1164, 1273, 1313, 1349], "handler": [146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 218, 349, 440, 838, 865, 954], "happen": [150, 450, 634, 838, 1059, 1223, 1349], "hard": [95, 143, 162, 888, 954], "harder": [239, 349, 878, 954], "hardwar": 1380, "has_head": [148, 149, 153, 159, 162], "has_nul": [838, 1129, 1349], "has_prefix": [424, 715], "has_suffix": [420, 689], "has_two": 1367, "has_valid": 1349, "hash": [240, 349, 838, 1349], "hash_row": 349, "hat": [707, 708, 1289, 1290], "have": [5, 15, 31, 34, 41, 53, 55, 56, 64, 71, 97, 145, 146, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 207, 218, 227, 251, 253, 254, 273, 276, 281, 283, 284, 303, 311, 326, 349, 437, 440, 493, 495, 496, 586, 598, 637, 641, 642, 647, 694, 709, 765, 838, 865, 882, 883, 892, 903, 927, 928, 954, 960, 1047, 1049, 1109, 1111, 1112, 1115, 1225, 1229, 1230, 1289, 1291, 1349, 1376, 1378, 1380], "haystack": [693, 1275], "he": 717, "head": [74, 162, 237, 257, 300, 349, 364, 539, 838, 887, 954, 1156, 1321, 1349], "header": [38, 41, 47, 48, 51, 137, 148, 149, 153, 159, 162, 223, 313, 349, 954], "header_format": [41, 349], "header_nam": [313, 349], "headerless": 162, "heap": [145, 225, 349, 838, 1108, 1349], "heatmap": [41, 349], "heavili": 167, "height": [41, 144, 178, 222, 349, 352, 1349, 1354], "hell": [716, 1298], "hello": [1, 21, 716, 717, 718, 960, 1173, 1298, 1299, 1300, 1360, 1363, 1372], "hello_": 787, "hello_data": 1363, "hello_world": 1363, "help": [41, 171, 172, 173, 174, 349, 954], "helper": [349, 353, 834], "henc": [707, 1290], "here": [38, 40, 41, 43, 47, 48, 49, 50, 51, 130, 132, 133, 134, 136, 150, 151, 152, 157, 158, 160, 162, 163, 164, 165, 166, 167, 176, 178, 182, 192, 207, 273, 349, 445, 585, 586, 601, 694, 701, 763, 838, 910, 954, 960, 1054, 1283], "hex": [402, 403, 687, 688, 726, 1007, 1008, 1269, 1270, 1308], "hexadecim": [1007, 1008], "hf": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 954], "hf_token": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 954], "hi": [1, 1372], "hidden": [41, 349], "hidden_column": [41, 349], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 349], "hide_password": 150, "high": [284, 349, 353, 634, 838, 850, 1223, 1349], "higher": [47, 51, 217, 275, 341, 349, 635, 657, 658, 811, 838, 864, 898, 943, 954, 1049, 1224, 1240, 1349], "highest": [349, 353, 637, 748, 768, 838, 954, 1225, 1349], "highli": [145, 838], "hint": 143, "hippopotamu": [705, 706, 1287, 1288], "hist": [838, 1349, 1354], "histogram": [1349, 1354], "hit": [855, 954], "hive": [52, 160, 165, 167], "hive_custom": 195, "hive_dir": [52, 54], "hive_partit": [160, 165, 167], "hive_schema": [160, 165, 167], "hive_serd": 195, "hmm": [960, 1372], "hold": [293, 307, 349, 1330, 1349], "holidai": [445, 763, 1054], "home": [729, 1311], "horizont": [21, 64, 105, 232, 243, 260, 262, 267, 299, 317, 349, 754, 756, 765, 766, 767, 772, 773, 775, 783, 786, 802, 804, 807, 812, 822, 926, 954], "host": [61, 148, 154, 156, 167], "hour": [158, 162, 165, 166, 239, 254, 281, 319, 349, 459, 461, 462, 466, 467, 470, 472, 473, 477, 479, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 779, 780, 781, 782, 796, 824, 825, 826, 838, 878, 883, 903, 954, 960, 1080, 1083, 1085, 1092, 1098, 1110, 1349, 1373], "hours_diff": 479, "hous": [311, 349], "how": [12, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 56, 64, 105, 145, 151, 158, 160, 162, 165, 166, 167, 192, 222, 230, 253, 254, 273, 317, 318, 349, 382, 441, 470, 471, 521, 546, 547, 627, 640, 659, 721, 724, 763, 779, 828, 838, 874, 882, 883, 921, 926, 954, 987, 1050, 1083, 1084, 1163, 1164, 1241, 1303, 1306, 1349], "howev": [1, 10, 52, 133, 150, 160, 167, 202, 225, 258, 307, 349, 627, 838, 859, 870, 897, 910, 954, 1108, 1349], "hstack": [105, 349], "html": [33, 41, 43, 44, 131, 150, 154, 156, 204, 205, 206, 215, 349, 962, 963], "http": [21, 33, 41, 43, 44, 74, 131, 150, 151, 154, 156, 187, 204, 205, 206, 215, 349, 601, 692, 694, 704, 910, 954, 962, 963, 1274, 1276, 1286], "httpmethod": 74, "hug": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 954], "huge": [225, 349, 1108, 1349], "hut": [707, 708, 1289, 1290], "hvplot": [349, 352, 1349, 1354], "hyperbol": [367, 369, 371, 429, 676, 741, 838, 972, 974, 976, 1039, 1259, 1323, 1349], "hyperloglog": [208, 349, 365, 757, 838, 853, 954, 970, 1349], "hyphen": [683, 1265], "hypothesi": [176, 178, 181, 182, 1380], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 70, 71, 72, 73, 78, 88, 95, 97, 101, 103, 104, 105, 106, 107, 108, 110, 111, 116, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 196, 198, 202, 207, 208, 209, 210, 212, 213, 217, 218, 221, 222, 224, 225, 227, 230, 234, 238, 239, 240, 241, 244, 245, 249, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 269, 271, 272, 273, 277, 278, 279, 281, 282, 283, 284, 285, 288, 289, 290, 292, 294, 295, 296, 297, 300, 301, 306, 307, 308, 311, 312, 313, 314, 316, 318, 319, 320, 324, 326, 327, 335, 349, 352, 353, 358, 361, 363, 364, 365, 375, 378, 385, 386, 393, 398, 405, 417, 418, 419, 422, 423, 437, 438, 440, 443, 444, 445, 446, 449, 457, 464, 465, 467, 472, 474, 477, 485, 493, 494, 495, 496, 499, 503, 507, 515, 517, 520, 523, 535, 541, 548, 549, 552, 554, 556, 565, 570, 571, 573, 577, 579, 582, 585, 586, 590, 592, 593, 594, 596, 597, 598, 600, 609, 627, 632, 634, 637, 639, 640, 641, 642, 643, 646, 647, 648, 650, 652, 654, 656, 658, 659, 660, 661, 663, 664, 665, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 682, 683, 684, 685, 686, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 711, 714, 716, 717, 718, 721, 722, 723, 724, 726, 728, 729, 731, 736, 743, 744, 749, 750, 753, 754, 755, 756, 757, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 780, 781, 786, 790, 791, 792, 793, 795, 796, 797, 798, 800, 803, 805, 808, 810, 813, 814, 815, 816, 817, 819, 823, 825, 826, 827, 828, 829, 834, 838, 853, 854, 855, 858, 859, 860, 862, 864, 865, 867, 868, 869, 870, 874, 877, 878, 881, 882, 883, 884, 886, 888, 892, 893, 897, 900, 901, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 917, 918, 920, 921, 922, 923, 925, 928, 929, 937, 947, 954, 958, 960, 967, 968, 969, 970, 983, 990, 991, 998, 1003, 1010, 1022, 1026, 1027, 1028, 1031, 1036, 1037, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1058, 1066, 1080, 1085, 1087, 1090, 1098, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1119, 1120, 1130, 1131, 1132, 1134, 1137, 1139, 1142, 1149, 1151, 1152, 1153, 1156, 1158, 1165, 1166, 1169, 1171, 1173, 1182, 1187, 1188, 1194, 1202, 1221, 1223, 1225, 1227, 1229, 1230, 1231, 1234, 1235, 1238, 1240, 1241, 1242, 1244, 1247, 1248, 1249, 1250, 1251, 1253, 1256, 1257, 1260, 1261, 1264, 1265, 1266, 1267, 1268, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1290, 1291, 1293, 1296, 1298, 1299, 1300, 1303, 1304, 1305, 1306, 1308, 1310, 1311, 1313, 1321, 1324, 1328, 1330, 1331, 1333, 1334, 1338, 1339, 1349, 1354, 1358, 1359, 1364, 1368, 1369, 1372, 1375, 1377, 1378, 1380], "i0e0": 1380, "i16": [1, 59, 453, 468, 487, 672, 838, 960, 1081, 1327, 1349, 1380], "i32": [1, 59, 130, 133, 137, 175, 177, 178, 287, 296, 349, 384, 385, 387, 405, 419, 448, 456, 458, 459, 460, 461, 462, 466, 489, 672, 763, 828, 838, 905, 954, 959, 989, 990, 992, 1010, 1057, 1067, 1071, 1072, 1073, 1079, 1102, 1200, 1349, 1369, 1373, 1380], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 57, 58, 59, 60, 64, 65, 83, 104, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 150, 157, 158, 162, 207, 209, 210, 211, 212, 214, 218, 219, 222, 223, 226, 227, 229, 230, 233, 234, 236, 237, 238, 239, 241, 243, 244, 246, 248, 250, 253, 254, 255, 257, 258, 259, 265, 266, 271, 272, 273, 274, 277, 278, 279, 280, 281, 285, 287, 289, 292, 294, 295, 296, 298, 300, 302, 309, 312, 313, 314, 315, 316, 317, 318, 319, 321, 323, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 339, 342, 343, 349, 358, 360, 364, 374, 379, 380, 382, 383, 388, 390, 391, 392, 393, 394, 396, 399, 408, 413, 416, 417, 418, 427, 433, 434, 435, 436, 437, 438, 441, 442, 455, 470, 476, 478, 479, 480, 481, 482, 483, 484, 494, 497, 499, 500, 502, 503, 504, 505, 507, 509, 510, 512, 516, 518, 520, 521, 522, 523, 526, 527, 529, 530, 531, 532, 533, 536, 539, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 583, 585, 586, 606, 607, 608, 610, 611, 613, 615, 617, 618, 623, 627, 628, 631, 632, 633, 634, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 668, 670, 671, 672, 673, 678, 679, 680, 698, 707, 708, 722, 726, 731, 732, 734, 735, 736, 737, 738, 739, 743, 744, 745, 746, 748, 751, 758, 761, 764, 765, 766, 767, 772, 773, 774, 775, 776, 779, 782, 783, 784, 785, 786, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 809, 812, 816, 817, 818, 821, 822, 823, 824, 828, 834, 838, 854, 856, 857, 859, 860, 865, 866, 868, 871, 873, 874, 875, 876, 877, 878, 879, 882, 883, 884, 885, 887, 888, 889, 893, 894, 896, 897, 899, 900, 901, 902, 903, 905, 907, 909, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 924, 927, 928, 930, 931, 933, 934, 935, 937, 938, 941, 944, 945, 954, 960, 964, 965, 966, 969, 988, 993, 995, 997, 998, 999, 1001, 1004, 1022, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1064, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1114, 1115, 1116, 1118, 1119, 1123, 1124, 1126, 1131, 1133, 1142, 1156, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1176, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1194, 1195, 1202, 1207, 1215, 1221, 1223, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1236, 1239, 1243, 1247, 1248, 1250, 1253, 1254, 1256, 1261, 1262, 1308, 1314, 1319, 1321, 1326, 1334, 1335, 1340, 1349, 1358, 1359, 1361, 1365, 1366, 1367, 1368, 1369, 1371, 1374, 1375, 1377, 1378, 1380], "i8": [397, 398, 453, 456, 459, 461, 462, 463, 466, 468, 469, 473, 486, 487, 576, 672, 810, 813, 829, 838, 1002, 1003, 1050, 1062, 1065, 1075, 1076, 1082, 1086, 1099, 1100, 1193, 1232, 1254, 1337, 1349, 1373], "i_bitand_j": 1368, "i_bitand_op_j": 1368, "i_bitcount": 1368, "i_bitor_j": 1368, "i_bitor_op_j": 1368, "i_bitxor_j": 1368, "i_bitxor_op_j": 1368, "iceberg": [42, 164, 349, 850], "icon": [41, 349], "id": [27, 34, 41, 64, 144, 148, 153, 164, 255, 306, 313, 326, 335, 349, 646, 707, 708, 747, 838, 884, 928, 937, 954, 960, 1234, 1336, 1349, 1377, 1378, 1380], "id_char": 1380, "id_var": [264, 316, 349, 892, 920, 954], "ideal": [139, 143], "ident": [34, 137, 211, 212, 349, 474, 645, 646, 838, 857, 858, 954, 1035, 1037, 1087, 1233, 1234, 1349], "identif": [153, 159], "identifi": [137, 150, 264, 271, 314, 316, 327, 349, 892, 918, 920, 954], "idiograph": 960, "idiomat": [834, 862, 869, 904, 923, 937, 954], "idx": [162, 239, 252, 326, 349, 385, 398, 577, 878, 928, 954, 1003, 1194, 1278], "idx_lit": 1278, "idx_rx": 1278, "ieee": [745, 838], "if_set": [5, 31], "if_table_exist": [39, 349], "ifnul": 1370, "ignor": [40, 150, 177, 178, 182, 262, 299, 318, 349, 361, 363, 386, 405, 441, 471, 493, 495, 496, 547, 556, 619, 620, 683, 699, 753, 755, 767, 804, 822, 838, 921, 954, 960, 967, 968, 991, 1010, 1050, 1084, 1109, 1111, 1112, 1164, 1173, 1211, 1212, 1265, 1281, 1349], "ignore_error": [148, 149, 158, 162, 166], "ignore_nul": [262, 299, 349, 361, 363, 386, 493, 495, 496, 556, 683, 699, 753, 755, 767, 804, 822, 838, 967, 968, 991, 1109, 1111, 1112, 1173, 1265, 1281, 1349], "ignore_spac": 960, "ij": 708, "ij67": 708, "ijkl": 1372, "ilmsuxu": [684, 692, 693, 696, 707, 708, 1266, 1274, 1275, 1278, 1289, 1290], "imbal": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "imdb_scor": 1358, "immedi": [202, 637, 758, 762, 764, 768, 770, 777, 778, 780, 781, 792, 793, 796, 797, 810, 813, 816, 820, 825, 826, 829, 838, 1225, 1349, 1359], "immut": [307, 349, 1330, 1349], "impact": [239, 349, 878, 954, 1358, 1377], "impl": 164, "implement": [47, 95, 143, 150, 206, 240, 258, 335, 349, 352, 353, 515, 586, 610, 611, 613, 615, 617, 618, 732, 742, 800, 838, 937, 1130, 1202, 1248, 1250, 1332, 1349, 1354], "implic": [440, 838, 865, 954], "implicit": [318, 349, 921, 954], "implicitli": [230, 277, 349, 503, 828, 838, 874, 900, 954, 1377], "implod": [838, 1349, 1367], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 56, 71, 74, 95, 130, 131, 134, 135, 144, 148, 150, 151, 157, 158, 162, 168, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 210, 217, 218, 219, 222, 237, 239, 252, 254, 271, 273, 289, 296, 304, 306, 311, 316, 317, 319, 349, 352, 353, 406, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 593, 594, 600, 627, 648, 650, 652, 654, 656, 658, 661, 663, 665, 763, 776, 777, 778, 779, 780, 781, 782, 796, 817, 825, 826, 834, 838, 850, 856, 860, 864, 865, 866, 868, 878, 883, 888, 907, 920, 954, 958, 1011, 1038, 1040, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1110, 1140, 1143, 1145, 1146, 1235, 1258, 1322, 1349, 1354, 1359, 1374, 1377, 1380], "improv": [39, 51, 154, 165, 253, 349, 585, 838, 882, 954], "in_part_idx": [52, 54, 142], "in_plac": [243, 293, 321, 349, 1226, 1255, 1262, 1349], "in_progress": [899, 954], "includ": [7, 21, 31, 38, 40, 41, 48, 52, 54, 61, 135, 150, 152, 153, 158, 159, 160, 162, 163, 164, 165, 166, 167, 178, 179, 202, 213, 217, 225, 255, 271, 273, 277, 284, 295, 311, 313, 317, 318, 349, 438, 473, 503, 507, 517, 523, 593, 634, 649, 651, 653, 655, 657, 659, 660, 662, 664, 707, 708, 712, 713, 716, 717, 763, 772, 814, 815, 838, 864, 874, 884, 900, 912, 921, 954, 960, 1048, 1049, 1086, 1108, 1119, 1132, 1137, 1223, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1289, 1290, 1294, 1295, 1298, 1349, 1377], "include_bom": [38, 48, 349, 954], "include_boundari": [239, 349, 878, 954], "include_break": [438, 634, 838, 1048, 1223, 1349], "include_breakpoint": [517, 838, 1132, 1349], "include_categor": 960, "include_categori": [517, 838, 1132, 1349], "include_col": 178, "include_file_path": [153, 158, 159, 160, 162, 165, 166, 167], "include_head": [38, 41, 48, 149, 313, 349, 954], "include_index": 135, "include_init": 772, "include_kei": [52, 54, 271, 284, 349], "include_nul": [318, 349, 921, 954], "inclus": [207, 239, 281, 349, 477, 523, 647, 650, 652, 654, 656, 658, 661, 663, 665, 712, 713, 758, 777, 778, 780, 781, 792, 793, 796, 797, 825, 826, 838, 878, 903, 954, 1090, 1137, 1294, 1295, 1349], "incom": 150, "incompat": 123, "incomplet": [642, 838, 1230, 1349], "incorpor": 1377, "incorrect": [290, 349, 488, 585, 586, 670, 838, 908, 937, 954, 1101, 1251, 1349], "incorrectli": [148, 577], "increas": [41, 56, 148, 153, 159, 160, 167, 349, 437, 646, 838, 1047, 1234, 1349], "independ": [62, 63, 129, 175, 178, 182, 311, 349, 673, 838, 859, 860, 870, 897, 910, 954], "index": [41, 111, 131, 135, 138, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 170, 206, 233, 235, 239, 244, 249, 251, 273, 279, 281, 282, 283, 292, 294, 306, 307, 309, 316, 318, 319, 325, 326, 349, 359, 372, 373, 374, 376, 379, 380, 385, 393, 398, 494, 509, 510, 512, 519, 542, 543, 552, 553, 554, 570, 571, 577, 647, 650, 652, 654, 656, 658, 661, 663, 665, 669, 671, 678, 684, 692, 696, 698, 711, 722, 732, 761, 792, 795, 838, 876, 878, 903, 909, 911, 920, 921, 927, 928, 954, 960, 977, 978, 979, 980, 981, 984, 985, 990, 998, 1003, 1110, 1123, 1124, 1134, 1151, 1159, 1160, 1169, 1170, 1171, 1187, 1188, 1194, 1215, 1248, 1249, 1253, 1261, 1274, 1278, 1280, 1293, 1304, 1349, 1354, 1367, 1372], "index_column": [239, 281, 349, 647, 838, 878, 903, 954], "index_of": [838, 1349], "indexord": [306, 307, 349], "indic": [38, 41, 43, 47, 48, 49, 50, 51, 70, 71, 73, 88, 104, 114, 145, 146, 148, 149, 150, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 175, 176, 182, 192, 239, 281, 284, 292, 304, 349, 375, 393, 509, 517, 524, 525, 526, 528, 529, 530, 531, 532, 533, 552, 570, 590, 591, 592, 593, 594, 595, 596, 627, 647, 650, 652, 654, 656, 658, 661, 663, 665, 669, 671, 761, 762, 809, 838, 878, 903, 909, 954, 960, 998, 1031, 1123, 1132, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1169, 1187, 1248, 1249, 1253, 1325, 1349, 1372, 1380], "indistinguish": [38, 48, 349, 954], "individu": [41, 51, 202, 281, 306, 307, 311, 349, 586, 693, 735, 838, 859, 903, 954, 960, 1034, 1275, 1349], "inequ": [621, 838], "inexact": [171, 172, 173, 174], "inf": [175, 178, 182, 371, 438, 525, 528, 634, 745, 838, 976, 1040, 1048, 1140, 1143, 1200, 1218, 1223, 1337, 1349, 1374], "infer": [38, 43, 47, 48, 49, 50, 51, 72, 87, 104, 130, 132, 133, 134, 135, 136, 148, 149, 150, 153, 157, 158, 159, 160, 162, 165, 166, 167, 192, 258, 349, 585, 586, 643, 700, 721, 723, 724, 725, 728, 782, 798, 813, 838, 954, 1202, 1231, 1282, 1303, 1305, 1306, 1307, 1310, 1349], "infer_schema": [148, 162], "infer_schema_length": [133, 136, 144, 148, 149, 150, 153, 157, 158, 159, 162, 166, 349, 700, 954, 1282], "inference_length": [725, 1307], "inference_s": [258, 349], "infin": [729, 745, 838, 1311], "infinit": [528, 745, 838, 1143, 1349], "influenc": [153, 888, 954], "influxdb": 150, "info": [152, 163, 164, 170], "inform": [20, 24, 38, 39, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 143, 145, 152, 158, 160, 162, 163, 164, 165, 166, 167, 171, 173, 192, 193, 194, 196, 197, 204, 215, 217, 349, 353, 535, 586, 677, 684, 692, 693, 696, 707, 708, 838, 859, 864, 870, 897, 910, 954, 958, 962, 1030, 1152, 1260, 1266, 1274, 1275, 1278, 1289, 1290, 1349], "inherit": [282, 349, 440, 838, 865, 954], "init": [202, 1358], "initcap": 1370, "initi": [33, 34, 35, 41, 87, 143, 187, 202, 349, 772, 786, 828, 1377], "initialis": [74, 150, 202, 954], "inject": [41, 56, 349], "inlin": [25, 284, 349, 684, 692, 693, 696, 707, 708, 1266, 1274, 1275, 1278, 1289, 1290, 1367], "inner": [65, 83, 177, 253, 255, 318, 349, 386, 397, 442, 556, 576, 586, 640, 742, 817, 838, 882, 884, 921, 954, 991, 1002, 1051, 1173, 1193, 1202, 1332, 1349, 1365, 1377], "inner_dtyp": [177, 180], "innermost": [177, 180], "innter": 990, "inprocessqueri": [859, 954], "input": [0, 54, 56, 62, 104, 133, 135, 145, 148, 149, 209, 219, 238, 255, 258, 262, 271, 273, 278, 287, 288, 292, 295, 299, 312, 318, 323, 324, 328, 349, 358, 418, 420, 424, 427, 494, 497, 508, 523, 581, 585, 586, 598, 627, 641, 642, 674, 680, 698, 709, 711, 717, 718, 719, 720, 722, 724, 736, 744, 752, 754, 756, 758, 761, 764, 765, 766, 767, 775, 782, 784, 792, 793, 798, 799, 800, 802, 804, 807, 816, 820, 822, 828, 834, 838, 850, 854, 866, 877, 884, 901, 905, 906, 909, 912, 917, 921, 924, 925, 930, 954, 1036, 1110, 1137, 1198, 1199, 1202, 1221, 1229, 1230, 1253, 1257, 1280, 1293, 1304, 1306, 1349, 1371, 1372, 1374], "input_wildcard_expans": [145, 838], "insensit": [685, 693, 695, 697, 707, 708, 709, 960, 1266, 1267, 1275, 1277, 1278, 1279, 1289, 1290, 1291], "insensitive_match": [684, 696], "insert": [39, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 244, 313, 315, 349, 669, 683, 699, 731, 838, 919, 954, 1249, 1265, 1281, 1313, 1349], "insert_aft": [41, 349], "insert_befor": [41, 349], "insert_chart": [41, 349], "insert_column": 349, "insid": [63, 585, 838, 860, 954], "inspect": [838, 954], "instal": [33, 34, 35, 108, 135, 148, 149, 151, 154, 156, 215, 308, 349, 445, 601, 763, 910, 954, 1054, 1331, 1349], "instanc": [38, 43, 47, 48, 49, 50, 51, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 178, 182, 192, 227, 232, 349, 598, 772, 786, 834, 850, 856, 888, 899, 927, 928, 954, 1115, 1349], "instanti": [34, 39, 41, 150, 180, 287, 305, 306, 323, 349, 905, 924, 954, 959, 1327, 1328, 1349], "instantli": [63, 860, 954], "instead": [38, 40, 45, 46, 56, 63, 65, 131, 132, 133, 136, 148, 149, 150, 153, 159, 160, 162, 167, 168, 175, 176, 177, 178, 182, 208, 209, 237, 250, 251, 254, 258, 264, 269, 271, 282, 283, 284, 287, 288, 289, 292, 306, 307, 308, 312, 324, 325, 349, 352, 353, 374, 393, 418, 419, 422, 423, 438, 452, 477, 494, 497, 507, 570, 600, 634, 641, 671, 683, 691, 702, 703, 716, 717, 718, 719, 720, 731, 744, 751, 758, 760, 762, 764, 768, 769, 770, 777, 778, 780, 781, 782, 792, 793, 796, 797, 810, 813, 816, 817, 820, 825, 826, 829, 838, 853, 854, 860, 870, 883, 892, 905, 906, 907, 909, 917, 925, 926, 927, 929, 954, 960, 979, 998, 1007, 1023, 1027, 1028, 1048, 1061, 1069, 1070, 1090, 1110, 1129, 1187, 1223, 1229, 1248, 1250, 1253, 1262, 1265, 1273, 1284, 1285, 1298, 1299, 1300, 1313, 1330, 1331, 1349, 1354, 1358, 1359, 1363, 1377, 1378], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 48, 49, 50, 51, 53, 58, 65, 72, 133, 136, 139, 140, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 192, 194, 209, 211, 217, 225, 228, 229, 233, 235, 237, 240, 241, 242, 244, 249, 251, 252, 254, 257, 258, 268, 269, 279, 281, 282, 285, 291, 292, 294, 297, 300, 305, 309, 312, 317, 320, 322, 325, 326, 332, 343, 349, 358, 381, 385, 393, 395, 398, 400, 417, 418, 437, 441, 445, 470, 493, 495, 496, 500, 501, 502, 509, 510, 512, 515, 516, 517, 539, 545, 547, 552, 553, 554, 555, 565, 570, 571, 573, 575, 576, 577, 579, 626, 628, 631, 632, 634, 637, 640, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 673, 678, 682, 692, 698, 700, 705, 706, 707, 711, 713, 714, 722, 725, 726, 731, 739, 743, 744, 750, 752, 758, 768, 770, 776, 779, 782, 788, 790, 792, 793, 796, 797, 809, 810, 813, 814, 815, 819, 820, 823, 824, 827, 829, 838, 854, 857, 864, 872, 873, 876, 879, 883, 887, 897, 909, 911, 914, 916, 917, 922, 923, 927, 928, 929, 934, 945, 954, 959, 960, 977, 978, 986, 990, 998, 1000, 1003, 1005, 1022, 1023, 1034, 1035, 1041, 1047, 1050, 1051, 1054, 1083, 1108, 1109, 1111, 1112, 1116, 1117, 1118, 1123, 1124, 1130, 1131, 1132, 1134, 1151, 1155, 1156, 1162, 1164, 1169, 1170, 1171, 1172, 1182, 1187, 1188, 1190, 1192, 1193, 1194, 1196, 1208, 1209, 1211, 1212, 1215, 1217, 1218, 1221, 1222, 1223, 1225, 1231, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1256, 1261, 1264, 1274, 1280, 1282, 1287, 1288, 1289, 1293, 1295, 1296, 1304, 1307, 1308, 1313, 1320, 1321, 1327, 1334, 1339, 1349, 1361, 1364, 1377, 1380], "int16": [1, 59, 311, 349, 435, 436, 468, 738, 838, 960, 1045, 1046, 1081, 1320, 1327, 1349], "int32": [1, 41, 59, 64, 130, 133, 175, 177, 178, 239, 252, 281, 306, 349, 384, 385, 387, 405, 419, 448, 458, 459, 460, 461, 466, 489, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 742, 813, 838, 878, 903, 954, 959, 960, 986, 989, 990, 992, 1010, 1057, 1067, 1071, 1072, 1073, 1079, 1102, 1110, 1200, 1332, 1333, 1349], "int64": [1, 40, 41, 58, 59, 64, 65, 87, 106, 148, 157, 213, 223, 232, 239, 272, 281, 286, 287, 301, 308, 349, 379, 380, 382, 383, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 435, 436, 478, 479, 480, 481, 482, 483, 484, 488, 494, 497, 585, 586, 612, 614, 616, 631, 639, 647, 650, 652, 654, 656, 658, 661, 663, 665, 700, 726, 738, 742, 758, 765, 784, 792, 793, 798, 813, 820, 834, 838, 861, 869, 878, 896, 903, 904, 905, 954, 960, 984, 985, 987, 988, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1045, 1046, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1101, 1103, 1110, 1202, 1227, 1308, 1320, 1330, 1331, 1332, 1333, 1349], "int64arrai": [1324, 1349], "int8": [1, 59, 87, 232, 349, 397, 398, 435, 436, 453, 456, 462, 463, 469, 473, 486, 487, 576, 738, 810, 813, 829, 838, 959, 1002, 1003, 1045, 1046, 1050, 1062, 1065, 1075, 1076, 1082, 1086, 1099, 1100, 1193, 1232, 1320, 1330, 1337, 1349], "int_rang": [239, 317, 326, 335, 349, 758, 795, 816, 878, 888, 928, 937, 954], "integ": [38, 41, 48, 70, 71, 73, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 169, 176, 178, 181, 183, 222, 239, 281, 304, 307, 349, 362, 426, 473, 506, 507, 626, 632, 634, 639, 646, 647, 659, 698, 722, 726, 752, 758, 788, 792, 793, 813, 838, 868, 878, 903, 954, 960, 1033, 1086, 1122, 1221, 1223, 1227, 1234, 1241, 1248, 1280, 1304, 1308, 1330, 1349, 1371, 1377, 1380], "integer_list": 83, "integr": [41, 311, 349, 650, 652, 654, 656, 658, 661, 663, 665, 838, 1380], "intend": [1, 171, 172, 173, 174, 731, 1313], "intens": [258, 335, 349, 627, 838, 1202, 1349], "interact": [178, 182, 217, 349, 352, 864, 954, 1349, 1354], "interchang": [131, 206], "interest": [149, 474, 477, 1087, 1090], "interfac": [0, 119, 120, 130, 131, 200, 201, 205, 850, 963, 1377], "interfer": 958, "interleav": 1372, "intermedi": [245, 349, 881, 954, 1380], "intern": [43, 44, 49, 150, 169, 251, 301, 349, 507, 838, 954, 1324, 1349, 1359], "interoper": [204, 962], "interpol": [217, 275, 341, 349, 502, 522, 589, 635, 657, 658, 811, 838, 864, 898, 943, 954, 1049, 1136, 1224, 1240, 1349, 1366], "interpolate_bi": [838, 1349], "interpolationmethod": [521, 838, 1135, 1349], "interpret": [134, 136, 148, 149, 162, 349, 405, 954, 1010], "intersect": [41, 349, 567, 960, 1184, 1376], "interv": [239, 281, 319, 349, 438, 472, 485, 517, 523, 634, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 796, 797, 825, 826, 838, 878, 903, 954, 1048, 1062, 1064, 1065, 1071, 1073, 1075, 1076, 1079, 1081, 1082, 1085, 1089, 1098, 1099, 1132, 1137, 1223, 1349, 1366], "intoexpr": [145, 209, 238, 239, 281, 287, 288, 292, 295, 312, 323, 324, 328, 349, 364, 382, 401, 404, 407, 418, 441, 445, 470, 494, 500, 509, 517, 519, 522, 523, 546, 566, 567, 568, 569, 627, 641, 642, 650, 652, 654, 656, 658, 661, 663, 665, 669, 671, 680, 685, 695, 697, 709, 712, 713, 714, 716, 717, 718, 719, 720, 736, 744, 754, 756, 761, 764, 765, 766, 767, 768, 770, 772, 775, 779, 786, 796, 802, 804, 807, 813, 816, 820, 822, 838, 854, 877, 878, 903, 905, 906, 909, 912, 917, 924, 925, 930, 954, 987, 1006, 1009, 1012, 1054, 1110, 1116, 1134, 1136, 1137, 1163, 1229, 1230, 1249, 1253, 1279, 1294, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1349], "intoexprcolumn": [230, 244, 277, 349, 381, 385, 386, 393, 417, 418, 427, 472, 500, 503, 545, 553, 556, 565, 570, 628, 632, 668, 671, 692, 698, 701, 711, 722, 726, 731, 743, 744, 758, 763, 777, 778, 780, 781, 792, 793, 797, 825, 826, 828, 838, 874, 900, 909, 954, 986, 990, 991, 998, 1036, 1080, 1085, 1098, 1116, 1162, 1170, 1173, 1182, 1187, 1218, 1274, 1280, 1283, 1293, 1304, 1308, 1313, 1349], "introduc": [55, 97, 721, 723, 724, 1303, 1305, 1306], "introduct": 1376, "intuit": [507, 838, 960], "invalid": [38, 48, 120, 148, 149, 162, 210, 349, 419, 700, 701, 726, 745, 838, 954, 1007, 1023, 1282, 1283, 1308, 1349], "invalid_valu": 1007, "invalidoperationerror": [642, 838, 1230, 1349, 1375], "invari": [888, 954], "invers": [366, 367, 368, 369, 370, 371, 838, 971, 972, 973, 974, 975, 976, 1330, 1349, 1374], "invert": 960, "invok": [202, 585, 838], "involv": [230, 277, 349, 874, 900, 954], "io": [36, 38, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 146, 148, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 218, 289, 349, 440, 508, 600, 838, 865, 907, 954], "io_sourc": 143, "iobas": [45, 46, 157, 158, 218, 289, 349, 440, 600, 604, 838, 865, 907, 954], "ipc": [43, 44, 49, 154, 155, 156, 165, 168, 349, 850, 954], "ipccompress": [43, 44, 49, 349, 954], "is_between": [838, 1349], "is_dupl": [349, 838, 1349], "is_elementwis": [145, 585, 838], "is_empti": [349, 1349], "is_finit": [838, 1349], "is_first_distinct": [838, 1349], "is_in": [106, 230, 349, 838, 1349], "is_infinit": [838, 1349], "is_last_distinct": [838, 1349], "is_nan": [221, 349, 838, 867, 954, 1349], "is_not_nan": [838, 1349], "is_not_nul": [277, 349, 838, 900, 954, 1349], "is_nul": [222, 349, 838, 868, 954, 1349], "is_numer": 1380, "is_odd": [287, 349, 905, 954, 960], "is_selector": 960, "is_sort": 1349, "is_uniqu": [349, 838, 1349], "isn": [95, 143, 828], "iso": [458, 477, 486, 487, 1067, 1090, 1099, 1100, 1372], "iso8601": [148, 149, 162, 477, 1090], "iso_lang": 1372, "iso_year": 489, "isodow": 1373, "isoweek": 1373, "isoyear": 1373, "issu": [99, 100, 103, 104, 107, 114, 116, 127, 148, 149, 150, 162, 349, 435, 436, 738, 838, 1045, 1046, 1320, 1349, 1377], "ital": [41, 349], "item": [14, 64, 149, 237, 282, 285, 349, 381, 385, 386, 441, 499, 545, 547, 554, 556, 565, 668, 714, 838, 986, 990, 991, 1050, 1114, 1162, 1164, 1171, 1173, 1182, 1247, 1296, 1349], "iter": [56, 62, 63, 64, 74, 129, 130, 133, 143, 145, 150, 181, 183, 209, 219, 230, 238, 239, 250, 251, 252, 255, 277, 281, 282, 283, 284, 287, 288, 295, 312, 313, 323, 324, 327, 328, 349, 418, 437, 445, 503, 627, 680, 736, 744, 754, 756, 761, 763, 764, 765, 766, 767, 775, 802, 804, 807, 816, 820, 822, 828, 834, 838, 854, 866, 874, 877, 878, 884, 900, 903, 905, 906, 912, 917, 924, 925, 930, 954, 959, 960, 1047, 1054, 1119, 1248, 1349, 1380], "iter_batch": 150, "iter_column": 349, "iter_row": [252, 282, 283, 284, 349], "iter_slic": 349, "its": [75, 137, 170, 225, 307, 349, 449, 472, 485, 494, 585, 645, 680, 735, 828, 838, 862, 869, 923, 954, 958, 1030, 1058, 1085, 1098, 1108, 1110, 1233, 1330, 1349, 1379], "itself": [176, 349, 352, 353, 586, 649, 651, 653, 655, 657, 659, 660, 662, 664, 762, 814, 815, 838, 886, 954, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1349, 1354, 1358, 1359, 1377], "ix": [273, 349], "j": [313, 349, 1368], "jax": [306, 349, 1328, 1349], "jax_enable_x64": [306, 349], "jaxexporttyp": [306, 349], "jjk": 960, "jkl": [693, 1275], "jklmn": 1372, "job": [855, 954], "join": [48, 49, 50, 51, 55, 56, 62, 63, 64, 97, 129, 230, 254, 255, 277, 318, 349, 503, 521, 627, 683, 817, 838, 859, 860, 870, 874, 883, 884, 897, 900, 910, 921, 926, 954, 1265, 1359, 1361, 1367, 1376, 1377], "join_asof": [253, 349, 882, 954], "join_wher": [349, 954], "joinstrategi": [56, 253, 349, 882, 954], "joinvalid": [253, 349, 882, 954], "jpy": 1380, "json": [2, 3, 5, 6, 45, 46, 144, 145, 157, 158, 164, 166, 195, 218, 289, 349, 440, 508, 600, 604, 700, 701, 733, 838, 850, 865, 907, 954, 1282, 1283, 1316], "json_path": [701, 1283], "json_path_match": [700, 1282], "json_stat": 5, "json_str": [157, 158], "json_val": [701, 1283], "jsonencod": 144, "jsonpath": [700, 701, 1282, 1283], "jst": [137, 960], "jul": [721, 1303, 1372], "juli": [1090, 1372, 1373], "just": [41, 135, 150, 162, 264, 316, 349, 892, 920, 954, 960], "k": [209, 284, 312, 313, 349, 417, 418, 432, 535, 743, 744, 838, 854, 917, 954, 1022, 1042, 1152, 1334, 1349], "k_2": [677, 838, 1260, 1349], "k_3": [677, 838, 1260, 1349], "kadokawa": [704, 1286], "kanji": 960, "karen": [273, 349], "kathmandu": [1060, 1061, 1088], "kb": [225, 349, 406, 1011, 1108, 1349], "kde": [1349, 1354], "keep": [56, 148, 149, 158, 162, 165, 166, 230, 314, 318, 319, 349, 508, 585, 603, 611, 641, 764, 838, 918, 921, 954, 1229, 1349], "kei": [38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 56, 61, 64, 141, 142, 152, 158, 160, 162, 163, 164, 165, 166, 167, 192, 207, 239, 251, 253, 254, 265, 271, 278, 280, 283, 284, 318, 349, 503, 586, 641, 642, 709, 777, 780, 820, 838, 878, 882, 883, 893, 899, 901, 902, 921, 954, 960, 964, 1229, 1230, 1291, 1349, 1365], "kept": [314, 349, 918, 954], "keyedpartit": 142, "keyedpartitioncontext": [52, 54, 141], "keyerror": 17, "keystrok": 834, "keyword": [40, 152, 160, 163, 178, 182, 192, 215, 238, 272, 282, 287, 288, 308, 323, 324, 328, 349, 503, 631, 736, 816, 820, 828, 838, 877, 896, 905, 906, 924, 925, 930, 954, 1331, 1349, 1362], "kl": 708, "kleen": [361, 363, 753, 754, 755, 756, 838, 967, 968, 1349], "klmnoopqrstuvwxyz": [252, 349], "knight": 1358, "know": [56, 150, 273, 316, 349, 577, 585, 838, 920, 954], "known": [154, 196, 398, 577, 937, 1003, 1194], "kurtosi": [838, 1349], "kuzu_db_conn": 150, "kwarg": [32, 33, 37, 55, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 145, 147, 150, 151, 178, 180, 182, 195, 199, 215, 230, 272, 277, 308, 349, 352, 631, 838, 874, 896, 900, 929, 954, 1331, 1349, 1354, 1362, 1377], "k\u00f9zudb": 150, "l": [796, 797], "l1": 64, "l2": 64, "label": [239, 306, 311, 349, 352, 353, 438, 634, 648, 649, 651, 653, 655, 657, 660, 662, 664, 838, 878, 897, 954, 1048, 1223, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1349, 1354], "label_column": [311, 349], "labelangl": [349, 352, 1349, 1354], "lag": [292, 349, 393, 570, 671, 766, 838, 909, 954, 998, 1187, 1253, 1349], "lake": [40, 152, 163, 349, 850], "lambda": [52, 95, 162, 232, 258, 272, 273, 278, 335, 349, 398, 495, 496, 577, 585, 586, 611, 612, 772, 773, 786, 799, 800, 812, 838, 888, 896, 901, 937, 954, 1003, 1111, 1112, 1194, 1202, 1349], "land": [445, 1054], "languag": [162, 239, 254, 281, 319, 349, 467, 472, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1098, 1110, 1349], "larg": [11, 12, 15, 56, 150, 153, 159, 167], "large_str": [252, 301, 308, 349], "larger": [11, 48, 49, 50, 51, 507, 768, 838, 954], "largest": [209, 312, 349, 418, 743, 744, 838, 854, 917, 954, 1334, 1349], "last": [40, 158, 162, 165, 166, 171, 172, 173, 174, 241, 254, 257, 273, 284, 295, 300, 307, 314, 343, 349, 374, 385, 394, 437, 453, 464, 468, 486, 529, 554, 572, 575, 577, 610, 611, 613, 615, 617, 618, 627, 642, 679, 680, 698, 714, 722, 739, 761, 823, 834, 838, 883, 912, 916, 918, 945, 954, 960, 979, 990, 999, 1047, 1062, 1077, 1081, 1099, 1131, 1144, 1156, 1171, 1189, 1192, 1230, 1262, 1280, 1296, 1304, 1321, 1330, 1349, 1370, 1372], "last_column": [41, 349], "later": [254, 289, 349, 600, 883, 907, 954], "latest": [33, 131, 152, 163, 206, 470, 471, 598, 721, 724, 779, 1083, 1084, 1303, 1306], "latt": 960, "latter": [41, 131, 227, 349, 1115, 1349], "lazi": [1, 48, 49, 50, 51, 52, 64, 148, 154, 158, 160, 162, 178, 254, 272, 273, 296, 349, 586, 788, 810, 813, 829, 838, 864, 882, 883, 926, 930, 931, 933, 935, 937, 938, 939, 940, 941, 942, 943, 944, 954, 960, 1358, 1359, 1360, 1361, 1362, 1364, 1377, 1380], "lazili": [148, 149, 154, 158, 160, 162, 163, 164, 165, 166, 167, 860, 954], "lazy_fram": [62, 63, 129], "lazyfram": [0, 1, 10, 56, 57, 58, 59, 60, 62, 63, 64, 95, 129, 143, 148, 154, 158, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 178, 192, 213, 218, 256, 272, 273, 289, 296, 349, 440, 503, 577, 600, 816, 817, 838, 850, 951, 952, 953, 959, 960, 1358, 1359, 1362, 1364, 1377, 1378, 1380], "lazyframeext": [899, 954], "lazygroupbi": [877, 878, 903, 954], "lbl": [306, 311, 349], "ldf": [1, 930, 931, 933, 935, 938, 939, 940, 941, 942, 943, 944], "ldot": [494, 838, 1110, 1349], "le": [689, 838, 1349], "lead": [15, 47, 95, 137, 143, 168, 262, 290, 292, 299, 349, 393, 509, 512, 570, 577, 585, 586, 670, 671, 716, 718, 768, 804, 822, 838, 888, 908, 909, 937, 954, 998, 1187, 1202, 1251, 1253, 1298, 1300, 1349], "leap": [457, 467, 1066, 1080], "leap_year": 457, "learn": [311, 349], "least": [64, 110, 273, 349, 414, 415, 628, 692, 694, 764, 768, 770, 838, 1019, 1020, 1218, 1274, 1276, 1349, 1370], "leav": [6, 264, 316, 349, 577, 892, 920, 954], "left": [16, 17, 41, 56, 171, 172, 173, 174, 239, 253, 254, 281, 318, 349, 438, 493, 494, 495, 496, 521, 523, 634, 647, 650, 652, 654, 656, 658, 661, 663, 665, 669, 742, 764, 772, 773, 777, 778, 780, 781, 786, 796, 797, 812, 825, 826, 828, 838, 878, 882, 883, 903, 921, 954, 1048, 1109, 1110, 1111, 1112, 1137, 1223, 1249, 1332, 1349, 1361, 1365, 1370], "left_clos": [438, 634, 838, 1048, 1223, 1349], "left_on": [253, 254, 318, 349, 882, 883, 921, 954], "left_right": [253, 318, 349, 882, 921, 954], "leftmost": [669, 838, 1249, 1349, 1372], "len": [13, 178, 182, 213, 252, 273, 326, 330, 335, 349, 431, 586, 597, 599, 637, 645, 769, 792, 796, 838, 861, 923, 928, 932, 937, 954, 959, 1041, 1233, 1349], "len_byt": [13, 423, 703, 704, 1028, 1285], "len_char": [422, 702, 1027, 1284], "length": [64, 65, 83, 145, 153, 159, 162, 176, 180, 237, 239, 281, 294, 349, 352, 422, 437, 472, 485, 571, 577, 598, 637, 641, 642, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 678, 698, 702, 703, 705, 706, 709, 711, 722, 731, 765, 796, 797, 810, 813, 814, 815, 829, 838, 878, 897, 903, 911, 954, 1027, 1034, 1047, 1058, 1085, 1098, 1188, 1194, 1215, 1229, 1230, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1261, 1280, 1284, 1285, 1287, 1288, 1291, 1293, 1304, 1313, 1349, 1366, 1367, 1370], "leq": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "less": [54, 162, 254, 349, 507, 537, 584, 585, 714, 838, 883, 954, 1296, 1380], "letter": [226, 332, 343, 349, 497, 685, 693, 695, 697, 709, 729, 784, 838, 871, 934, 945, 954, 960, 1267, 1275, 1277, 1279, 1291, 1311, 1372], "level": [11, 41, 43, 44, 47, 49, 51, 144, 162, 165, 166, 167, 232, 258, 269, 296, 301, 349, 353, 503, 838, 850, 913, 954, 1324, 1349, 1377], "lexic": [68, 960, 1031], "lf": [10, 48, 49, 50, 51, 59, 95, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 907, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 927, 928, 932, 936, 954, 1366, 1377, 1380], "lf1": [817, 913, 954, 1362, 1364, 1378], "lf2": [817, 913, 954, 1362, 1364, 1378], "lf3": [954, 1362], "lf4": [954, 1362], "lf5": 954, "lf6": 954, "lf_other": [926, 954], "lib": [838, 1324, 1349], "librari": [1, 112, 145, 150, 153, 585, 838, 958, 1380], "life": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "lifetim": [202, 849, 1364], "light": [41, 349], "like": [36, 38, 40, 43, 44, 45, 46, 47, 63, 131, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 218, 239, 246, 248, 253, 284, 289, 306, 307, 349, 352, 440, 446, 508, 549, 585, 603, 637, 692, 717, 718, 749, 834, 838, 855, 860, 865, 878, 954, 1055, 1166, 1225, 1274, 1338, 1349, 1354], "limit": [11, 12, 51, 52, 150, 151, 184, 229, 349, 502, 838, 873, 954, 1118, 1349, 1367, 1376], "line": [11, 21, 41, 148, 149, 153, 162, 237, 246, 248, 349, 352, 692, 1274, 1349, 1354], "line_termin": [38, 48, 349, 954], "linear": [217, 245, 275, 341, 349, 521, 522, 544, 589, 635, 657, 658, 766, 767, 811, 838, 864, 881, 898, 943, 954, 1049, 1135, 1136, 1161, 1224, 1240, 1349], "linearli": 797, "lineitem": [139, 149, 151], "link": 958, "list": [1, 14, 34, 40, 41, 56, 57, 59, 62, 63, 65, 71, 87, 104, 129, 130, 132, 133, 134, 136, 137, 139, 142, 143, 146, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 176, 177, 178, 182, 189, 190, 191, 197, 214, 219, 223, 225, 226, 230, 236, 238, 239, 243, 251, 268, 271, 277, 281, 282, 283, 284, 287, 295, 302, 303, 311, 313, 314, 315, 317, 323, 328, 329, 349, 359, 386, 397, 398, 399, 438, 445, 499, 505, 509, 518, 527, 585, 586, 598, 599, 627, 634, 640, 643, 648, 649, 651, 653, 655, 657, 660, 662, 664, 679, 680, 691, 693, 695, 697, 712, 732, 734, 735, 742, 761, 763, 766, 777, 778, 780, 781, 783, 791, 793, 797, 798, 800, 818, 820, 826, 834, 838, 862, 869, 871, 874, 877, 878, 900, 905, 912, 918, 919, 924, 926, 930, 931, 954, 959, 960, 991, 1002, 1003, 1004, 1034, 1048, 1054, 1108, 1114, 1123, 1126, 1132, 1133, 1142, 1202, 1223, 1231, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1267, 1273, 1275, 1277, 1279, 1291, 1294, 1329, 1332, 1349, 1358, 1363, 1367, 1369, 1372, 1379, 1380], "list_catalog": 200, "list_namespac": 200, "list_of_seri": 800, "list_tabl": 200, "listtostructwidthstrategi": [577, 1194], "lit": [1, 360, 401, 523, 594, 610, 696, 765, 766, 772, 786, 810, 813, 829, 838, 1118, 1349], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 48, 49, 50, 51, 150, 152, 158, 160, 162, 163, 165, 166, 167, 181, 182, 183, 192, 195, 199, 268, 287, 288, 292, 318, 323, 324, 349, 360, 401, 420, 424, 427, 449, 470, 491, 492, 500, 507, 511, 513, 523, 537, 584, 594, 606, 608, 621, 622, 632, 641, 642, 684, 685, 686, 695, 696, 697, 707, 708, 709, 736, 737, 745, 754, 756, 758, 764, 765, 766, 767, 775, 776, 779, 792, 796, 798, 802, 804, 807, 816, 820, 822, 824, 838, 873, 905, 906, 909, 921, 924, 925, 954, 960, 1006, 1036, 1058, 1083, 1106, 1116, 1137, 1214, 1229, 1230, 1248, 1250, 1253, 1266, 1267, 1268, 1277, 1278, 1279, 1289, 1290, 1291, 1349, 1372], "littl": [283, 349, 405, 1010], "lmn": 960, "ln": [493, 494, 495, 496, 838, 1109, 1110, 1111, 1112, 1349, 1370], "ln_a": 1371, "load": [3, 5, 6, 133, 135, 145, 150, 152, 153, 159, 163, 164, 181, 183, 349, 838, 850, 954, 1380], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 153, "load_tabl": 153, "load_workbook": 153, "loader": [311, 349], "lobster": [696, 1278], "loc": [349, 353], "local": [4, 40, 150, 152, 163, 164, 167, 349, 485, 629, 630, 838, 1026, 1030, 1060, 1061, 1085, 1088, 1098, 1219, 1220, 1349, 1359], "localhost": 150, "localis": [472, 485, 1098], "locat": [41, 160, 162, 165, 167, 227, 279, 309, 315, 349, 669, 838, 919, 954, 1115, 1123, 1248, 1249, 1349], "lock": 184, "log": [30, 58, 418, 490, 582, 608, 632, 744, 838, 1104, 1349, 1370], "log10": [838, 1349, 1370], "log10_a": 1371, "log16_a": 1371, "log1p": [838, 1349, 1370], "log1p_a": 1371, "log2": 1370, "logarithm": [580, 581, 582, 838, 1197, 1198, 1199, 1349, 1371], "logic": [64, 258, 335, 349, 352, 353, 361, 363, 440, 586, 742, 753, 754, 755, 756, 800, 838, 865, 870, 882, 899, 907, 937, 954, 967, 968, 1202, 1330, 1332, 1349, 1354], "london": [450, 454, 471, 1059, 1063, 1084], "london_timezon": [471, 1084], "london_to_amsterdam": [471, 1084], "long": [226, 264, 273, 316, 317, 349, 405, 871, 892, 920, 954, 1010], "longer": [148, 149, 162], "longest": 577, "look": [11, 239, 349, 401, 577, 878, 954, 1006], "lookup": 834, "loop": [150, 586, 838], "lose": [447, 1056], "lossi": [148, 149, 162], "lot": 54, "love": [685, 709, 1267, 1291], "low": [18, 150, 427, 634, 838, 1223, 1349], "low_memori": [148, 149, 158, 160, 162, 166, 167], "lower": [162, 217, 239, 275, 341, 349, 427, 523, 583, 611, 635, 639, 657, 658, 758, 777, 778, 780, 781, 796, 797, 811, 825, 826, 838, 864, 878, 898, 943, 954, 1036, 1049, 1137, 1200, 1224, 1227, 1240, 1337, 1349, 1367, 1370], "lower_bound": [239, 349, 427, 523, 838, 878, 954, 1036, 1137, 1337, 1349], "lowercas": [617, 727, 729, 1309, 1311, 1372], "lowest": [583, 838], "lru_cach": [258, 349, 586, 838, 1202, 1349], "lst": 177, "lt": [170, 503, 751, 838, 1349], "ltrim": 1370, "lyric": [685, 709, 1267, 1291], "lz4": [43, 44, 47, 49, 51, 349, 954], "lzo": [47, 51, 349, 954], "m": [71, 73, 253, 349, 446, 447, 449, 454, 455, 474, 476, 477, 488, 692, 721, 723, 724, 728, 779, 780, 781, 782, 788, 796, 882, 954, 960, 1055, 1056, 1058, 1063, 1064, 1087, 1089, 1090, 1101, 1274, 1303, 1305, 1306, 1310, 1362, 1372, 1373], "m_2": [677, 838, 1260, 1349], "m_3": [677, 838, 1260, 1349], "m_i": [677, 838, 1260, 1349], "machin": 1380, "maco": 170, "made": [41, 150, 349, 477, 1090], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 64, 72, 78, 130, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 173, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 202, 217, 218, 225, 227, 239, 253, 254, 255, 258, 281, 289, 296, 306, 308, 311, 318, 319, 349, 352, 353, 422, 437, 438, 440, 445, 446, 447, 458, 467, 472, 474, 485, 497, 517, 552, 577, 585, 586, 597, 600, 634, 647, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 695, 697, 700, 702, 708, 763, 765, 772, 773, 777, 778, 780, 781, 786, 796, 797, 812, 825, 826, 838, 859, 860, 864, 865, 878, 882, 883, 884, 888, 903, 907, 913, 921, 927, 928, 937, 954, 1027, 1030, 1031, 1047, 1048, 1049, 1054, 1055, 1056, 1067, 1080, 1085, 1087, 1098, 1108, 1115, 1132, 1169, 1202, 1223, 1235, 1238, 1240, 1241, 1277, 1279, 1282, 1284, 1328, 1331, 1333, 1349, 1354, 1380], "main": [170, 860, 954], "maintain": [48, 49, 50, 51, 295, 349, 399, 578, 669, 680, 746, 761, 838, 864, 912, 954, 1004, 1195, 1249, 1335, 1349], "maintain_ord": [48, 49, 50, 51, 238, 253, 271, 273, 295, 314, 318, 319, 329, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 359, 399, 408, 413, 416, 418, 509, 512, 578, 586, 680, 744, 746, 761, 838, 860, 870, 877, 882, 897, 910, 912, 918, 921, 931, 933, 935, 938, 939, 940, 941, 942, 943, 944, 954, 1004, 1195, 1335, 1349], "maintainorderjoin": [253, 318, 349, 882, 921, 954], "major": [153, 306, 349], "make": [41, 64, 87, 130, 131, 135, 145, 148, 149, 152, 153, 154, 156, 160, 163, 265, 269, 276, 307, 319, 349, 352, 495, 496, 617, 618, 627, 640, 713, 838, 893, 954, 1111, 1112, 1295, 1330, 1349], "man": [710, 1292], "manag": [55, 96, 97, 199, 849, 850, 1364, 1377], "managed_shallow_clon": 199, "mandatori": [41, 349], "mango": [420, 424, 689, 715, 1024, 1029, 1271, 1297], "mani": [150, 151, 167, 227, 349, 695, 697, 709, 1115, 1277, 1291, 1349, 1353], "manner": 150, "many_to_mani": [253, 349, 882, 954], "many_to_on": [253, 349, 882, 954], "map": [52, 54, 87, 132, 133, 148, 149, 150, 151, 154, 155, 160, 161, 162, 165, 178, 210, 213, 231, 251, 258, 278, 282, 283, 284, 286, 302, 349, 360, 472, 485, 585, 586, 610, 612, 613, 615, 617, 618, 641, 642, 709, 749, 799, 838, 856, 901, 904, 954, 959, 960, 1049, 1085, 1098, 1202, 1229, 1230, 1291, 1338, 1349, 1359, 1361, 1362, 1377], "map_": 116, "map_batch": [838, 954], "map_el": [107, 258, 349, 585, 752, 838, 1349], "map_field": [614, 616], "map_row": 349, "mapelementsstrategi": [586, 838], "mapping_strategi": [627, 838], "march": [474, 1087], "mariadb": 151, "mark": [41, 144, 349, 419, 838, 1023, 1349], "mark_area": [1349, 1354], "mark_attr": [349, 352, 1349, 1354], "mark_bar": [349, 352, 1349, 1354], "mark_lin": [349, 352], "mark_point": [349, 352], "markdown": [7, 21, 202], "marker": [41, 349], "mask": [167, 178, 182, 246, 248, 349, 402, 524, 526, 529, 534, 629, 630, 684, 687, 696, 838, 1007, 1119, 1137, 1138, 1141, 1144, 1150, 1219, 1220, 1250, 1266, 1269, 1278, 1340, 1349], "mass": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "massag": [264, 316, 349, 892, 920, 954], "match": [40, 41, 64, 71, 95, 118, 130, 132, 133, 134, 136, 143, 148, 150, 157, 158, 160, 166, 167, 171, 172, 173, 174, 210, 229, 230, 253, 254, 277, 282, 318, 349, 420, 424, 593, 594, 595, 641, 642, 659, 684, 685, 686, 689, 692, 693, 695, 696, 697, 700, 701, 707, 708, 709, 715, 721, 723, 724, 828, 834, 838, 856, 873, 882, 883, 900, 921, 954, 960, 1024, 1029, 1107, 1229, 1230, 1241, 1266, 1267, 1268, 1271, 1274, 1275, 1277, 1278, 1279, 1282, 1283, 1289, 1290, 1291, 1297, 1303, 1305, 1306, 1349, 1372], "matches_overlap": [695, 697, 1279], "matches_supertyp": [229, 349, 873, 954], "materi": [143, 148, 154, 158, 160, 258, 284, 335, 349, 859, 897, 937, 947, 954, 960, 1202, 1349], "materialis": [251, 252, 282, 283, 349], "materialized_view": 199, "math": [1, 11, 60, 273, 349, 439, 838, 1038, 1040, 1258, 1322, 1349, 1370, 1374, 1376], "mathemat": [745, 783, 838, 1370], "mathshortcut": [1, 60], "matplotlib": [170, 601, 897, 910, 954], "matter": [239, 251, 281, 283, 284, 303, 349, 647, 717, 718, 838, 878, 903, 954], "max": [10, 26, 41, 47, 51, 144, 217, 229, 238, 260, 273, 281, 349, 353, 433, 502, 577, 585, 627, 637, 641, 642, 647, 649, 650, 670, 714, 765, 777, 780, 802, 818, 838, 864, 873, 877, 903, 954, 1043, 1049, 1118, 1194, 1225, 1236, 1251, 1296, 1349, 1358, 1367, 1370], "max_a": [281, 349, 647, 838, 903, 954], "max_binary_s": 150, "max_col": [176, 178], "max_colname_length": [237, 349], "max_color": [41, 349], "max_data_s": 182, "max_elem": 1367, "max_horizont": [349, 801], "max_items_per_column": [237, 349], "max_level": 144, "max_siz": [53, 177, 178, 180, 182, 1380], "max_text_s": 150, "max_valu": 1380, "max_width": [577, 1194], "maxim": [336, 372, 838, 938, 977, 1349], "maximum": [11, 27, 38, 47, 48, 51, 53, 72, 133, 136, 148, 149, 150, 153, 157, 158, 159, 162, 166, 168, 176, 177, 178, 180, 182, 237, 239, 259, 260, 349, 379, 423, 542, 587, 619, 629, 637, 698, 700, 703, 711, 722, 801, 802, 838, 878, 889, 954, 984, 1028, 1068, 1159, 1203, 1211, 1219, 1225, 1280, 1282, 1285, 1293, 1304, 1349, 1366], "mb": [225, 349, 406, 1108, 1349], "me": [685, 709, 729, 1267, 1291, 1311], "mean": [47, 51, 62, 129, 148, 149, 154, 160, 162, 165, 202, 217, 229, 238, 239, 254, 262, 273, 281, 319, 328, 349, 467, 472, 485, 499, 502, 507, 647, 650, 651, 652, 654, 656, 658, 661, 663, 665, 677, 683, 692, 699, 777, 778, 780, 781, 782, 804, 825, 826, 828, 838, 864, 873, 877, 878, 883, 888, 903, 930, 954, 1049, 1080, 1085, 1098, 1114, 1118, 1237, 1260, 1265, 1274, 1281, 1349, 1366, 1367], "mean_horizont": [349, 803], "measur": [264, 316, 349, 353, 892, 920, 954], "measure_a": [349, 353], "measure_b": [349, 353], "median": [217, 273, 349, 502, 653, 654, 838, 864, 926, 954, 1049, 1238, 1349, 1370], "mediat": 1377, "medium": [41, 349], "megan": [265, 349, 893, 954], "melt": [316, 349, 920, 954], "member": [239, 349, 878, 954, 1142, 1349], "membership": [381, 545, 986, 1162], "memori": [10, 15, 47, 51, 62, 63, 64, 130, 131, 134, 135, 136, 148, 149, 150, 152, 153, 154, 158, 160, 162, 163, 165, 166, 167, 206, 227, 258, 283, 284, 293, 307, 335, 349, 627, 638, 672, 838, 859, 860, 870, 897, 910, 929, 954, 1115, 1202, 1226, 1254, 1255, 1330, 1349], "memory_map": [154, 160, 165], "memory_resourc": 929, "merg": [40, 253, 254, 265, 349, 882, 883, 893, 954], "merge_sort": [349, 954], "messi": [692, 694, 1274, 1276], "met": 828, "meta": [98, 440, 690, 838, 1272], "metadata": [0, 48, 49, 50, 51, 164, 188, 192, 850, 954], "metastor": 193, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 52, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 128, 131, 140, 141, 142, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 168, 175, 178, 182, 187, 193, 194, 196, 197, 202, 204, 213, 217, 218, 221, 222, 227, 234, 238, 245, 251, 258, 269, 275, 282, 283, 284, 292, 314, 323, 330, 335, 341, 349, 358, 361, 362, 393, 427, 440, 474, 477, 491, 492, 500, 507, 508, 511, 513, 521, 537, 570, 584, 586, 604, 606, 608, 610, 611, 613, 615, 617, 618, 621, 622, 623, 626, 632, 635, 637, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 671, 685, 695, 697, 709, 717, 718, 719, 720, 725, 731, 737, 745, 747, 752, 768, 800, 811, 830, 831, 833, 834, 838, 839, 840, 843, 844, 845, 846, 847, 850, 860, 864, 865, 867, 868, 881, 898, 909, 918, 924, 929, 932, 937, 943, 954, 959, 962, 969, 998, 1036, 1049, 1087, 1090, 1105, 1106, 1115, 1116, 1125, 1127, 1135, 1154, 1187, 1201, 1202, 1213, 1214, 1224, 1225, 1240, 1253, 1267, 1277, 1279, 1291, 1307, 1313, 1332, 1341, 1343, 1345, 1349, 1350, 1353, 1355, 1356, 1357, 1359, 1363], "metric": 150, "micro": [473, 1086], "microsecond": [71, 73, 239, 251, 254, 281, 283, 284, 303, 319, 349, 467, 470, 472, 477, 480, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 779, 780, 781, 782, 824, 825, 826, 838, 878, 883, 897, 903, 954, 960, 1080, 1083, 1085, 1093, 1098, 1110, 1349, 1373], "microsoft": [34, 41, 349], "mid_color": [41, 349], "midnight": 88, "midpoint": [217, 275, 341, 349, 635, 657, 658, 811, 838, 864, 898, 943, 954, 1049, 1224, 1240, 1349], "might": [148, 149, 162, 184, 253, 273, 307, 316, 349, 586, 747, 838, 882, 912, 920, 954], "millennia": 1373, "millennium": 1373, "milli": [473, 1086], "millisecond": [239, 254, 281, 319, 349, 456, 462, 467, 472, 481, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 780, 781, 782, 796, 825, 826, 838, 878, 883, 903, 954, 960, 1080, 1085, 1094, 1098, 1110, 1349, 1373], "milliseconds_diff": [480, 481, 483], "mimic": 766, "min": [41, 47, 51, 145, 217, 229, 267, 273, 281, 349, 434, 502, 586, 627, 637, 647, 655, 656, 777, 780, 807, 816, 838, 864, 873, 903, 954, 1044, 1049, 1118, 1225, 1239, 1349, 1367, 1370, 1373, 1380], "min_a": [281, 349, 647, 838, 903, 954], "min_col": [176, 178], "min_color": [41, 349], "min_elem": 1367, "min_horizont": [349, 806, 816], "min_sampl": [437, 493, 495, 496, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 814, 815, 838, 1047, 1109, 1111, 1112, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1349], "min_siz": [177, 178, 180, 182, 1380], "min_valu": 1380, "mincol": 176, "minim": [339, 373, 380, 543, 672, 680, 838, 941, 978, 985, 1160, 1206, 1254, 1349], "minimum": [47, 51, 176, 177, 178, 180, 182, 232, 266, 267, 349, 493, 495, 496, 605, 620, 630, 637, 806, 807, 838, 894, 954, 1074, 1109, 1111, 1112, 1212, 1220, 1225, 1349, 1366, 1380], "minu": [467, 623, 838, 1080], "minut": [239, 254, 281, 319, 349, 456, 459, 461, 466, 467, 470, 472, 473, 482, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 779, 780, 781, 782, 824, 825, 826, 838, 878, 883, 903, 954, 960, 1080, 1083, 1085, 1095, 1098, 1110, 1349, 1373], "minutes_diff": 482, "misc": 1364, "miscellan": 850, "mismatch": [64, 121, 158, 166, 171, 173], "miss": [64, 148, 149, 162, 228, 234, 349, 493, 495, 496, 501, 530, 531, 577, 838, 872, 954, 1109, 1111, 1112, 1117, 1349], "missing_utf8_is_empty_str": [148, 149, 162], "mix": [12, 254, 307, 349, 765, 817, 883, 913, 954, 960, 1049, 1349], "mixin": 1, "mkdir": [48, 49, 50, 51, 52, 54, 954], "mlnm": 460, "mm": [41, 349], "mn": 1372, "mno": [17, 21], "mnop": 1372, "mo": 782, "mocha": 960, "mod": [838, 1370], "mode": [39, 40, 41, 42, 48, 49, 50, 51, 171, 173, 273, 296, 349, 693, 810, 813, 829, 838, 859, 870, 897, 910, 954, 1275, 1349, 1358, 1359, 1377], "model": [311, 349], "modifi": [52, 53, 54, 148, 149, 162, 184, 202, 227, 243, 250, 251, 321, 349, 375, 471, 488, 684, 692, 693, 696, 707, 708, 727, 729, 730, 838, 969, 1084, 1101, 1115, 1266, 1274, 1275, 1278, 1289, 1290, 1309, 1311, 1312, 1349], "modul": [100, 108, 153, 837, 958, 960, 1380], "modulu": [606, 838], "moment": [47, 48, 49, 50, 51, 62, 63, 215, 349, 535, 677, 838, 859, 860, 870, 897, 910, 954, 1152, 1260, 1349], "mon": [349, 352, 1373], "mondai": [239, 349, 445, 485, 487, 763, 878, 954, 1054, 1098, 1100], "monkei": [705, 706, 1287, 1288], "month": [239, 254, 281, 319, 349, 453, 464, 465, 467, 470, 472, 474, 477, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 776, 777, 778, 779, 780, 781, 782, 825, 826, 838, 878, 883, 903, 954, 1062, 1077, 1078, 1080, 1083, 1085, 1087, 1090, 1098, 1110, 1349, 1373], "month_nam": [474, 477], "monthbegin": [465, 1078], "monthend": [464, 1077], "moos": 960, "more": [21, 41, 47, 51, 56, 64, 96, 97, 126, 130, 131, 132, 133, 134, 135, 136, 143, 145, 150, 151, 152, 153, 157, 158, 159, 160, 163, 164, 166, 171, 173, 178, 202, 204, 215, 217, 221, 230, 250, 251, 258, 264, 269, 277, 282, 283, 285, 296, 306, 307, 311, 314, 316, 335, 349, 353, 362, 399, 422, 503, 507, 514, 535, 565, 578, 582, 585, 586, 626, 627, 668, 677, 693, 702, 721, 723, 724, 746, 757, 769, 785, 791, 794, 803, 805, 808, 809, 818, 828, 834, 838, 864, 867, 868, 874, 892, 899, 900, 913, 918, 920, 929, 954, 958, 960, 962, 1004, 1027, 1030, 1049, 1128, 1129, 1152, 1182, 1195, 1202, 1247, 1260, 1275, 1284, 1303, 1305, 1306, 1328, 1330, 1335, 1349, 1364, 1365, 1375, 1378, 1379, 1380], "more_bi": [271, 295, 349, 680, 838, 912, 954], "more_column": [226, 315, 349, 497, 784, 838, 871, 919, 954, 960], "more_expr": [627, 761, 764, 765, 766, 767, 838], "more_nam": [732, 834], "most": [41, 130, 148, 149, 151, 162, 171, 172, 173, 174, 307, 349, 411, 412, 598, 607, 628, 642, 714, 838, 1016, 1017, 1207, 1218, 1230, 1296, 1330, 1349, 1361, 1377], "mostli": [301, 349, 503, 838], "move": [273, 284, 349, 445, 493, 494, 495, 496, 649, 651, 655, 662, 838, 1054, 1109, 1110, 1111, 1112, 1236, 1237, 1239, 1243, 1349], "mr": 929, "mssql": [39, 349], "much": [258, 317, 335, 349, 422, 423, 437, 552, 586, 702, 703, 800, 838, 937, 1027, 1028, 1047, 1169, 1202, 1284, 1285, 1349], "mul": 838, "multi": [8, 41, 148, 149, 311, 349, 497, 692, 838, 1274], "multi_fram": [41, 349], "multicolselector": 207, "multiindexselector": [207, 964], "multipl": [41, 54, 62, 63, 64, 113, 129, 148, 149, 153, 154, 158, 159, 160, 162, 165, 166, 167, 176, 178, 182, 219, 225, 227, 230, 238, 239, 243, 252, 255, 271, 273, 277, 284, 287, 295, 318, 323, 328, 349, 418, 552, 585, 591, 598, 607, 608, 627, 641, 643, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 680, 732, 744, 761, 769, 786, 799, 801, 806, 812, 818, 821, 828, 834, 838, 850, 859, 860, 866, 870, 874, 877, 878, 884, 897, 900, 905, 910, 912, 921, 924, 930, 937, 954, 969, 999, 1108, 1115, 1169, 1189, 1207, 1229, 1231, 1262, 1349, 1362, 1367], "multipli": [585, 648, 649, 651, 653, 655, 657, 660, 662, 664, 736, 838, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1349], "multithread": [295, 349, 680, 761, 838, 912, 954, 999, 1189, 1262, 1349], "must": [34, 41, 74, 95, 132, 143, 145, 148, 152, 160, 163, 164, 167, 168, 217, 226, 239, 254, 255, 265, 273, 281, 282, 349, 438, 577, 586, 601, 634, 641, 642, 647, 709, 765, 777, 778, 797, 828, 838, 864, 871, 878, 883, 884, 888, 893, 903, 910, 929, 954, 1048, 1049, 1223, 1229, 1230, 1291, 1349], "mutual": [282, 349], "my": [164, 168, 349, 352, 1349, 1354], "my_bucket": [899, 954], "my_column": 937, "my_column_": [313, 349], "my_column_0": [313, 349], "my_column_1": [313, 349], "my_column_2": [313, 349], "my_custom_aggreg": 800, "my_fil": 154, "my_holidai": [445, 763, 1054], "my_larger_than_ram_fil": [48, 49, 50, 51, 954], "my_long_fil": 162, "my_struct": 820, "mydf": 162, "myrol": 151, "mysql": 151, "n": [1, 13, 14, 18, 26, 27, 38, 46, 48, 57, 58, 59, 60, 71, 73, 139, 143, 148, 149, 153, 158, 162, 178, 211, 227, 233, 239, 241, 251, 252, 257, 258, 283, 284, 285, 292, 297, 300, 303, 305, 320, 332, 334, 343, 349, 365, 393, 398, 406, 408, 413, 416, 417, 418, 422, 423, 437, 441, 445, 447, 449, 455, 476, 488, 494, 500, 503, 510, 516, 539, 547, 553, 555, 565, 566, 570, 573, 575, 577, 579, 628, 631, 640, 660, 661, 664, 665, 668, 671, 677, 682, 698, 702, 703, 707, 708, 713, 714, 716, 717, 722, 724, 739, 743, 744, 745, 749, 750, 752, 770, 779, 780, 781, 782, 788, 790, 810, 813, 814, 815, 816, 819, 823, 827, 829, 838, 857, 876, 878, 879, 887, 909, 914, 916, 922, 934, 936, 945, 954, 960, 998, 1003, 1011, 1022, 1027, 1028, 1035, 1047, 1050, 1054, 1056, 1058, 1064, 1089, 1101, 1110, 1115, 1116, 1124, 1131, 1156, 1164, 1170, 1172, 1182, 1183, 1187, 1192, 1194, 1218, 1242, 1244, 1247, 1253, 1260, 1264, 1280, 1284, 1285, 1289, 1290, 1295, 1296, 1304, 1306, 1321, 1327, 1334, 1338, 1339, 1349, 1361, 1362, 1369, 1372, 1373, 1375, 1377, 1380], "n0": [398, 577], "n00": [1003, 1194], "n01": [1003, 1194], "n02": [1003, 1194], "n1": [398, 577], "n2": [1, 398], "n3": 1, "n_1": [503, 838], "n_2": [503, 838], "n_3": [503, 838], "n_bar": 1366, "n_bit": 1372, "n_byte": [406, 422, 423, 702, 703, 1372], "n_char": [422, 423, 702, 703, 1372], "n_chunk": [349, 969, 1115, 1226, 1349], "n_elem": 1367, "n_even": 960, "n_field_strategi": [577, 1194], "n_film": 1358, "n_foo_uniqu": 1366, "n_kilobyt": 406, "n_row": [143, 146, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 252, 349, 954], "n_thread": [148, 149], "n_uniqu": [349, 365, 838, 1349], "na": [308, 349, 715, 1331, 1349], "naiv": [449, 450, 724, 1058, 1059, 1306], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 48, 57, 58, 59, 60, 75, 87, 105, 130, 132, 133, 134, 135, 136, 141, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 173, 174, 175, 176, 178, 181, 182, 183, 188, 190, 191, 192, 193, 194, 196, 197, 209, 210, 213, 214, 219, 220, 221, 222, 226, 230, 231, 234, 235, 237, 238, 249, 250, 251, 253, 254, 255, 258, 260, 262, 264, 265, 267, 271, 273, 277, 278, 282, 283, 284, 286, 287, 288, 295, 296, 299, 302, 304, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 334, 349, 353, 360, 398, 401, 402, 404, 407, 418, 427, 438, 474, 477, 497, 503, 523, 530, 531, 532, 533, 577, 586, 591, 595, 597, 599, 603, 627, 634, 644, 680, 693, 694, 707, 708, 709, 732, 734, 736, 744, 749, 753, 754, 755, 756, 757, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 784, 785, 790, 791, 794, 801, 802, 803, 804, 805, 806, 807, 808, 811, 814, 815, 816, 817, 819, 820, 821, 822, 823, 827, 828, 834, 838, 854, 856, 861, 862, 866, 867, 868, 871, 874, 877, 882, 883, 884, 892, 893, 900, 901, 904, 905, 906, 912, 913, 917, 918, 919, 920, 921, 924, 925, 926, 927, 928, 930, 936, 954, 959, 960, 966, 1003, 1035, 1048, 1087, 1090, 1107, 1194, 1223, 1228, 1274, 1275, 1276, 1289, 1290, 1314, 1317, 1325, 1326, 1331, 1338, 1349, 1354, 1359, 1360, 1361, 1362, 1363, 1364, 1376, 1377, 1380], "name_gener": [313, 349], "named_agg": [328, 930], "named_bi": [238, 349, 877, 954], "named_expr": [287, 288, 323, 324, 349, 736, 816, 820, 905, 906, 924, 925, 954], "named_fram": [1362, 1377], "nameless": 135, "namespac": [1, 150, 188, 190, 191, 192, 196, 348, 349, 352, 732, 817, 837, 850, 952, 953, 958, 1349, 1354, 1380], "namespaceinfo": [190, 200], "nan": [135, 178, 206, 221, 228, 307, 308, 349, 443, 444, 491, 492, 501, 511, 513, 521, 530, 531, 532, 533, 537, 584, 587, 605, 619, 620, 621, 622, 648, 674, 745, 768, 838, 867, 872, 954, 972, 976, 1052, 1053, 1117, 1145, 1146, 1211, 1212, 1235, 1257, 1330, 1331, 1349, 1380], "nan_as_nul": 206, "nan_max": [838, 1349], "nan_min": [838, 1349], "nan_to_nul": [135, 349, 954, 1349], "nana": 1372, "nanmax": [619, 620, 838, 1211, 1212, 1349], "nanosecond": [88, 239, 254, 281, 319, 349, 467, 472, 473, 483, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 780, 781, 782, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1086, 1096, 1098, 1110, 1349, 1373], "nansum": [648, 838, 1235, 1349], "nativ": [11, 39, 148, 150, 153, 154, 156, 160, 198, 251, 258, 283, 284, 303, 307, 335, 349, 586, 800, 817, 838, 844, 913, 937, 954, 958, 1202, 1330, 1349, 1353, 1377, 1380], "natur": [582, 838, 1199, 1349, 1365, 1371], "ndarrai": [134, 204, 230, 277, 307, 349, 509, 669, 838, 874, 900, 954, 962, 1123, 1248, 1249, 1330, 1349], "ndjson": [50, 158, 954], "ne": [622, 838, 1214, 1349], "ne_miss": [230, 277, 349, 838, 874, 900, 954, 1106, 1349], "nearest": [58, 217, 254, 275, 341, 349, 426, 506, 521, 635, 657, 658, 811, 838, 864, 883, 898, 943, 954, 1033, 1049, 1122, 1135, 1224, 1240, 1349, 1371], "nearest_pow2": 58, "necessari": [38, 39, 48, 55, 97, 153, 307, 349, 954, 1330, 1349], "need": [64, 99, 108, 137, 148, 149, 151, 160, 162, 165, 167, 202, 239, 281, 284, 293, 349, 352, 577, 647, 672, 707, 708, 709, 725, 782, 810, 813, 829, 838, 878, 903, 954, 1254, 1289, 1290, 1291, 1307, 1349, 1354, 1380], "neg": [14, 70, 71, 72, 73, 148, 149, 154, 156, 160, 169, 241, 257, 281, 292, 294, 300, 326, 349, 393, 570, 571, 631, 632, 647, 671, 678, 698, 711, 722, 838, 903, 909, 911, 927, 928, 954, 960, 998, 1131, 1156, 1187, 1188, 1221, 1253, 1261, 1280, 1293, 1304, 1321, 1349], "negat": [624, 838, 1216, 1349], "neither": [137, 153, 159, 285, 349, 398, 577, 1003, 1194], "nest": [55, 137, 144, 179, 180, 225, 349, 850, 1108, 1349, 1377, 1380], "nesting_level": 179, "net": [693, 1275], "netherland": [254, 349, 883, 954], "netsuite_format": 195, "never": [38, 48, 150, 253, 254, 282, 349, 882, 883, 954], "new": [39, 40, 41, 42, 53, 54, 162, 202, 207, 233, 243, 244, 258, 269, 270, 273, 278, 313, 315, 317, 318, 323, 324, 349, 360, 449, 499, 508, 510, 521, 611, 612, 627, 641, 642, 646, 704, 707, 708, 713, 714, 732, 734, 834, 838, 850, 876, 901, 919, 921, 924, 925, 937, 954, 964, 966, 1058, 1114, 1124, 1215, 1228, 1229, 1230, 1234, 1289, 1290, 1295, 1296, 1314, 1317, 1326, 1349, 1377, 1379], "new_column": [148, 149, 153, 162], "new_dai": 470, "new_dat": 467, "new_df": [318, 349, 921, 954], "new_fil": [36, 38, 43, 44, 47, 349], "new_from_index": 1349, "new_id": [313, 349], "new_lf": [921, 954], "new_tabl": 1379, "new_valu": [772, 773, 786, 812], "new_york": 780, "newli": 56, "newlin": [46, 148, 158, 162, 166, 349], "next": [19, 58, 239, 254, 281, 319, 349, 445, 467, 472, 485, 637, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1054, 1080, 1085, 1098, 1225, 1349], "next_batch": 149, "next_pow2": 58, "nfc": [704, 1286, 1372], "nfd": [704, 1286, 1372], "nfkc": [704, 1286, 1372], "nfkd": [704, 1286, 1372], "nfruit": 722, "nl": [445, 763, 1054], "nnel_id": 137, "no1": 960, "no_default": [234, 349, 641, 642, 709, 838, 1229, 1230, 1291, 1349], "no_optim": [48, 49, 50, 51, 62, 63, 129, 859, 860, 888, 897, 954], "nodataerror": [148, 149, 153, 159, 162], "nodd": [692, 1274], "node": [855, 859, 880, 888, 892, 897, 901, 954], "nodefault": [234, 349, 641, 642, 709, 838, 1229, 1230, 1291, 1349], "non": [4, 5, 38, 40, 41, 48, 56, 71, 72, 135, 145, 169, 209, 216, 252, 264, 281, 287, 288, 292, 312, 313, 316, 318, 323, 324, 349, 417, 418, 422, 427, 431, 432, 445, 471, 523, 577, 585, 586, 592, 627, 628, 637, 641, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 686, 693, 702, 707, 708, 709, 729, 731, 736, 743, 744, 754, 756, 764, 765, 766, 767, 769, 771, 775, 782, 802, 804, 807, 814, 815, 816, 820, 822, 838, 854, 863, 892, 903, 905, 906, 909, 917, 920, 921, 924, 925, 954, 960, 1022, 1027, 1036, 1041, 1042, 1049, 1054, 1084, 1137, 1194, 1202, 1218, 1229, 1230, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1253, 1268, 1275, 1284, 1289, 1290, 1311, 1313, 1330, 1334, 1349, 1369, 1377], "non_exist": [471, 1084], "non_numer": [38, 48, 349, 954], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 65, 68, 71, 72, 73, 74, 75, 83, 87, 97, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 192, 193, 194, 196, 197, 198, 202, 204, 205, 211, 216, 217, 221, 222, 228, 229, 230, 232, 234, 237, 239, 240, 245, 249, 253, 254, 256, 258, 261, 264, 269, 270, 273, 277, 281, 282, 285, 289, 292, 294, 295, 301, 302, 304, 306, 307, 308, 311, 313, 314, 315, 316, 317, 318, 319, 330, 334, 349, 361, 363, 364, 376, 377, 378, 385, 386, 398, 420, 422, 423, 424, 427, 431, 432, 433, 436, 438, 443, 444, 452, 467, 470, 471, 477, 492, 493, 494, 495, 496, 497, 500, 501, 502, 514, 515, 517, 519, 521, 522, 523, 530, 531, 532, 533, 538, 540, 541, 548, 554, 556, 558, 565, 566, 567, 568, 569, 571, 577, 585, 586, 597, 600, 601, 602, 604, 609, 622, 623, 624, 625, 627, 628, 634, 637, 638, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 668, 671, 672, 673, 674, 678, 679, 683, 684, 686, 688, 689, 690, 693, 696, 698, 699, 700, 701, 702, 703, 705, 706, 711, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 726, 728, 731, 732, 733, 734, 735, 742, 749, 754, 755, 756, 758, 764, 765, 766, 767, 768, 769, 771, 775, 777, 778, 779, 780, 781, 782, 784, 785, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 807, 813, 814, 815, 820, 822, 824, 825, 826, 828, 838, 857, 858, 860, 863, 864, 867, 868, 870, 872, 873, 874, 878, 881, 882, 883, 886, 888, 892, 895, 899, 900, 903, 907, 909, 910, 911, 912, 918, 919, 920, 921, 926, 929, 932, 936, 937, 946, 947, 954, 959, 960, 962, 963, 967, 968, 970, 977, 978, 982, 983, 990, 991, 1003, 1013, 1018, 1021, 1024, 1027, 1028, 1029, 1035, 1036, 1041, 1042, 1048, 1049, 1051, 1052, 1053, 1061, 1068, 1069, 1070, 1074, 1083, 1084, 1090, 1104, 1106, 1109, 1110, 1111, 1112, 1116, 1117, 1118, 1120, 1128, 1130, 1132, 1134, 1135, 1136, 1137, 1142, 1147, 1148, 1151, 1152, 1153, 1155, 1157, 1158, 1161, 1165, 1171, 1173, 1175, 1182, 1183, 1184, 1185, 1186, 1188, 1194, 1202, 1203, 1204, 1205, 1206, 1214, 1217, 1223, 1224, 1225, 1229, 1230, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1253, 1256, 1257, 1260, 1261, 1264, 1265, 1266, 1268, 1270, 1271, 1272, 1275, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1303, 1304, 1305, 1306, 1308, 1310, 1313, 1316, 1324, 1326, 1327, 1328, 1330, 1331, 1332, 1338, 1339, 1349, 1358, 1360, 1361, 1362, 1364, 1367, 1369, 1372, 1373, 1377], "nonexist": [471, 1084], "nor": [153, 159, 285, 349], "normal": [40, 144, 239, 349, 490, 535, 677, 749, 838, 878, 954, 1104, 1152, 1260, 1338, 1349, 1370], "normalised_scor": 150, "norowsreturnederror": [282, 349], "north": 74, "not_": [323, 349, 838, 924, 954, 960, 1349], "not_c": [323, 349, 924, 954], "notabl": 150, "notat": [12, 41, 349], "note": [4, 11, 21, 40, 41, 47, 55, 56, 63, 64, 70, 71, 73, 88, 96, 97, 130, 131, 132, 134, 136, 137, 144, 148, 150, 151, 152, 153, 157, 158, 159, 162, 163, 164, 166, 168, 171, 173, 176, 178, 182, 184, 202, 206, 213, 215, 217, 218, 221, 225, 228, 230, 239, 240, 249, 250, 251, 253, 254, 258, 265, 269, 272, 273, 277, 278, 281, 282, 283, 284, 289, 292, 296, 303, 306, 308, 311, 313, 314, 316, 318, 319, 323, 325, 326, 349, 393, 405, 420, 422, 423, 424, 427, 435, 436, 440, 443, 444, 450, 464, 465, 467, 472, 477, 485, 494, 501, 507, 508, 515, 523, 530, 531, 549, 552, 570, 577, 586, 600, 601, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 671, 673, 677, 683, 684, 685, 691, 692, 693, 694, 695, 696, 697, 698, 702, 703, 707, 708, 709, 711, 716, 717, 718, 721, 722, 729, 731, 732, 738, 745, 754, 756, 763, 772, 777, 778, 780, 781, 782, 786, 796, 798, 810, 812, 813, 817, 825, 826, 828, 829, 834, 838, 849, 860, 864, 865, 867, 872, 874, 878, 883, 893, 900, 901, 903, 907, 909, 910, 912, 913, 918, 920, 921, 924, 927, 928, 954, 958, 960, 998, 1010, 1027, 1028, 1036, 1045, 1046, 1049, 1052, 1053, 1059, 1077, 1078, 1080, 1085, 1090, 1098, 1108, 1110, 1117, 1130, 1137, 1166, 1169, 1187, 1202, 1229, 1230, 1234, 1241, 1248, 1250, 1253, 1255, 1260, 1265, 1266, 1267, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1284, 1285, 1289, 1290, 1291, 1293, 1298, 1299, 1300, 1303, 1304, 1311, 1313, 1320, 1331, 1333, 1349, 1358, 1359, 1363, 1364, 1372, 1375, 1377], "noth": [21, 692, 701, 1274, 1283], "notic": [150, 230, 349, 874, 954, 1349], "notimplementederror": [10, 206], "now": [56, 153, 281, 307, 349, 594, 903, 954, 1330, 1349], "np": [95, 134, 204, 230, 277, 307, 349, 509, 585, 669, 838, 874, 900, 954, 962, 1123, 1140, 1143, 1145, 1146, 1248, 1249, 1349], "npt": [204, 962], "nr": [332, 343, 934, 945], "nth": [233, 349, 510, 714, 834, 838, 876, 954, 1124, 1296, 1349], "nthe": [692, 1274], "nthose": [692, 1274], "nu": 689, "null": [17, 38, 40, 47, 48, 51, 56, 64, 71, 132, 133, 136, 144, 148, 149, 158, 160, 162, 166, 167, 168, 175, 178, 182, 206, 209, 210, 211, 216, 217, 221, 222, 224, 229, 230, 232, 245, 253, 261, 262, 263, 270, 273, 275, 277, 292, 295, 297, 298, 299, 302, 307, 308, 312, 315, 318, 320, 323, 330, 349, 361, 363, 364, 374, 377, 378, 385, 386, 393, 394, 402, 405, 417, 418, 419, 420, 422, 423, 424, 427, 431, 432, 433, 436, 441, 443, 444, 467, 470, 471, 478, 479, 480, 481, 482, 483, 484, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 514, 519, 521, 522, 527, 530, 531, 532, 533, 538, 540, 541, 547, 548, 551, 552, 554, 556, 557, 558, 566, 567, 568, 569, 570, 572, 577, 585, 586, 609, 622, 623, 624, 625, 627, 628, 637, 638, 642, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 671, 672, 674, 679, 680, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 705, 706, 711, 713, 714, 715, 721, 722, 724, 726, 731, 732, 733, 734, 735, 742, 743, 744, 753, 754, 755, 756, 761, 764, 765, 766, 767, 769, 771, 775, 779, 784, 795, 798, 802, 804, 807, 814, 815, 820, 822, 828, 838, 854, 857, 863, 864, 867, 868, 873, 874, 881, 882, 895, 900, 909, 912, 917, 919, 921, 924, 926, 932, 954, 960, 967, 968, 979, 982, 983, 990, 991, 998, 999, 1007, 1010, 1022, 1023, 1024, 1027, 1028, 1029, 1035, 1036, 1041, 1042, 1050, 1052, 1053, 1083, 1084, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1106, 1107, 1109, 1110, 1111, 1112, 1116, 1118, 1119, 1128, 1129, 1134, 1135, 1136, 1142, 1147, 1148, 1149, 1155, 1157, 1158, 1161, 1164, 1165, 1168, 1169, 1171, 1173, 1174, 1175, 1184, 1186, 1187, 1189, 1194, 1202, 1214, 1217, 1218, 1230, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1253, 1257, 1262, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1293, 1295, 1296, 1297, 1303, 1304, 1306, 1308, 1313, 1316, 1327, 1330, 1331, 1332, 1334, 1349, 1361, 1365, 1367, 1369, 1372, 1373, 1375, 1377, 1378, 1380], "null_behavior": [441, 547, 838, 1050, 1164, 1349], "null_count": [47, 51, 217, 222, 349, 437, 838, 864, 954, 1047, 1049, 1349], "null_equ": [224, 349, 1107, 1349], "null_on_oob": [385, 552, 554, 990, 1169, 1171], "null_prob": [175, 178, 182], "null_valu": [38, 48, 148, 149, 162, 349, 954], "nullabl": [40, 349], "nullbehavior": [441, 547, 838, 1050, 1164, 1349], "nullif": 1370, "nulls_equ": [253, 349, 527, 838, 882, 954, 1142, 1349], "nulls_last": [295, 349, 374, 394, 572, 627, 679, 680, 761, 838, 912, 954, 979, 999, 1149, 1189, 1262, 1349], "num": [14, 41, 310, 349, 523, 838, 1137, 1349], "num_row": 206, "num_sampl": [796, 797], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 48, 49, 50, 51, 55, 56, 70, 71, 72, 88, 97, 118, 130, 132, 133, 134, 136, 139, 144, 148, 149, 150, 151, 153, 157, 158, 159, 160, 162, 165, 166, 167, 169, 176, 178, 181, 183, 184, 185, 192, 209, 211, 216, 225, 226, 228, 229, 237, 241, 242, 251, 252, 257, 268, 269, 281, 285, 292, 297, 300, 312, 317, 320, 322, 330, 332, 334, 343, 349, 375, 391, 393, 398, 409, 410, 411, 412, 414, 415, 417, 418, 423, 431, 437, 438, 441, 445, 448, 456, 458, 460, 462, 463, 473, 486, 487, 489, 493, 494, 495, 496, 500, 501, 502, 516, 530, 531, 538, 539, 547, 555, 558, 563, 565, 570, 573, 575, 577, 579, 627, 631, 634, 637, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 673, 682, 698, 700, 702, 703, 707, 711, 713, 714, 722, 725, 739, 743, 744, 750, 763, 768, 769, 770, 782, 790, 795, 796, 797, 814, 815, 819, 823, 827, 838, 854, 857, 863, 871, 872, 873, 879, 887, 897, 909, 914, 916, 917, 922, 923, 932, 934, 936, 945, 954, 959, 996, 998, 1003, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1028, 1035, 1041, 1047, 1048, 1050, 1054, 1057, 1065, 1067, 1072, 1075, 1076, 1086, 1099, 1100, 1102, 1108, 1109, 1110, 1111, 1112, 1116, 1117, 1118, 1131, 1155, 1156, 1164, 1172, 1175, 1180, 1182, 1187, 1192, 1194, 1208, 1209, 1223, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1253, 1256, 1264, 1280, 1282, 1284, 1285, 1289, 1293, 1295, 1296, 1304, 1307, 1321, 1334, 1339, 1349, 1365, 1368, 1371, 1380], "number_of_two": [382, 546], "numbers_decim": 725, "numer": [11, 17, 38, 41, 48, 152, 163, 210, 219, 254, 307, 308, 316, 317, 349, 358, 405, 419, 427, 507, 523, 582, 606, 608, 632, 640, 672, 674, 694, 731, 737, 745, 796, 838, 850, 856, 866, 883, 920, 954, 960, 1010, 1023, 1036, 1049, 1137, 1254, 1257, 1276, 1313, 1330, 1349, 1371, 1380], "numeric_dtyp": 1380, "numericliter": [427, 796, 797, 838, 1036, 1349], "numpi": [95, 103, 134, 170, 204, 215, 251, 283, 284, 303, 307, 308, 349, 585, 619, 620, 648, 838, 954, 962, 1140, 1143, 1145, 1146, 1211, 1212, 1235, 1330, 1331, 1349], "nworld": 716, "o": [154, 165, 406, 417, 418, 437, 691, 743, 744, 838, 1011, 1022, 1047, 1273, 1298, 1334, 1349, 1362], "oauth": 164, "obj": 960, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 64, 87, 106, 130, 131, 132, 137, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 176, 178, 179, 205, 206, 213, 218, 225, 238, 239, 254, 256, 271, 281, 284, 289, 296, 306, 307, 308, 349, 440, 600, 777, 778, 780, 781, 798, 817, 825, 826, 838, 850, 859, 865, 870, 878, 883, 886, 897, 903, 910, 913, 951, 954, 960, 963, 1108, 1324, 1349, 1359, 1361, 1364, 1377, 1379], "observ": [253, 349, 438, 493, 494, 495, 496, 634, 838, 882, 954, 1048, 1109, 1110, 1111, 1112, 1223, 1349], "obtain": 577, "obvious": 734, "occur": [41, 62, 63, 104, 113, 119, 129, 255, 349, 382, 546, 607, 637, 838, 859, 860, 870, 884, 897, 910, 954, 987, 1163, 1207, 1225, 1330, 1349], "occurr": [517, 519, 526, 529, 749, 838, 1132, 1134, 1141, 1144, 1338, 1349], "oct": 1372, "octet_length": 1370, "octob": [477, 1090, 1372], "od": [159, 850], "odbc": [39, 150, 349], "odd": 692, "odi": [695, 697, 1279], "off": [48, 49, 50, 51, 62, 63, 129, 148, 149, 162, 253, 254, 349, 445, 763, 859, 860, 870, 882, 883, 888, 897, 910, 954, 1054], "offer": [272, 349, 631, 838, 896, 954, 1373, 1377], "offic": [41, 349], "offset": [73, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 233, 239, 281, 294, 325, 326, 349, 445, 446, 454, 464, 465, 467, 472, 485, 510, 553, 571, 647, 678, 696, 697, 711, 724, 838, 876, 878, 903, 911, 927, 928, 954, 1054, 1055, 1063, 1077, 1078, 1080, 1085, 1098, 1124, 1170, 1188, 1261, 1278, 1279, 1293, 1306, 1349, 1376], "offset_bi": 782, "often": [151, 202, 239, 281, 349, 382, 546, 640, 647, 838, 878, 903, 954, 987, 1163, 1349, 1364, 1377], "ok": 577, "old": [40, 278, 349, 641, 642, 838, 901, 954, 1229, 1230, 1349], "old_tabl": 1379, "older": [47, 51, 349, 954], "oldw": 717, "omit": [28, 133, 137, 153, 159, 176, 202, 269, 284, 306, 311, 349, 777, 780, 792, 793, 825, 826, 960, 1378, 1379], "onc": [62, 129, 148, 149, 184, 258, 283, 285, 328, 349, 565, 585, 586, 668, 719, 720, 838, 855, 930, 954, 1182, 1202, 1247, 1301, 1302, 1349, 1362], "one": [21, 38, 39, 41, 48, 56, 64, 110, 130, 132, 133, 134, 135, 136, 148, 149, 153, 157, 158, 159, 162, 166, 181, 183, 202, 210, 218, 221, 229, 237, 238, 239, 251, 255, 256, 264, 273, 281, 282, 283, 289, 292, 307, 310, 316, 329, 349, 359, 393, 438, 440, 502, 503, 507, 509, 512, 514, 570, 577, 582, 600, 610, 611, 613, 615, 617, 618, 627, 646, 647, 671, 679, 692, 693, 694, 709, 732, 764, 768, 770, 777, 780, 800, 818, 828, 834, 838, 856, 865, 867, 868, 873, 874, 877, 878, 884, 892, 899, 903, 907, 909, 920, 926, 931, 954, 969, 998, 1003, 1048, 1118, 1128, 1129, 1187, 1194, 1199, 1223, 1234, 1253, 1274, 1275, 1276, 1291, 1314, 1330, 1349, 1364, 1365, 1367, 1371, 1372, 1379], "one_to_mani": [253, 349, 882, 954], "one_to_on": [253, 349, 882, 954], "oneormoredatatyp": [41, 176, 349], "ones": [650, 652, 654, 656, 658, 661, 663, 665, 838, 960], "onf": [711, 1293], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 48, 55, 56, 61, 62, 64, 97, 129, 131, 143, 145, 148, 149, 150, 153, 154, 156, 158, 160, 162, 165, 166, 167, 168, 171, 172, 173, 174, 178, 182, 192, 202, 221, 222, 225, 227, 230, 239, 240, 251, 254, 255, 258, 273, 281, 283, 284, 303, 305, 306, 307, 318, 319, 335, 349, 359, 361, 363, 375, 426, 427, 440, 445, 467, 475, 477, 497, 506, 515, 585, 586, 593, 594, 610, 611, 612, 613, 614, 615, 616, 617, 618, 627, 639, 685, 695, 697, 709, 747, 763, 800, 838, 862, 865, 867, 868, 869, 878, 883, 884, 903, 904, 921, 923, 937, 954, 960, 967, 968, 969, 1033, 1036, 1054, 1080, 1090, 1108, 1115, 1122, 1130, 1202, 1227, 1267, 1277, 1279, 1291, 1324, 1327, 1330, 1349, 1358, 1361, 1377, 1378, 1380], "onlin": [227, 349, 1115, 1349], "ont": [695, 697, 1277, 1279], "onto": 178, "oof": [710, 1292, 1367, 1372], "op": [21, 148, 149, 182, 278, 349, 593, 640, 838, 886, 901, 954, 1349], "opac": [349, 352, 1349, 1354], "opaqu": 937, "open": [41, 53, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 218, 349, 440, 838, 865, 954], "openoffic": 159, "openpyxl": [153, 170], "oper": [4, 41, 55, 64, 97, 106, 109, 116, 123, 130, 132, 133, 134, 135, 136, 145, 150, 212, 227, 230, 232, 238, 244, 256, 258, 265, 269, 271, 272, 273, 276, 277, 279, 281, 284, 285, 290, 292, 301, 307, 308, 313, 316, 317, 327, 328, 349, 358, 359, 362, 393, 432, 433, 434, 435, 436, 437, 491, 492, 507, 508, 511, 513, 537, 565, 566, 567, 568, 569, 570, 577, 584, 603, 606, 608, 609, 610, 611, 613, 615, 617, 618, 621, 622, 623, 626, 627, 632, 639, 668, 671, 737, 745, 752, 753, 755, 766, 767, 771, 783, 817, 828, 838, 850, 858, 862, 864, 869, 874, 877, 882, 892, 893, 900, 904, 908, 909, 913, 920, 923, 930, 954, 998, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1105, 1106, 1115, 1125, 1127, 1154, 1182, 1183, 1184, 1185, 1186, 1187, 1201, 1213, 1214, 1227, 1247, 1253, 1289, 1324, 1329, 1330, 1331, 1349, 1368, 1376, 1377], "operand": [745, 838], "opp": 960, "oppos": 763, "opposit": [292, 349, 393, 570, 671, 838, 909, 954, 998, 1187, 1253, 1349], "opt": [311, 349], "optim": [48, 49, 50, 51, 62, 63, 129, 148, 154, 158, 160, 162, 165, 166, 167, 251, 256, 272, 276, 283, 314, 349, 855, 859, 860, 870, 888, 897, 910, 918, 927, 928, 937, 954, 1032, 1248, 1349], "optimis": [150, 258, 284, 335, 349, 954, 958, 1202, 1250, 1349, 1380], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 56, 62, 63, 72, 74, 148, 150, 151, 152, 153, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 168, 170, 175, 176, 177, 178, 181, 182, 183, 192, 193, 218, 234, 239, 249, 254, 264, 289, 296, 302, 313, 316, 318, 349, 405, 440, 445, 535, 593, 594, 600, 627, 648, 649, 651, 653, 655, 657, 660, 662, 664, 677, 685, 695, 697, 709, 711, 749, 820, 828, 838, 850, 859, 860, 865, 870, 878, 882, 883, 892, 897, 907, 910, 913, 920, 921, 929, 954, 960, 1010, 1054, 1152, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1260, 1267, 1277, 1279, 1291, 1293, 1326, 1338, 1349, 1367, 1372, 1379], "optional_memb": [527, 838, 1142, 1349], "or_": 838, "oracl": 151, "orang": [214, 330, 331, 333, 334, 336, 337, 339, 341, 342, 349, 418, 744, 838, 932, 933, 935, 936, 938, 939, 941, 943, 944, 1372], "orc": 195, "order": [11, 41, 48, 49, 50, 51, 54, 56, 62, 68, 133, 148, 150, 169, 171, 172, 173, 174, 209, 213, 214, 221, 222, 223, 230, 238, 239, 253, 255, 265, 271, 272, 273, 277, 281, 283, 285, 286, 290, 295, 306, 307, 312, 314, 318, 319, 349, 374, 394, 399, 417, 418, 443, 444, 503, 548, 565, 572, 578, 627, 632, 637, 647, 668, 669, 670, 679, 680, 710, 717, 718, 719, 720, 734, 743, 744, 746, 747, 749, 761, 817, 828, 838, 849, 854, 862, 867, 868, 869, 874, 877, 878, 882, 884, 892, 893, 900, 903, 904, 908, 912, 913, 917, 918, 921, 954, 958, 959, 960, 979, 999, 1004, 1022, 1031, 1052, 1053, 1119, 1149, 1165, 1182, 1189, 1195, 1221, 1225, 1232, 1247, 1249, 1251, 1262, 1292, 1317, 1334, 1335, 1336, 1338, 1349, 1358, 1361, 1367, 1376, 1377, 1380], "order_bi": [627, 838], "ordin": [468, 637, 838, 1081, 1225, 1349, 1378], "ordinal_dai": [453, 487], "org": [21, 43, 44, 131, 150, 151, 154, 156, 204, 205, 206, 215, 349, 601, 704, 910, 954, 962, 963, 1286], "orient": [57, 59, 104, 134, 136, 269, 349, 954, 1358], "origin": [56, 148, 149, 162, 221, 222, 230, 277, 314, 349, 443, 444, 471, 472, 485, 503, 548, 586, 610, 627, 639, 640, 641, 642, 643, 645, 686, 692, 701, 759, 760, 838, 867, 868, 874, 900, 918, 954, 1052, 1053, 1084, 1085, 1098, 1119, 1165, 1229, 1230, 1231, 1233, 1268, 1274, 1283, 1349], "orjson": 144, "orld": 1299, "orson": 144, "other": [1, 21, 37, 41, 47, 63, 64, 130, 147, 148, 149, 150, 153, 162, 167, 171, 172, 173, 174, 222, 224, 227, 230, 253, 254, 255, 264, 265, 273, 277, 282, 284, 287, 288, 311, 316, 318, 321, 323, 324, 347, 349, 352, 358, 362, 364, 374, 375, 427, 442, 477, 491, 492, 503, 507, 511, 513, 523, 527, 537, 544, 566, 567, 568, 569, 584, 590, 596, 606, 608, 621, 622, 626, 641, 642, 673, 680, 709, 736, 737, 742, 745, 752, 754, 756, 761, 764, 765, 766, 767, 775, 782, 802, 804, 807, 816, 820, 822, 838, 850, 860, 874, 882, 883, 884, 892, 893, 899, 900, 905, 906, 920, 921, 924, 925, 926, 954, 960, 969, 1036, 1051, 1090, 1105, 1106, 1107, 1115, 1125, 1127, 1142, 1154, 1161, 1183, 1184, 1185, 1186, 1201, 1213, 1214, 1229, 1230, 1332, 1340, 1348, 1349, 1354, 1364, 1377], "other_df": [253, 349], "other_lf": [882, 954], "otherwis": [39, 150, 153, 160, 165, 177, 180, 184, 234, 258, 265, 284, 287, 306, 311, 335, 349, 398, 402, 423, 427, 438, 493, 494, 495, 496, 577, 586, 597, 627, 631, 632, 634, 639, 674, 684, 687, 691, 696, 698, 703, 707, 708, 711, 722, 749, 753, 782, 785, 794, 800, 828, 838, 893, 905, 937, 954, 959, 1003, 1007, 1028, 1036, 1048, 1109, 1110, 1111, 1112, 1194, 1202, 1221, 1223, 1227, 1248, 1250, 1257, 1266, 1269, 1273, 1278, 1280, 1285, 1289, 1290, 1293, 1304, 1338, 1349, 1369], "our": 207, "out": [8, 15, 39, 48, 49, 50, 51, 52, 53, 54, 111, 137, 167, 170, 178, 182, 230, 281, 284, 349, 385, 402, 552, 554, 684, 687, 696, 828, 874, 903, 954, 990, 1007, 1169, 1171, 1266, 1269, 1278, 1375], "outcom": [627, 838], "outer": [56, 318, 349, 921, 954], "outermost": 55, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 209, 217, 251, 258, 262, 265, 271, 273, 283, 287, 289, 299, 312, 319, 323, 349, 361, 363, 386, 417, 418, 423, 438, 477, 556, 577, 585, 586, 597, 600, 611, 634, 641, 683, 699, 703, 743, 744, 749, 753, 754, 755, 756, 766, 767, 768, 796, 797, 799, 800, 804, 822, 838, 850, 854, 864, 870, 888, 892, 893, 905, 907, 917, 924, 937, 954, 967, 968, 991, 1022, 1028, 1048, 1090, 1173, 1202, 1223, 1265, 1281, 1285, 1334, 1338, 1349], "output_path": [601, 910, 954], "outsid": [427, 838, 1036, 1349], "over": [53, 64, 139, 148, 149, 150, 153, 159, 162, 167, 178, 179, 209, 227, 250, 251, 252, 258, 265, 282, 283, 284, 296, 312, 313, 327, 335, 349, 353, 417, 418, 437, 440, 494, 502, 585, 586, 597, 599, 600, 601, 602, 603, 611, 612, 637, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 743, 744, 772, 773, 786, 799, 800, 812, 817, 838, 854, 859, 870, 893, 897, 910, 913, 917, 929, 937, 951, 954, 960, 1022, 1047, 1110, 1115, 1202, 1236, 1237, 1239, 1243, 1334, 1349, 1377], "overflow": [419, 435, 436, 726, 738, 838, 856, 954, 1023, 1045, 1046, 1308, 1320, 1349], "overhead": [54, 55, 97, 162, 165, 166, 167], "overlap": [686, 693, 695, 697, 1268, 1275, 1277, 1279], "overrid": [1, 41, 130, 132, 133, 134, 135, 136, 148, 150, 151, 153, 157, 158, 159, 166, 175, 176, 182, 184, 349, 954], "overridden": [41, 130, 132, 134, 136, 157, 158, 166, 184, 349, 954], "overview": [349, 838, 850, 954, 1349, 1376, 1380], "overwrit": [15, 39, 40, 42, 54, 130, 132, 133, 134, 136, 144, 148, 149, 157, 158, 162, 166, 206, 318, 349, 360, 736, 838, 921, 954], "overwrite_schema": [40, 349], "ow": 716, "own": [828, 1330, 1349, 1380], "p": [58, 272, 349, 631, 820, 838, 896, 954, 960, 1278, 1280, 1362], "p13dt14h0": 477, "p1dt42": 477, "pa": [40, 130, 168, 349, 817], "pa_tabl": 817, "pacif": [446, 1055], "pack": [269, 349], "packag": [33, 34, 35, 145, 150, 349, 353, 445, 763, 1054], "pad": [705, 706, 731, 1287, 1288, 1313], "pad_end": [706, 1288], "pad_start": [705, 731, 1287, 1313], "page": [47, 51, 154, 160, 165, 167, 349, 838, 850, 954, 1349, 1376], "pair": [130, 132, 133, 134, 136, 141, 157, 158, 166, 278, 349, 901, 954, 1380], "pairwis": [215, 349], "panda": [39, 131, 135, 144, 170, 230, 239, 277, 308, 314, 316, 349, 464, 465, 742, 817, 838, 874, 878, 900, 918, 920, 954, 1077, 1078, 1331, 1332, 1349, 1359, 1361, 1377], "pandas_df": 1377, "pane": [41, 349], "panic": 112, "pap": 1280, "papa": 698, "papai": [698, 1280], "papaya": [698, 711, 722, 1280, 1293, 1304], "parallel": [62, 64, 139, 151, 160, 167, 239, 254, 256, 272, 288, 324, 349, 437, 549, 749, 828, 838, 878, 882, 883, 906, 925, 937, 954, 1047, 1166, 1338, 1349], "parallelis": [258, 335, 349, 1202, 1349], "parallelstrategi": [160, 167], "param": [41, 130, 132, 133, 134, 136, 148, 149, 157, 158, 162, 166, 177, 178, 182, 282, 349, 954], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 71, 72, 73, 74, 75, 83, 87, 95, 98, 104, 113, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 206, 207, 209, 210, 211, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 249, 251, 252, 253, 254, 255, 257, 258, 262, 264, 265, 268, 269, 271, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 332, 334, 335, 341, 343, 349, 358, 360, 361, 362, 363, 364, 374, 381, 382, 385, 386, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 417, 418, 419, 420, 424, 427, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 445, 447, 449, 450, 455, 467, 470, 471, 472, 473, 474, 476, 477, 485, 488, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 521, 522, 523, 527, 535, 537, 539, 544, 545, 546, 547, 549, 552, 553, 554, 555, 556, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 584, 585, 586, 593, 594, 600, 601, 602, 606, 608, 611, 612, 613, 614, 615, 616, 621, 622, 626, 627, 628, 631, 632, 634, 635, 637, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 731, 732, 734, 736, 737, 739, 743, 744, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 838, 854, 856, 857, 859, 860, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 882, 883, 884, 887, 888, 892, 893, 896, 897, 898, 899, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 934, 936, 937, 943, 945, 954, 959, 960, 964, 966, 967, 968, 969, 979, 986, 987, 990, 991, 998, 999, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1022, 1023, 1024, 1029, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1056, 1058, 1059, 1064, 1080, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1098, 1101, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1115, 1116, 1117, 1118, 1119, 1123, 1124, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1142, 1149, 1152, 1156, 1161, 1162, 1163, 1164, 1166, 1169, 1170, 1171, 1172, 1173, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1192, 1193, 1194, 1195, 1202, 1214, 1218, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1256, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1313, 1314, 1317, 1321, 1324, 1325, 1326, 1327, 1328, 1330, 1331, 1334, 1335, 1338, 1339, 1340, 1349, 1358, 1359, 1360, 1361, 1362, 1364, 1369, 1372, 1377], "parameteris": 150, "parametr": 850, "paramount": [888, 954], "parent": [41, 75, 232, 349], "parenthes": 19, "parquet": [47, 51, 52, 53, 54, 160, 161, 167, 195, 349, 850, 954], "parquetcompress": [47, 349], "pars": [38, 48, 147, 148, 149, 151, 153, 158, 159, 160, 162, 165, 166, 167, 209, 238, 287, 288, 292, 295, 312, 323, 324, 328, 349, 418, 427, 523, 627, 641, 642, 680, 700, 709, 725, 726, 736, 744, 754, 756, 761, 764, 765, 766, 767, 775, 788, 802, 804, 807, 816, 818, 820, 822, 828, 838, 854, 877, 905, 906, 909, 912, 917, 924, 925, 930, 954, 1036, 1137, 1229, 1230, 1253, 1282, 1307, 1308, 1349, 1358], "parseerror": [726, 1308], "parser": [148, 153], "part": [54, 130, 153, 202, 207, 306, 311, 349, 627, 693, 713, 714, 838, 926, 954, 964, 1275, 1295, 1296, 1372, 1373], "part_idx": 142, "parti": [585, 838], "partial": [133, 148, 162, 349, 954], "particip": [41, 349], "particular": [40, 148, 153, 154, 156, 209, 225, 312, 349, 417, 418, 743, 744, 838, 854, 917, 954, 1022, 1108, 1334, 1349], "partit": [47, 52, 53, 54, 151, 160, 163, 165, 167, 168, 252, 271, 349, 627, 838, 850], "partition_bi": [47, 149, 252, 349, 627, 838], "partition_chunk_size_byt": [47, 349], "partition_col": [47, 151, 349], "partition_df": 149, "partition_index": 194, "partition_num": 151, "partition_on": 151, "partition_rang": 151, "partitionbykei": [53, 54, 141, 142], "partitioned_object": [47, 349], "partitioningschem": [48, 49, 50, 51, 954], "partitionmax": 53, "partitionmaxs": [52, 54, 140], "partitionpart": [52, 53, 141, 142], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 56, 104, 129, 132, 144, 145, 147, 150, 151, 153, 160, 162, 165, 168, 171, 173, 176, 178, 180, 182, 209, 215, 219, 238, 239, 241, 254, 257, 271, 272, 273, 278, 281, 287, 292, 295, 300, 308, 311, 312, 319, 323, 328, 349, 393, 418, 445, 455, 467, 471, 477, 500, 520, 570, 585, 586, 601, 627, 631, 641, 642, 647, 671, 680, 709, 716, 717, 718, 744, 753, 761, 763, 788, 820, 828, 834, 838, 854, 866, 877, 878, 880, 883, 888, 896, 901, 903, 905, 909, 910, 912, 917, 924, 929, 930, 937, 954, 959, 998, 1054, 1064, 1084, 1090, 1116, 1131, 1156, 1187, 1202, 1229, 1230, 1253, 1291, 1298, 1299, 1300, 1321, 1331, 1349, 1362, 1377], "pass_nam": [586, 838], "pass_name_to_appli": [145, 838], "password": [148, 151, 154, 156], "past": [37, 349, 888, 954], "pat": [696, 1278], "patch": 74, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 140, 142, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 218, 289, 349, 440, 600, 601, 604, 670, 838, 865, 907, 910, 954, 958, 1251, 1283, 1349, 1380], "pathlib": [36, 38, 43, 44, 47, 162, 349], "pattern": [100, 148, 149, 153, 154, 158, 160, 162, 165, 166, 167, 251, 349, 420, 424, 595, 684, 685, 686, 689, 692, 693, 694, 695, 696, 697, 707, 708, 709, 715, 937, 960, 1024, 1029, 1248, 1250, 1266, 1267, 1268, 1271, 1274, 1275, 1276, 1277, 1278, 1279, 1289, 1290, 1291, 1297, 1349, 1372], "paya": 722, "pc": [899, 954], "pct": [178, 637, 838], "pct_chang": [838, 1349], "pct_valid": [637, 838], "pd": [131, 135, 742, 817, 838, 1331, 1332, 1349, 1359, 1377], "pd_df": 135, "pd_frame": 817, "pd_seri": 135, "pdsh": [139, 149], "pea": 698, "peak": [283, 349, 629, 630, 838, 1219, 1220, 1349], "peak_max": [838, 1349], "peak_min": [838, 1349], "pear": [698, 711, 722, 1280, 1293, 1304], "pearson": [215, 349, 535, 677, 768, 838, 1152, 1260, 1349], "penalti": [721, 723, 724, 1303, 1305, 1306], "per": [15, 38, 41, 48, 145, 153, 176, 178, 209, 237, 269, 270, 273, 288, 295, 312, 324, 338, 340, 341, 349, 385, 418, 549, 552, 554, 585, 586, 610, 611, 613, 615, 617, 618, 680, 744, 749, 761, 838, 854, 906, 912, 917, 925, 940, 942, 943, 954, 990, 1166, 1169, 1171, 1338, 1349], "percent": [628, 838, 1218, 1349], "percentag": [175, 178, 182, 628, 838, 1218, 1349], "percentil": [217, 349, 637, 838, 864, 954, 1049, 1349], "perform": [39, 47, 49, 51, 56, 102, 107, 109, 114, 116, 123, 131, 148, 149, 150, 154, 158, 160, 162, 165, 166, 167, 206, 230, 238, 239, 253, 254, 255, 258, 276, 277, 281, 283, 284, 307, 335, 349, 408, 413, 416, 422, 423, 507, 577, 585, 586, 627, 647, 685, 695, 697, 702, 703, 709, 721, 723, 724, 838, 874, 878, 882, 883, 884, 900, 903, 912, 927, 928, 954, 1013, 1018, 1021, 1027, 1028, 1202, 1267, 1277, 1279, 1284, 1285, 1291, 1303, 1305, 1306, 1330, 1349], "perhap": [313, 349], "period": [148, 149, 162, 239, 281, 349, 472, 485, 493, 495, 496, 628, 647, 777, 778, 780, 781, 825, 826, 838, 878, 903, 954, 1085, 1098, 1109, 1111, 1112, 1218, 1349], "persist": 1364, "phase": [39, 317, 349], "philadelphia": [707, 708], "phone": [729, 1311], "physic": [55, 68, 97, 148, 149, 254, 273, 349, 742, 838, 855, 882, 883, 954, 1030, 1332, 1349], "pi": [11, 439, 838, 1038, 1040, 1258, 1322, 1349, 1370, 1374], "pick": [179, 828], "pickl": [440, 838, 865, 954], "pip": [445, 763, 1054], "pipe": [349, 838, 954], "pipelin": [153, 311, 349], "pitfal": 114, "pivot": [317, 349, 960], "pivot_long": [316, 349, 920, 954], "pivot_wid": [273, 349], "pivotagg": [273, 349], "pixel": [41, 349], "pk": [490, 838, 1104, 1349], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 74, 83, 87, 95, 96, 97, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 162, 163, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 184, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 838, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 959, 960, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1349, 1354, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1377, 1378, 1380], "pl_frame": 817, "place": [11, 12, 38, 48, 202, 220, 227, 243, 244, 273, 279, 284, 295, 321, 349, 353, 374, 386, 394, 556, 572, 679, 680, 761, 838, 912, 954, 969, 979, 991, 999, 1115, 1173, 1189, 1226, 1262, 1349], "placehold": 787, "plai": [13, 767], "plain": [870, 899, 954], "plan": [62, 129, 254, 256, 349, 440, 838, 855, 859, 865, 870, 882, 883, 899, 907, 910, 954, 1379], "plan_typ": [899, 954], "plane": [759, 760], "plantypeprefer": [899, 954], "platform": 170, "ple": 1372, "pleas": [135, 150, 151, 230, 239, 264, 277, 349, 353, 494, 769, 782, 838, 874, 878, 892, 900, 954, 1110, 1349], "plenti": 960, "plot": [349, 897, 910, 954, 1349], "plu": [438, 582, 838, 1048, 1199, 1223, 1349, 1371], "plugin": [0, 838, 850], "plugin_path": 145, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 76, 77, 78, 140, 141, 142, 143, 144, 152, 158, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 221, 228, 239, 255, 256, 296, 306, 311, 318, 349, 352, 353, 426, 437, 438, 443, 445, 472, 473, 501, 506, 507, 517, 530, 531, 565, 586, 634, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 666, 668, 763, 765, 796, 797, 838, 859, 860, 867, 872, 878, 884, 888, 901, 913, 921, 954, 1031, 1033, 1047, 1048, 1052, 1054, 1085, 1086, 1117, 1122, 1132, 1182, 1223, 1235, 1238, 1240, 1241, 1245, 1247, 1328, 1333, 1349, 1354, 1377], "pointer": [225, 349, 1108, 1349], "poison": [619, 620, 838, 1211, 1212, 1349], "pola": 349, "polar": [1, 200, 349, 352, 353, 837, 838, 844, 850, 954, 958, 959, 960, 1349, 1353, 1354, 1376, 1377, 1379], "polars_df": 1377, "polars_engine_affin": [48, 49, 50, 51, 62, 63, 859, 860, 870, 897, 910, 954], "polars_file_cache_ttl": [158, 162, 165, 166], "polars_hypothesis_profil": [181, 183], "polars_max_thread": 184, "polars_seri": 1377, "polars_verbos": [859, 870, 897, 910, 954], "polarsdatafram": 206, "polarsdataset": [311, 349], "polarsdatatyp": [65, 75, 83, 148, 149, 162, 175, 176, 177, 178, 179, 182, 210, 258, 306, 311, 349, 405, 419, 497, 585, 586, 641, 642, 700, 784, 798, 799, 800, 810, 813, 829, 834, 838, 856, 954, 960, 1010, 1023, 1202, 1229, 1230, 1282, 1349], "polarsintegertyp": [758, 792, 793], "polarstemporaltyp": [721, 1303], "polarstyp": 64, "pool": [15, 63, 184, 185, 860, 954], "poor": 150, "pop2": [254, 349, 883, 954], "popul": [254, 349, 883, 954], "port": [39, 148, 150, 151, 154, 156, 349], "pos_a": 1372, "posit": [41, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 194, 207, 219, 226, 238, 271, 287, 288, 292, 295, 315, 323, 324, 328, 349, 393, 493, 495, 496, 497, 570, 627, 632, 634, 671, 680, 694, 707, 708, 726, 736, 759, 760, 761, 764, 765, 766, 767, 784, 816, 820, 834, 838, 866, 871, 877, 905, 906, 909, 912, 919, 924, 925, 930, 954, 960, 998, 1109, 1111, 1112, 1187, 1221, 1223, 1253, 1276, 1308, 1349, 1378], "position": 1349, "possibl": [41, 47, 51, 104, 106, 132, 133, 136, 148, 153, 175, 178, 182, 238, 251, 258, 283, 314, 335, 349, 583, 586, 597, 648, 714, 748, 838, 859, 870, 877, 897, 910, 912, 918, 954, 1202, 1235, 1296, 1349], "post": [56, 74, 899, 954], "postgresql": [39, 150, 151, 349, 627, 838, 1375], "potenti": [114, 116, 145, 162, 165, 166, 251, 282, 284, 349, 610, 707, 708, 862, 864, 869, 904, 923, 954, 1289, 1290], "pow": [838, 1349, 1370], "pow_n": 58, "power": [818, 1221, 1349, 1371], "powersofn": 58, "pre": [54, 577, 586, 634, 810, 813, 829, 838, 1223, 1349], "preced": [178, 960], "precis": [11, 12, 38, 41, 48, 72, 150, 251, 283, 284, 303, 306, 311, 349, 447, 725, 796, 954, 960, 1056, 1307], "predefin": [273, 349], "predic": [40, 48, 49, 50, 51, 62, 63, 129, 143, 162, 165, 166, 167, 168, 210, 230, 249, 254, 255, 277, 282, 349, 419, 503, 751, 786, 828, 838, 859, 860, 870, 874, 883, 884, 888, 897, 900, 901, 910, 927, 928, 954, 1119, 1248, 1250, 1349], "predicate_pushdown": [48, 49, 50, 51, 62, 63, 129, 859, 860, 870, 888, 897, 910, 954], "predict": [276, 319, 349], "prefer": [148, 149, 153, 154, 158, 160, 162, 183, 209, 227, 251, 258, 282, 283, 312, 335, 349, 417, 418, 497, 586, 743, 744, 838, 854, 917, 954, 958, 1022, 1115, 1202, 1334, 1349, 1359, 1380], "prefilt": 167, "prefix": [40, 148, 149, 162, 202, 349, 360, 407, 424, 477, 595, 611, 614, 615, 617, 618, 715, 718, 719, 731, 838, 960, 1012, 1029, 1297, 1301, 1313], "prefix_": 614, "prefix_a": 614, "prefix_b": 614, "prefix_field": [612, 616], "presenc": [785, 794, 960], "present": [133, 178, 234, 349, 527, 601, 717, 718, 838, 910, 954], "preserv": [221, 222, 230, 238, 253, 255, 258, 277, 307, 308, 318, 349, 443, 444, 445, 464, 465, 503, 548, 627, 641, 674, 691, 838, 867, 868, 874, 882, 884, 900, 921, 954, 1052, 1053, 1054, 1119, 1165, 1229, 1257, 1273, 1331, 1349], "pressur": [51, 148, 149, 158, 160, 162, 166, 167, 672, 838, 954, 1254, 1349], "presum": [585, 838], "prev_pow2": 58, "prevent": [307, 349, 360, 435, 436, 610, 738, 838, 954, 1045, 1046, 1320, 1349], "preview": [237, 349], "previou": [54, 58, 202, 349, 352, 445, 610, 611, 613, 615, 617, 618, 628, 734, 838, 1054, 1218, 1349, 1354], "previous": [2, 3], "price": [349, 352, 1380], "primari": [153, 958, 1377, 1380], "primarili": 1, "primit": [40, 349, 527, 838], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 149, 170, 171, 173, 223, 237, 238, 252, 256, 305, 327, 349, 520, 602, 777, 780, 838, 859, 880, 954, 960, 1142, 1327, 1349, 1380], "prior": [135, 349, 352, 1349, 1354], "prioriti": 179, "probabl": [490, 634, 838, 1104, 1223, 1349], "process": [15, 38, 48, 49, 50, 51, 62, 63, 148, 149, 150, 162, 184, 283, 349, 859, 860, 870, 897, 910, 954], "process_index": [306, 349], "produc": [2, 3, 95, 143, 178, 182, 210, 253, 349, 382, 419, 546, 597, 796, 799, 838, 882, 888, 954, 987, 1163], "product": [56, 215, 253, 349, 435, 442, 838, 882, 954, 1045, 1051, 1349], "profil": [33, 181, 183, 859, 954], "profile_nam": 33, "programmat": [217, 349, 864, 954], "progress": [72, 78], "project": [48, 49, 50, 51, 62, 63, 129, 143, 162, 164, 165, 166, 167, 679, 680, 838, 859, 860, 870, 888, 897, 901, 910, 954], "projection_pushdown": [48, 49, 50, 51, 62, 63, 129, 859, 860, 870, 888, 897, 910, 954], "prompt": 137, "propag": [386, 492, 527, 556, 619, 620, 622, 683, 699, 766, 767, 838, 991, 1106, 1142, 1173, 1211, 1212, 1214, 1265, 1281, 1349], "propagate_nan": 768, "proper": [255, 349, 884, 954], "properti": [40, 41, 193, 196, 197, 206, 213, 214, 223, 231, 242, 286, 291, 322, 326, 349, 352, 353, 861, 862, 869, 904, 923, 928, 954, 959, 960, 1103, 1121, 1210, 1252, 1349, 1354, 1380], "proport": [749, 838, 1338, 1349], "protocol": [40, 131, 150, 151, 206, 349], "prototyp": 834, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 148, 149, 151, 152, 153, 158, 160, 162, 163, 164, 165, 166, 167, 178, 182, 192, 230, 234, 249, 254, 277, 296, 306, 349, 352, 402, 403, 477, 497, 517, 577, 585, 586, 687, 688, 692, 700, 701, 717, 718, 719, 720, 788, 820, 838, 850, 859, 870, 874, 883, 897, 900, 910, 913, 929, 951, 954, 1007, 1008, 1090, 1132, 1151, 1202, 1269, 1270, 1274, 1282, 1283, 1328, 1349, 1362, 1369, 1372, 1377, 1380], "provis": 851, "prune": [160, 165, 167, 888, 954], "pt0": 477, "public": [151, 349, 838, 850, 954, 1349, 1376], "pulp": 1358, "pure": [41, 349], "purpos": [609, 838, 954], "push": [148, 154, 158, 160, 162, 165, 166, 167, 168, 210, 349, 419, 838], "pushdown": [48, 49, 50, 51, 62, 63, 129, 143, 859, 860, 870, 888, 897, 901, 910, 927, 928, 954, 1248, 1250, 1349], "put": [38, 48, 74, 349, 353, 954], "pwd": 150, "py": 164, "pyarrow": [40, 47, 130, 135, 148, 151, 152, 154, 156, 160, 163, 168, 170, 301, 307, 308, 349, 817, 850, 1324, 1330, 1331, 1349, 1359, 1361, 1377], "pyarrow_opt": [47, 152, 160, 163, 349], "pyarrow_t": 1377, "pycapsul": [130, 131, 205, 963], "pycapsuleinterfac": [131, 205, 963], "pydant": 170, "pyiceberg": [42, 164, 170, 349], "pyodbc": [39, 349], "pyodbc_uri": [39, 349], "pyspark": 184, "pytest": [171, 173], "python": [0, 33, 34, 35, 43, 44, 74, 85, 100, 131, 148, 149, 154, 156, 170, 171, 173, 206, 251, 258, 283, 284, 303, 335, 349, 440, 445, 449, 507, 585, 586, 694, 763, 777, 778, 780, 781, 825, 826, 828, 838, 844, 865, 937, 954, 958, 959, 1054, 1058, 1068, 1069, 1070, 1074, 1202, 1276, 1329, 1349, 1353, 1376], "pythondatatyp": [65, 83, 210, 349, 834, 856, 954, 960], "pythonliter": [970, 1013, 1018, 1021, 1120, 1153, 1203, 1204, 1205, 1206, 1248, 1349], "pytorch": [311, 349, 1333, 1349], "q": [284, 349, 820, 1349, 1354, 1362], "q1": [41, 349], "q2": [41, 349], "q3": [41, 349], "q4": [41, 349], "qcut": [438, 838, 1048, 1349], "qhoo": 1380, "qmark": 150, "qqr": 960, "quad": [494, 838, 1110, 1349], "qualifi": [39, 349], "quantifi": [693, 1275], "quantil": [349, 634, 657, 658, 838, 954, 1223, 1240, 1349, 1366], "quantile_cont": 1370, "quantile_disc": 1370, "quarter": [239, 254, 281, 319, 349, 467, 472, 485, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1098, 1373], "queri": [10, 48, 49, 50, 51, 62, 63, 95, 129, 150, 151, 154, 162, 165, 166, 167, 227, 256, 272, 296, 349, 577, 585, 586, 701, 817, 838, 850, 859, 860, 870, 897, 899, 910, 913, 927, 928, 929, 937, 946, 954, 1115, 1202, 1283, 1349, 1358, 1359, 1361, 1365, 1376, 1378, 1379], "quick": [834, 1049, 1349, 1380], "quit": [254, 349, 883, 954], "quot": [38, 39, 48, 148, 149, 151, 162, 349, 729, 954, 1311], "quota_project_id": 35, "quote_char": [38, 48, 148, 149, 162, 349, 954], "quote_plu": 151, "quote_styl": [38, 48, 349, 954], "quotes_titl": 729, "quotient": 1371, "r": [148, 149, 162, 349, 592, 631, 686, 691, 692, 693, 694, 707, 708, 838, 960, 1268, 1273, 1274, 1275, 1276, 1289, 1290, 1304, 1362, 1372], "r1": 64, "r2": 64, "r3": 64, "rab": [684, 710, 1266, 1292, 1367], "rad": 1374, "radian": [439, 759, 838, 1370], "radix": [726, 1308], "rai": [759, 760], "raini": [707, 708, 1289, 1290], "rais": [1, 10, 16, 17, 21, 40, 64, 101, 102, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 148, 149, 153, 159, 160, 162, 167, 171, 173, 206, 210, 234, 273, 282, 307, 349, 385, 402, 419, 445, 470, 471, 552, 554, 597, 632, 634, 642, 684, 687, 696, 721, 723, 724, 726, 728, 779, 798, 838, 929, 990, 1007, 1054, 1083, 1084, 1169, 1171, 1221, 1223, 1230, 1266, 1269, 1278, 1303, 1305, 1306, 1308, 1310, 1330, 1349], "raise_if_empti": [148, 149, 153, 159, 162], "raise_if_undetermin": 597, "raise_on_fail": 929, "raker": 144, "ram": [48, 49, 50, 51, 954], "ran": [145, 838], "randn": 95, "random": [41, 43, 95, 154, 169, 176, 240, 285, 349, 515, 565, 637, 668, 673, 749, 838, 850, 1130, 1182, 1225, 1247, 1256, 1338, 1349], "randomli": 177, "rang": [18, 41, 150, 151, 217, 225, 239, 252, 349, 365, 439, 445, 453, 463, 468, 469, 470, 472, 485, 486, 521, 758, 763, 766, 776, 777, 778, 779, 780, 781, 792, 793, 796, 797, 824, 825, 826, 838, 864, 878, 954, 960, 1049, 1054, 1062, 1076, 1081, 1082, 1083, 1085, 1098, 1099, 1108, 1218, 1349, 1372], "rank": [374, 549, 761, 768, 783, 838, 979, 1166, 1349], "rankmethod": [637, 838, 1225, 1349], "rare": [446, 1055], "rather": [254, 349, 508, 585, 602, 634, 646, 731, 838, 883, 954, 1223, 1234, 1313, 1349], "raw": 151, "raw_output": [601, 910, 954], "raw_valu": 141, "re": [234, 239, 250, 314, 316, 349, 464, 465, 474, 477, 878, 918, 920, 954, 1077, 1078, 1087, 1090, 1377], "reach": [53, 705, 706, 731, 1287, 1288, 1313], "read": [37, 139, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 192, 218, 227, 349, 352, 440, 508, 828, 838, 865, 899, 954, 1115, 1349, 1354], "read_arrow_batches_from_odbc": 150, "read_clipboard": [37, 349], "read_csv": [147, 153, 162], "read_csv_batch": 139, "read_databas": [95, 151], "read_database_uri": 150, "read_excel": 159, "read_ndjson": 157, "read_od": 153, "read_opt": 153, "read_parquet": 167, "read_tabl": 160, "readabl": 834, "reader": [47, 51, 139, 143, 148, 149, 154, 156, 158, 160, 349, 954], "readi": 947, "readthedoc": [41, 349], "real": [693, 1275], "realli": [437, 685, 709, 838, 1047, 1267, 1291, 1349], "realloc": [158, 162, 165, 166, 227, 349, 1115, 1349], "rearrang": [258, 349], "reason": [184, 217, 349, 577, 585, 838, 864, 954], "receiv": [56, 150, 162, 258, 272, 335, 349, 586, 631, 838, 896, 954, 1380], "recent": [171, 172, 173, 174, 307, 349, 628, 642, 838, 1218, 1230, 1330, 1349, 1361, 1377], "rechunk": [64, 130, 131, 135, 148, 149, 152, 154, 156, 158, 160, 162, 163, 165, 166, 167, 227, 349, 838, 1034, 1115, 1126, 1208, 1349], "recognis": [10, 16, 17, 21, 960], "recommend": [41, 184, 217, 251, 256, 272, 349, 577, 855, 864, 954, 960], "record": [38, 44, 48, 144, 156, 168, 349, 954], "record_batch": [252, 349], "recordbatch": [130, 252, 349, 817, 1359, 1361, 1377], "recurs": [48, 49, 50, 51, 493, 495, 496, 838, 954, 1109, 1111, 1112, 1349], "red": [55, 96, 97, 335, 749, 838, 937, 1338, 1349], "redempt": 1358, "redshift": 151, "redshift_format": 195, "reduc": [51, 148, 149, 158, 160, 162, 165, 166, 167, 283, 336, 337, 339, 342, 349, 672, 773, 786, 838, 938, 939, 941, 944, 954, 1204, 1222, 1254, 1320, 1349], "reduct": [232, 349, 586, 838], "ref": [692, 694, 1274, 1276], "refer": [0, 33, 41, 100, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 215, 218, 349, 353, 440, 474, 477, 637, 692, 707, 708, 721, 723, 724, 728, 838, 865, 954, 1087, 1090, 1225, 1289, 1290, 1303, 1305, 1306, 1310, 1349], "referenc": [41, 349, 585, 707, 708, 734, 838, 1289, 1290, 1359, 1377], "reg": 144, "regard": [148, 768], "regardless": [135, 209, 238, 254, 312, 349, 418, 450, 701, 744, 828, 838, 854, 883, 917, 954, 1059, 1283], "regex": [98, 497, 592, 593, 595, 684, 686, 692, 693, 694, 696, 707, 708, 732, 784, 838, 960, 1266, 1268, 1274, 1275, 1276, 1278, 1289, 1290], "regexp_lik": 1370, "region": [41, 164, 349], "region_nam": 33, "regist": [1, 52, 53, 54, 57, 58, 59, 60, 143, 145, 181, 183, 296, 349, 838, 913, 954, 958, 1358, 1359, 1361, 1362, 1363, 1364, 1377, 1379], "register_dataframe_namespac": [1, 58, 59, 60], "register_expr_namespac": [1, 57, 59, 60], "register_glob": [1360, 1362, 1364, 1377], "register_io_sourc": 958, "register_lazyframe_namespac": [1, 57, 58, 60], "register_mani": [1360, 1361, 1364], "register_plugin": 838, "register_plugin_funct": 838, "register_series_namespac": [1, 57, 58, 59], "registr": [296, 349, 817, 850, 913, 954, 1364, 1377], "regrid": [521, 838], "regular": [138, 251, 282, 283, 319, 326, 349, 497, 684, 685, 686, 690, 692, 693, 694, 695, 696, 697, 707, 708, 709, 763, 784, 834, 838, 928, 954, 960, 1266, 1267, 1268, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1289, 1290, 1291, 1375], "reinterpret": [838, 1349], "rel": [41, 52, 53, 54, 145, 151, 152, 163, 164, 171, 172, 173, 174, 349, 467, 493, 495, 496, 749, 838, 1080, 1109, 1111, 1112, 1338, 1349], "relat": [150, 202, 707, 708, 960, 1289, 1290, 1365], "releas": [63, 253, 349, 586, 838, 860, 882, 954, 1380], "release_year": 1358, "relev": 64, "reli": [253, 349, 882, 954], "reliabl": [96, 97], "remain": [52, 148, 149, 162, 221, 222, 225, 230, 273, 277, 349, 443, 444, 503, 548, 641, 713, 714, 838, 867, 868, 874, 888, 900, 954, 1052, 1053, 1108, 1119, 1165, 1229, 1295, 1296, 1349, 1364], "remaind": [405, 714, 1010, 1296, 1371], "remap": 99, "remot": [95, 148, 149, 154, 156, 954], "remov": [4, 148, 149, 162, 206, 219, 230, 304, 349, 497, 611, 716, 717, 718, 719, 720, 784, 838, 866, 874, 954, 1298, 1299, 1300, 1301, 1302, 1325, 1349, 1379], "removes_pronoun": 709, "removesuffix": 611, "renam": [1, 133, 148, 149, 185, 238, 287, 288, 323, 324, 328, 330, 349, 360, 508, 603, 604, 610, 611, 612, 613, 615, 617, 618, 734, 736, 816, 820, 838, 877, 905, 906, 924, 925, 930, 932, 954, 966, 1278, 1317, 1326, 1349, 1377], "rename_field": [713, 714, 1295, 1296], "render": [601, 910, 954], "render_as_str": 150, "reoconstruct": [284, 349], "repeat": [54, 154, 165, 638, 640, 810, 829, 838, 1349], "repeat_bi": [838, 1349], "replac": [39, 40, 42, 148, 149, 162, 228, 229, 279, 313, 316, 323, 324, 349, 352, 449, 471, 501, 585, 586, 642, 708, 709, 724, 838, 872, 920, 924, 925, 954, 1058, 1084, 1117, 1230, 1248, 1250, 1290, 1291, 1306, 1349, 1354, 1370], "replace_al": [642, 707, 838, 1229, 1230, 1289, 1349], "replace_column": 349, "replace_strict": [641, 838, 1229, 1349], "replace_time_zon": [446, 452, 454, 1060, 1061, 1088], "replace_with": [709, 1291], "replic": [742, 838, 1332, 1349], "report": [150, 225, 349, 704, 1108, 1286, 1349], "repr": [137, 420, 424, 477, 1024, 1029, 1090], "repres": [38, 41, 42, 48, 70, 71, 73, 84, 88, 93, 130, 132, 134, 135, 136, 150, 273, 296, 297, 306, 307, 320, 327, 349, 423, 507, 530, 531, 573, 579, 585, 682, 698, 703, 707, 708, 711, 722, 750, 753, 770, 782, 784, 798, 799, 800, 809, 814, 815, 819, 827, 834, 838, 913, 914, 922, 954, 960, 1028, 1248, 1264, 1280, 1285, 1289, 1290, 1293, 1304, 1330, 1339, 1349, 1377], "represent": [11, 45, 46, 70, 71, 73, 88, 137, 289, 305, 349, 420, 422, 423, 424, 448, 453, 456, 458, 459, 460, 461, 462, 463, 466, 468, 469, 473, 486, 487, 489, 600, 742, 838, 870, 886, 907, 954, 1024, 1027, 1028, 1029, 1030, 1057, 1062, 1065, 1066, 1067, 1071, 1072, 1073, 1075, 1076, 1079, 1081, 1082, 1086, 1099, 1100, 1102, 1327, 1332, 1349, 1368], "request": 35, "requested_schema": [205, 963], "requir": [1, 33, 34, 35, 40, 41, 56, 64, 135, 150, 151, 171, 172, 173, 174, 187, 215, 221, 282, 306, 307, 308, 311, 349, 399, 420, 424, 493, 495, 496, 578, 586, 627, 650, 652, 654, 656, 658, 661, 663, 665, 672, 721, 723, 724, 746, 762, 764, 768, 770, 813, 838, 862, 867, 868, 869, 912, 923, 954, 1004, 1107, 1109, 1111, 1112, 1195, 1254, 1289, 1303, 1305, 1306, 1330, 1331, 1335, 1349], "require_al": 960, "require_http": 187, "rerais": [63, 860, 954], "rerun": [227, 349, 1115, 1349], "resampl": [239, 349, 878, 954], "reset": [4, 202], "reset_index": [135, 239, 349, 878, 954], "reshap": [273, 307, 349, 550, 765, 838, 1167, 1349], "resolv": [145, 230, 349, 449, 577, 861, 862, 869, 904, 923, 954], "resourc": [929, 958], "respect": [41, 148, 162, 349, 685, 695, 697, 709, 960, 1267, 1277, 1279, 1291, 1333, 1349], "respons": [151, 265, 349, 893, 954], "rest": [729, 1311, 1372], "restor": [202, 349, 352, 1349, 1354], "restore_default": 202, "restrict": [31, 714, 1296], "result": [14, 38, 45, 46, 47, 48, 49, 50, 51, 56, 64, 134, 135, 136, 150, 151, 153, 162, 165, 167, 168, 182, 227, 230, 239, 240, 253, 254, 255, 269, 273, 277, 281, 284, 289, 290, 292, 306, 307, 308, 319, 326, 328, 334, 349, 445, 472, 474, 477, 485, 493, 494, 495, 496, 500, 507, 515, 523, 535, 576, 577, 585, 586, 600, 627, 632, 634, 641, 642, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 670, 671, 691, 708, 712, 713, 724, 745, 749, 772, 773, 777, 779, 780, 781, 782, 797, 798, 799, 810, 813, 814, 815, 817, 829, 838, 855, 859, 864, 874, 878, 882, 883, 884, 888, 897, 900, 903, 907, 908, 909, 928, 930, 936, 947, 948, 954, 960, 969, 1085, 1087, 1090, 1098, 1109, 1111, 1112, 1115, 1116, 1130, 1137, 1152, 1193, 1202, 1221, 1223, 1229, 1230, 1231, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1251, 1253, 1273, 1294, 1295, 1306, 1330, 1331, 1338, 1349, 1359, 1365, 1372, 1377, 1378, 1380], "resultset": 150, "retain": [230, 277, 349, 874, 900, 954], "retri": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 954], "retriev": [187, 188, 192, 234, 306, 349, 379, 380, 542, 543, 732, 809, 984, 985, 1159, 1160, 1314, 1328, 1349, 1365], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 95, 107, 110, 118, 126, 129, 130, 132, 133, 134, 135, 136, 138, 139, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 184, 185, 192, 204, 207, 209, 211, 214, 215, 216, 220, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 237, 238, 239, 241, 242, 243, 247, 249, 250, 251, 252, 253, 256, 257, 258, 260, 262, 267, 268, 269, 271, 272, 273, 278, 281, 282, 283, 284, 285, 289, 296, 299, 300, 306, 307, 308, 311, 312, 313, 314, 319, 322, 323, 324, 330, 332, 334, 335, 338, 343, 349, 361, 363, 366, 367, 368, 369, 370, 371, 374, 375, 379, 380, 381, 383, 385, 386, 397, 401, 402, 403, 404, 405, 406, 407, 417, 418, 422, 423, 428, 429, 430, 431, 432, 438, 439, 445, 446, 448, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 499, 507, 509, 510, 512, 516, 517, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 542, 543, 545, 550, 552, 554, 555, 556, 558, 565, 575, 576, 583, 585, 586, 598, 600, 601, 602, 607, 631, 634, 636, 640, 641, 642, 643, 645, 646, 668, 669, 674, 675, 676, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 710, 711, 712, 713, 714, 722, 726, 731, 739, 740, 741, 743, 744, 745, 747, 748, 749, 752, 753, 758, 759, 760, 761, 762, 763, 764, 768, 769, 770, 771, 776, 777, 778, 779, 780, 781, 782, 785, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 810, 813, 816, 817, 820, 823, 824, 825, 826, 828, 829, 838, 854, 857, 859, 860, 862, 863, 864, 869, 870, 876, 878, 879, 882, 886, 887, 888, 896, 897, 901, 903, 907, 910, 916, 917, 918, 923, 924, 925, 932, 934, 936, 940, 945, 947, 954, 959, 960, 962, 964, 967, 968, 969, 977, 978, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1022, 1026, 1027, 1028, 1035, 1041, 1042, 1048, 1049, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1108, 1110, 1114, 1115, 1120, 1124, 1131, 1132, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1167, 1169, 1171, 1172, 1173, 1175, 1182, 1192, 1193, 1200, 1202, 1207, 1216, 1223, 1229, 1230, 1231, 1232, 1233, 1234, 1247, 1249, 1257, 1265, 1266, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1292, 1293, 1294, 1295, 1296, 1304, 1308, 1313, 1321, 1324, 1331, 1334, 1336, 1337, 1338, 1340, 1349, 1358, 1359, 1363, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1375, 1377, 1378, 1379, 1380], "return_as_str": [237, 349, 602], "return_dtyp": [41, 258, 349, 585, 586, 641, 642, 752, 799, 800, 838, 1202, 1229, 1230, 1349], "return_typ": [306, 311, 349], "returns_scalar": [145, 585, 586, 800, 838], "reus": [62, 63, 129, 202, 859, 860, 870, 897, 910, 954], "reusabl": 202, "rev": [255, 349, 884, 954], "revers": [209, 225, 312, 349, 418, 432, 433, 434, 435, 436, 611, 613, 615, 744, 765, 771, 838, 854, 917, 954, 1042, 1043, 1044, 1045, 1046, 1349, 1367, 1370], "reverse_": 613, "reverse_a": 613, "reverse_b": 613, "revert": [7, 9, 11], "rhap": [695, 697, 1279], "rhapsodi": [695, 697, 1279], "right": [9, 11, 16, 17, 19, 28, 41, 72, 148, 149, 171, 172, 173, 174, 239, 253, 254, 281, 318, 349, 438, 493, 494, 495, 496, 523, 566, 567, 568, 569, 634, 647, 650, 652, 654, 656, 658, 661, 663, 665, 669, 677, 764, 777, 778, 780, 781, 796, 797, 825, 826, 838, 878, 882, 883, 903, 921, 954, 1048, 1109, 1110, 1111, 1112, 1137, 1183, 1184, 1185, 1186, 1223, 1249, 1260, 1349, 1365, 1370], "right_left": [253, 318, 349, 882, 921, 954], "right_on": [253, 254, 318, 349, 882, 883, 921, 954], "rightmost": [669, 838, 1249, 1349, 1372], "rld": [716, 718, 1300], "rle": [646, 838, 1234, 1349], "rle_id": [645, 838, 1349], "rle_id_a": [646, 838], "rle_id_ab": [646, 838], "rmm": 929, "rn": [148, 149, 162], "role": [33, 151], "roll": [239, 349, 445, 464, 465, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 766, 814, 815, 838, 878, 954, 1054, 1077, 1078, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1349], "rollback": [465, 1078], "rolled_forward": 445, "rollforward": [464, 1077], "rolling_map": [838, 1349], "rolling_max": [838, 1349], "rolling_max_bi": 838, "rolling_mean": [838, 1349], "rolling_mean_bi": 838, "rolling_median": [838, 1349], "rolling_median_bi": 838, "rolling_min": [838, 1349], "rolling_min_bi": 838, "rolling_quantil": [838, 1349], "rolling_quantile_bi": 838, "rolling_row_max": [650, 838], "rolling_row_mean": [652, 838], "rolling_row_median": [654, 838], "rolling_row_min": [656, 838], "rolling_row_quantil": [658, 838], "rolling_row_std": [661, 838], "rolling_row_sum": [663, 838], "rolling_row_var": [665, 838], "rolling_skew": [838, 1349], "rolling_std": [838, 1349], "rolling_std_bi": 838, "rolling_sum": [648, 838, 1235, 1349], "rolling_sum_bi": 838, "rolling_var": [838, 1349], "rolling_var_bi": 838, "rollinggroupbi": [281, 349], "rollinginterpolationmethod": [217, 275, 341, 349, 635, 657, 658, 811, 838, 864, 898, 943, 954, 1049, 1224, 1240, 1349], "ronaldo": [692, 1274], "root": [152, 163, 425, 599, 610, 611, 613, 615, 617, 618, 681, 837, 838, 1032, 1263, 1349, 1371], "rotat": [349, 352, 1349, 1354], "round": [21, 41, 58, 137, 150, 349, 426, 430, 506, 667, 740, 838, 1033, 1122, 1246, 1349, 1370], "round_sig_fig": [838, 1349], "round_str": 1085, "round_td": 1085, "rounded_corn": 21, "row": [15, 21, 26, 38, 39, 41, 47, 48, 51, 53, 56, 57, 59, 64, 104, 110, 118, 126, 133, 134, 135, 136, 137, 143, 144, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 171, 172, 178, 207, 209, 210, 211, 221, 222, 227, 230, 232, 233, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 264, 265, 269, 273, 277, 281, 284, 285, 294, 300, 303, 305, 306, 311, 312, 314, 316, 317, 318, 325, 326, 330, 332, 334, 335, 343, 349, 353, 374, 375, 383, 398, 418, 419, 499, 507, 510, 516, 539, 550, 577, 627, 628, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 678, 680, 691, 700, 739, 744, 758, 761, 767, 769, 786, 790, 792, 793, 795, 797, 812, 814, 815, 823, 828, 838, 854, 857, 867, 868, 874, 875, 876, 878, 879, 882, 883, 884, 885, 887, 888, 892, 893, 900, 911, 916, 917, 918, 920, 921, 927, 928, 932, 934, 936, 937, 945, 954, 964, 979, 988, 1114, 1115, 1124, 1131, 1156, 1167, 1218, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1261, 1273, 1282, 1321, 1349, 1358, 1365, 1367, 1378, 1379, 1380], "row_group": [160, 167], "row_group_s": [47, 51, 349, 954], "row_height": [41, 349], "row_index": [41, 349], "row_index_nam": [148, 149, 154, 156, 158, 160, 162, 165, 166, 167], "row_index_offset": [148, 149, 154, 156, 158, 160, 162, 165, 166, 167], "row_nr": [325, 349, 927, 954], "row_tot": [41, 349], "rowname_col": [349, 353], "rows_by_kei": [251, 283, 302, 349], "rowserror": [282, 349], "rowtotalsdefinit": [41, 349], "rtol": [171, 172, 173, 174], "rtrim": 1370, "ru": 1372, "rule": [148, 160, 162, 167, 232, 349, 685, 709, 724, 1267, 1291, 1306], "run": [48, 49, 50, 51, 62, 63, 71, 95, 129, 150, 178, 181, 182, 183, 238, 253, 256, 258, 288, 314, 324, 335, 349, 423, 437, 549, 585, 586, 645, 646, 703, 816, 838, 859, 860, 870, 877, 882, 888, 892, 897, 899, 906, 910, 918, 925, 929, 954, 958, 960, 1028, 1047, 1166, 1202, 1233, 1234, 1285, 1349, 1377, 1380], "runtim": 958, "runtimeerror": [307, 349, 1330, 1349], "rust": [38, 47, 48, 100, 112, 145, 153, 154, 156, 160, 258, 335, 349, 694, 954, 958, 1202, 1276, 1349], "s1": [55, 96, 97, 173, 174, 232, 349, 764, 768, 770, 1003, 1106, 1107, 1126, 1151, 1161, 1194, 1214, 1226, 1340, 1349], "s2": [1, 55, 96, 97, 173, 174, 232, 349, 764, 768, 770, 1003, 1034, 1051, 1106, 1107, 1126, 1142, 1151, 1161, 1194, 1208, 1214, 1226, 1340, 1349], "s3": [1, 40, 152, 163, 164, 167, 168, 349, 899, 954, 1003, 1194, 1349], "s_": 477, "s_bar": 1367, "s_dt": [477, 1372, 1373], "s_dt1": 1372, "s_dt2": 1372, "s_dtm": 477, "s_foo": 1367, "s_from_str_repr": [1327, 1349], "s_head_5": 698, "s_head_n": 698, "s_tail_5": 722, "s_tail_n": 722, "s_td": 477, "s_tm": [477, 1372, 1373], "safe": [639, 838, 1227, 1349], "sale": [627, 838], "salesforce_format": 195, "sam": 13, "same": [21, 40, 41, 54, 55, 56, 62, 63, 64, 96, 97, 113, 154, 162, 171, 172, 173, 174, 176, 202, 230, 238, 254, 258, 273, 277, 283, 284, 295, 314, 323, 324, 328, 335, 349, 357, 364, 397, 422, 443, 444, 477, 503, 507, 508, 509, 512, 576, 590, 596, 627, 641, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 673, 680, 691, 702, 734, 834, 838, 859, 860, 874, 877, 883, 886, 888, 900, 912, 918, 924, 925, 930, 954, 960, 965, 1002, 1027, 1052, 1053, 1058, 1090, 1193, 1202, 1229, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1273, 1284, 1340, 1349, 1363, 1365, 1373], "samoa": [446, 1055], "sampl": [148, 149, 335, 349, 673, 677, 796, 797, 838, 937, 1260, 1349, 1366], "sample_s": [148, 149], "sampled_from": 1380, "sandwich": [235, 349], "sat": [349, 352], "satisfi": [523, 838, 1137, 1349], "saturdai": [239, 349, 878, 954], "save": [2, 3, 6, 239, 254, 281, 319, 349, 446, 454, 467, 472, 485, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 782, 825, 826, 834, 838, 850, 878, 883, 903, 954, 1063, 1080, 1085, 1098], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [145, 207, 249, 258, 282, 292, 349, 423, 585, 669, 671, 698, 703, 711, 722, 798, 800, 838, 909, 954, 964, 1028, 1151, 1249, 1253, 1280, 1285, 1293, 1304, 1349], "scale": [29, 72, 225, 349, 406, 586, 631, 725, 838, 960, 1108, 1307, 1349], "scale_negative_even": [631, 838], "scan": [133, 136, 148, 149, 150, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 192, 349, 700, 954, 1282], "scan_csv": [48, 49, 50, 51, 148, 149, 954], "scan_ipc": 154, "scan_ndjson": 158, "scan_parquet": [52, 53, 54, 160, 168, 899, 954], "scan_pyarrow_dataset": [160, 167], "scan_tabl": 200, "scatter": [349, 352, 1349, 1354], "scenario": 1349, "schedul": [63, 860, 954], "schema": [0, 1, 15, 29, 36, 39, 40, 57, 58, 59, 64, 95, 104, 121, 122, 130, 132, 133, 134, 136, 143, 144, 148, 149, 150, 151, 153, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 188, 190, 191, 192, 196, 198, 211, 212, 213, 219, 223, 225, 252, 256, 258, 265, 269, 278, 307, 311, 349, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 452, 576, 577, 586, 597, 612, 614, 616, 700, 752, 820, 838, 850, 857, 858, 861, 862, 866, 869, 888, 893, 901, 923, 937, 954, 960, 1037, 1282, 1349, 1358], "schema_mod": [40, 349], "schema_overrid": [130, 132, 133, 134, 135, 136, 148, 149, 150, 151, 153, 157, 158, 159, 162, 166, 252, 307, 349, 954, 960], "schemadefinit": [130, 132, 133, 134, 136, 157, 158, 166, 349, 954], "schemadict": [87, 95, 130, 132, 133, 134, 135, 136, 143, 148, 150, 151, 153, 159, 160, 162, 165, 167, 349, 820, 888, 937, 954], "schemainitdatatyp": 959, "scheme": [52, 53, 54], "schindler": 1358, "scientif": [12, 38, 48, 349, 954], "scikit": [311, 349], "scipi": [535, 677, 838, 1152, 1260, 1349], "scope": [34, 35, 202, 849, 960, 1361, 1364, 1377], "score": [41, 273, 349], "script": [349, 352, 1349, 1354], "scroll": [41, 349], "sdiff": 568, "sdk": 187, "search": [254, 349, 577, 685, 695, 697, 709, 883, 912, 954, 1134, 1267, 1277, 1279, 1291, 1349], "search_sort": [838, 1349], "searchsortedsid": [669, 838, 1249, 1349], "searchstrategi": [175, 177, 178, 179, 180, 182], "season": [707, 708], "sec": [1373, 1380], "second": [38, 48, 158, 162, 165, 166, 171, 172, 173, 174, 239, 254, 281, 319, 349, 456, 459, 461, 462, 466, 467, 470, 472, 477, 484, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 707, 708, 721, 724, 779, 780, 781, 782, 824, 825, 826, 828, 838, 878, 883, 903, 954, 960, 1080, 1083, 1085, 1097, 1098, 1110, 1289, 1290, 1303, 1306, 1349, 1372, 1373, 1378, 1380], "second_part": [713, 714, 1295, 1296], "seconds_diff": 484, "secret": [164, 167], "section": [273, 349, 684, 692, 693, 696, 707, 708, 777, 778, 780, 781, 825, 826, 958, 1266, 1274, 1275, 1278, 1289, 1290], "secur": [440, 838, 865, 954], "see": [38, 40, 41, 43, 44, 47, 48, 49, 50, 51, 71, 143, 145, 150, 151, 152, 153, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 178, 182, 192, 204, 215, 230, 239, 253, 272, 273, 277, 318, 349, 353, 411, 412, 414, 415, 427, 477, 502, 535, 585, 677, 684, 692, 693, 696, 698, 707, 708, 722, 777, 778, 780, 781, 812, 825, 826, 834, 838, 874, 878, 900, 921, 929, 954, 958, 960, 962, 1016, 1017, 1019, 1020, 1030, 1036, 1090, 1152, 1260, 1266, 1274, 1275, 1278, 1280, 1289, 1290, 1304, 1349, 1380], "seed": [95, 169, 240, 285, 349, 515, 565, 637, 668, 673, 838, 1130, 1182, 1225, 1247, 1256, 1349], "seed_1": [240, 349, 515, 838, 1130, 1349], "seed_2": [240, 349, 515, 838, 1130, 1349], "seed_3": [240, 349, 515, 838, 1130, 1349], "seen": [477, 1090], "seen_group": 149, "select": [1, 8, 39, 48, 49, 50, 51, 56, 57, 58, 59, 62, 63, 95, 101, 146, 148, 149, 150, 151, 152, 154, 156, 160, 162, 168, 177, 207, 208, 249, 250, 254, 258, 269, 272, 282, 288, 294, 296, 309, 315, 319, 326, 349, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 383, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 404, 407, 408, 413, 416, 417, 418, 421, 425, 426, 428, 429, 430, 431, 437, 439, 441, 442, 443, 444, 447, 449, 450, 458, 464, 465, 467, 471, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 490, 493, 495, 496, 497, 498, 499, 500, 504, 506, 510, 514, 515, 516, 517, 518, 519, 520, 521, 524, 525, 528, 534, 535, 536, 538, 539, 549, 550, 577, 580, 581, 582, 583, 585, 586, 587, 588, 589, 593, 605, 607, 609, 610, 612, 614, 616, 619, 620, 624, 625, 626, 627, 629, 630, 633, 635, 636, 637, 638, 639, 640, 643, 644, 645, 648, 659, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 695, 696, 697, 699, 704, 721, 732, 734, 735, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 753, 755, 757, 760, 761, 762, 765, 766, 768, 769, 770, 771, 774, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 801, 803, 805, 806, 808, 809, 812, 813, 817, 818, 819, 820, 821, 823, 827, 834, 838, 853, 859, 860, 862, 870, 883, 896, 897, 906, 910, 911, 913, 919, 926, 928, 929, 954, 960, 964, 1084, 1123, 1166, 1248, 1250, 1261, 1279, 1283, 1303, 1349, 1358, 1359, 1360, 1361, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379], "select_from": [177, 180, 182], "select_seq": [349, 954], "selector": [0, 41, 210, 219, 221, 222, 226, 264, 271, 273, 295, 304, 306, 311, 314, 316, 317, 349, 353, 477, 497, 593, 838, 850, 856, 866, 867, 868, 871, 892, 912, 918, 920, 954], "selectortyp": [41, 349, 960], "self": [1, 57, 58, 59, 60, 62, 63, 129, 296, 327, 349, 817, 838, 859, 860, 870, 897, 910, 913, 926, 954, 969, 1014, 1015, 1016, 1017, 1019, 1020, 1023, 1037, 1042, 1115, 1119, 1133, 1200, 1202, 1215, 1219, 1220, 1226, 1229, 1230, 1248, 1250, 1251, 1262, 1337, 1340, 1349, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1377], "semi": [144, 253, 349, 882, 954, 1365], "semigraph": 21, "sens": [148, 154, 156, 265, 319, 349, 627, 838, 893, 954], "sensit": [684, 693, 696, 707, 708, 1266, 1275, 1278, 1289, 1290], "sep": 144, "separ": [9, 11, 25, 28, 37, 38, 48, 139, 144, 147, 148, 149, 153, 162, 271, 273, 304, 313, 315, 349, 383, 386, 477, 550, 556, 586, 691, 767, 772, 773, 838, 919, 954, 988, 991, 1090, 1167, 1173, 1273, 1319, 1325, 1349, 1372], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 52, 54, 56, 87, 130, 132, 133, 134, 136, 144, 148, 149, 150, 153, 157, 158, 159, 162, 166, 176, 177, 178, 179, 180, 209, 217, 226, 227, 253, 254, 264, 269, 271, 272, 273, 284, 295, 304, 306, 311, 312, 316, 317, 318, 319, 349, 398, 418, 438, 509, 527, 577, 585, 631, 634, 641, 642, 680, 709, 719, 720, 734, 744, 761, 772, 773, 786, 788, 796, 797, 799, 800, 809, 812, 818, 838, 854, 864, 871, 882, 883, 892, 896, 912, 917, 920, 921, 954, 960, 1003, 1048, 1049, 1115, 1194, 1223, 1229, 1230, 1291, 1317, 1349], "sequenti": [62, 63, 129, 288, 324, 349, 859, 860, 870, 897, 906, 910, 925, 954], "ser": [1060, 1061, 1088], "seri": [0, 1, 12, 26, 41, 55, 57, 58, 59, 60, 64, 65, 74, 87, 96, 97, 106, 130, 132, 135, 137, 145, 173, 174, 178, 207, 220, 230, 232, 234, 236, 239, 240, 243, 244, 246, 248, 250, 260, 262, 267, 277, 279, 281, 285, 299, 302, 305, 307, 309, 310, 329, 349, 364, 375, 398, 401, 420, 421, 422, 423, 424, 426, 471, 500, 503, 506, 509, 510, 520, 525, 527, 528, 530, 531, 532, 533, 544, 550, 552, 577, 583, 585, 586, 637, 638, 639, 640, 641, 642, 647, 648, 659, 670, 672, 698, 709, 721, 722, 723, 724, 728, 732, 743, 748, 758, 762, 764, 765, 768, 770, 772, 773, 777, 778, 780, 781, 786, 788, 792, 793, 796, 797, 798, 799, 800, 810, 812, 813, 816, 817, 820, 825, 826, 829, 838, 850, 874, 878, 900, 903, 931, 954, 1341, 1343, 1345, 1348, 1350, 1353, 1354, 1355, 1356, 1357, 1359, 1361, 1372, 1377, 1380], "serial": [45, 46, 218, 349, 440, 604, 838, 865, 954], "serializ": [145, 838], "serializationformat": [218, 289, 349, 440, 600, 838, 865, 907, 954], "seriesplot": [1349, 1354], "server": [39, 150, 151, 349], "servic": 33, "service_account": [152, 163], "service_account_json_absolute_path": [152, 163], "session": 150, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 62, 63, 68, 71, 72, 74, 131, 132, 133, 136, 145, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 192, 202, 206, 214, 221, 222, 231, 234, 238, 240, 251, 253, 254, 262, 264, 283, 285, 287, 289, 294, 299, 304, 306, 307, 311, 313, 314, 316, 317, 318, 323, 349, 352, 361, 363, 385, 386, 398, 409, 411, 412, 414, 415, 427, 438, 470, 471, 488, 515, 527, 552, 554, 556, 565, 566, 567, 568, 569, 571, 577, 585, 586, 593, 594, 600, 631, 634, 641, 642, 648, 649, 651, 653, 655, 657, 660, 662, 664, 668, 673, 677, 678, 683, 699, 700, 707, 708, 711, 716, 717, 718, 719, 720, 721, 723, 724, 728, 749, 753, 755, 758, 762, 764, 767, 768, 770, 777, 778, 779, 780, 781, 782, 792, 793, 796, 797, 798, 804, 810, 813, 814, 815, 816, 820, 822, 825, 826, 828, 829, 838, 850, 859, 860, 867, 868, 870, 877, 882, 883, 888, 892, 897, 905, 907, 910, 911, 918, 920, 921, 924, 937, 954, 967, 968, 990, 991, 1003, 1007, 1014, 1016, 1017, 1019, 1020, 1036, 1048, 1083, 1084, 1101, 1121, 1130, 1142, 1149, 1169, 1171, 1173, 1182, 1183, 1184, 1185, 1186, 1188, 1194, 1202, 1223, 1229, 1230, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1247, 1248, 1249, 1256, 1260, 1261, 1265, 1281, 1282, 1289, 1290, 1293, 1298, 1299, 1300, 1303, 1305, 1306, 1310, 1330, 1338, 1349, 1368, 1376, 1380], "set_": 202, "set_auto_structifi": [287, 323, 349, 905, 924, 954], "set_decimal_separ": 28, "set_environ": 181, "set_except": [63, 860, 954], "set_fmt_float": 31, "set_fmt_str_length": [685, 695, 697, 709, 1267, 1279, 1291], "set_index": [239, 349, 878, 954], "set_legend": [41, 349], "set_sort": [281, 319, 349, 647, 838, 903, 954, 1349], "set_stat": 31, "set_streaming_chunk_s": [859, 954], "set_styl": [41, 349], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 56], "set_tbl_row": 202, "set_tbl_width_char": 709, "set_thousands_separ": 9, "set_titl": [41, 349], "set_verbos": 202, "setosa": [349, 352], "setup": 1380, "seventeen": [519, 838], "sever": [130, 132, 133, 134, 136, 157, 158, 166, 349, 899, 954, 1380], "sfu": 151, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 55, 56, 57, 58, 59, 60, 64, 65, 83, 87, 95, 96, 97, 104, 123, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 157, 158, 162, 168, 175, 178, 182, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 287, 289, 292, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 605, 606, 607, 608, 609, 610, 611, 613, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 838, 853, 854, 856, 857, 859, 860, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 907, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 959, 960, 964, 965, 966, 969, 971, 972, 973, 974, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1106, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1126, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1207, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1253, 1254, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1319, 1321, 1322, 1323, 1325, 1326, 1327, 1332, 1334, 1335, 1336, 1337, 1338, 1340, 1349, 1358, 1359, 1360, 1361, 1363, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1377, 1378], "share": [171, 172, 173, 174, 225, 349, 1108, 1349], "shawshank": 1358, "sheet": [41, 153, 159, 349], "sheet1": [41, 349], "sheet_id": [153, 159], "sheet_nam": [153, 159], "sheet_zoom": [41, 349], "sheetnam": [153, 159], "shift": [239, 349, 441, 547, 628, 766, 838, 878, 954, 1050, 1164, 1218, 1349], "short": [171, 173, 405, 1010], "shorten": [171, 173], "shorter": [148, 149, 162, 577, 792, 793], "shorthand": [349, 352, 1349, 1354], "should": [11, 39, 41, 47, 48, 49, 50, 51, 64, 95, 130, 132, 134, 136, 143, 144, 153, 157, 158, 162, 166, 168, 175, 176, 178, 182, 219, 251, 253, 254, 258, 282, 283, 284, 295, 303, 304, 315, 335, 349, 359, 437, 440, 488, 494, 497, 530, 531, 549, 586, 600, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 669, 677, 680, 707, 708, 749, 761, 782, 784, 798, 800, 814, 815, 828, 834, 838, 859, 865, 866, 870, 882, 883, 888, 897, 907, 910, 912, 919, 954, 960, 1047, 1101, 1110, 1166, 1202, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1249, 1260, 1289, 1290, 1338, 1349, 1359], "show": [31, 41, 217, 222, 237, 256, 270, 349, 517, 601, 838, 864, 897, 910, 954, 1132, 1349, 1363, 1376], "show_graph": [256, 349, 954], "show_plot": [897, 954], "shrink": [293, 349, 672, 838, 1254, 1255, 1349], "shrink_dtyp": [838, 1349], "shrink_to_fit": [349, 1349], "shuffl": [169, 285, 311, 335, 349, 565, 668, 838, 937, 1182, 1247, 1349], "side": [41, 145, 239, 281, 349, 523, 566, 567, 568, 569, 647, 650, 652, 654, 656, 658, 661, 663, 665, 669, 777, 778, 780, 781, 796, 797, 825, 826, 838, 878, 903, 954, 1137, 1183, 1184, 1185, 1186, 1249, 1349], "sign": [70, 71, 73, 78, 79, 80, 81, 82, 88, 467, 639, 707, 708, 731, 838, 960, 1080, 1227, 1289, 1290, 1313, 1349, 1370], "sign_x": 1371, "signed_integ": 960, "signific": [167, 251, 258, 349, 411, 412, 414, 415, 586, 667, 838, 1016, 1017, 1019, 1020, 1202, 1246, 1349], "significantli": [153, 258, 335, 349, 1202, 1349, 1380], "silenc": 104, "silent": [726, 1308], "similar": [37, 47, 147, 184, 232, 254, 292, 314, 316, 349, 393, 474, 477, 570, 627, 671, 736, 795, 828, 838, 874, 883, 909, 918, 920, 954, 998, 1087, 1090, 1187, 1253, 1349], "similarli": [41, 133, 239, 254, 281, 319, 349, 467, 472, 485, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 825, 826, 838, 878, 883, 903, 954, 1080, 1085, 1098], "simpl": [41, 269, 349], "simpler": [960, 1289], "simpli": [162, 772, 786], "simplifi": [48, 49, 50, 51, 62, 63, 129, 859, 860, 870, 897, 910, 954], "simplify_express": [48, 49, 50, 51, 62, 63, 129, 859, 860, 870, 897, 910, 954], "sin": [838, 1349, 1370], "sinc": [40, 65, 70, 71, 88, 148, 149, 150, 152, 158, 162, 163, 165, 166, 175, 176, 177, 178, 182, 185, 208, 264, 307, 325, 330, 349, 452, 455, 488, 508, 585, 604, 641, 683, 691, 751, 760, 768, 788, 838, 853, 870, 892, 912, 926, 927, 932, 954, 1061, 1064, 1069, 1070, 1101, 1129, 1229, 1265, 1273, 1330, 1349], "sind": 1370, "sine": [368, 369, 585, 675, 676, 838, 973, 974, 1258, 1259, 1349, 1374], "singl": [41, 47, 56, 63, 64, 75, 147, 148, 149, 150, 151, 152, 153, 160, 162, 163, 165, 176, 210, 219, 220, 221, 222, 227, 234, 240, 249, 258, 271, 282, 284, 295, 306, 307, 349, 382, 423, 427, 445, 467, 509, 512, 515, 546, 552, 585, 586, 638, 641, 643, 645, 680, 683, 698, 699, 703, 711, 722, 751, 761, 765, 766, 767, 793, 797, 799, 800, 818, 826, 834, 838, 856, 866, 867, 868, 912, 954, 960, 987, 1028, 1036, 1054, 1080, 1115, 1130, 1163, 1169, 1226, 1229, 1231, 1233, 1265, 1280, 1281, 1285, 1293, 1304, 1324, 1330, 1349, 1360], "singlecolselector": 207, "singleindexselector": [207, 964], "sinh": [838, 1349], "sink": 851, "sink_": [52, 54], "sink_csv": [52, 53, 54, 954], "sink_ipc": 954, "sink_ndjson": 954, "sink_parquet": [52, 954], "site_id": [349, 353], "six": [669, 838], "size": [15, 47, 51, 53, 143, 148, 149, 150, 175, 176, 177, 178, 182, 184, 225, 317, 349, 577, 643, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 758, 792, 793, 814, 815, 838, 859, 954, 1108, 1231, 1241, 1349, 1380], "sizeunit": [225, 349, 406, 1011, 1108, 1349], "skew": [659, 838, 1241, 1349], "skewtest": [677, 838, 1260, 1349], "skip": [148, 149, 153, 160, 162, 167, 254, 317, 349, 883, 954, 1202, 1349, 1365], "skip_empty_lin": 153, "skip_lin": [148, 162], "skip_nul": [586, 838, 1202, 1349], "skip_row": [148, 149, 162], "skip_rows_after_head": [148, 149, 162], "sklearn": [311, 349], "slice": [48, 49, 50, 51, 57, 62, 63, 129, 145, 225, 241, 252, 300, 349, 555, 575, 586, 597, 599, 648, 649, 651, 653, 655, 657, 660, 662, 664, 698, 722, 838, 859, 860, 870, 888, 897, 910, 954, 1108, 1131, 1172, 1192, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1280, 1304, 1321, 1349, 1372], "slice_pushdown": [48, 49, 50, 51, 62, 63, 129, 859, 860, 870, 888, 897, 910, 954], "slide": [437, 838, 1047, 1349], "slightli": [48, 49, 50, 51, 100, 507, 838, 954, 1373], "slot": [437, 441, 547, 838, 1047, 1050, 1164, 1349], "slow": [116, 133, 136, 148, 149, 150, 153, 157, 158, 159, 162, 166, 167, 349, 437, 586, 648, 700, 838, 937, 954, 1047, 1235, 1282, 1349], "slower": [134, 136, 153, 238, 258, 271, 319, 335, 349, 586, 800, 838, 877, 937, 954, 1202, 1349], "small": [12, 151, 472, 954, 1380], "smaller": [47, 51, 53, 225, 349, 954, 1108, 1349], "smallest": [209, 312, 349, 417, 418, 744, 838, 854, 917, 954, 1022, 1349, 1366, 1369], "smooth": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "snappi": [36, 47, 51, 349, 954], "snapshot": 164, "snapshot_id": 164, "snowflak": [150, 151], "snowflake_format": 195, "snowi": [707, 708], "so": [1, 41, 151, 153, 162, 184, 202, 237, 239, 255, 273, 281, 349, 375, 385, 440, 507, 523, 554, 577, 586, 647, 707, 708, 709, 716, 717, 718, 732, 838, 865, 878, 884, 903, 954, 960, 990, 1171, 1289, 1290, 1291, 1298, 1299, 1300], "softwar": [37, 147, 349], "solut": [39, 349], "solv": [95, 143], "some": [15, 31, 41, 47, 51, 55, 64, 97, 133, 148, 149, 150, 162, 206, 222, 273, 284, 307, 349, 353, 707, 708, 834, 899, 954, 1142, 1289, 1290, 1349, 1380], "some_account": [693, 1275], "some_t": 1379, "someth": [585, 838], "sometim": [782, 837], "somewher": [693, 1275], "sort": [54, 56, 57, 209, 239, 254, 265, 272, 273, 281, 290, 312, 319, 332, 343, 349, 374, 417, 418, 494, 503, 586, 627, 647, 670, 680, 743, 744, 749, 751, 761, 777, 780, 800, 838, 854, 870, 878, 883, 893, 896, 897, 903, 908, 910, 917, 934, 945, 954, 960, 979, 1022, 1110, 1149, 1251, 1334, 1335, 1338, 1349, 1365, 1378, 1380], "sort_bi": 838, "sort_column": [273, 349], "sorted": [254, 349, 883, 954], "sorted_asc": [1121, 1349], "sorted_desc": [1121, 1349], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 838, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 954, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1349, 1354, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1377], "source_ac": 137, "source_actor_id": 137, "source_alia": [40, 349], "source_cha": 137, "source_channel_id": 137, "south": 74, "space": [21, 239, 349, 477, 796, 797, 878, 954, 960, 1090], "spam": [261, 349, 693, 1275], "span": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "spanner": [349, 353], "spark": [47, 349], "sparklin": [41, 349], "speak": [677, 838, 1260, 1349], "spearman": 768, "speci": [349, 352], "special": [39, 54, 148, 149, 151, 162, 311, 326, 349, 648, 693, 707, 708, 838, 928, 954, 1202, 1235, 1275, 1289, 1290, 1349], "specif": [1, 31, 40, 41, 43, 44, 49, 100, 130, 132, 134, 136, 144, 148, 151, 152, 153, 157, 158, 159, 163, 164, 166, 210, 251, 253, 301, 306, 349, 474, 477, 721, 723, 724, 728, 749, 838, 856, 882, 954, 959, 960, 1087, 1090, 1303, 1305, 1306, 1310, 1324, 1328, 1338, 1349, 1365, 1377, 1379, 1380], "specifi": [10, 38, 39, 40, 41, 47, 48, 56, 101, 104, 107, 122, 125, 148, 153, 159, 160, 162, 167, 179, 188, 190, 191, 192, 209, 210, 225, 226, 229, 234, 238, 239, 253, 254, 271, 273, 281, 282, 284, 287, 288, 292, 295, 306, 312, 315, 323, 324, 328, 349, 418, 427, 470, 477, 493, 495, 496, 497, 502, 627, 640, 642, 649, 651, 653, 655, 657, 660, 662, 664, 671, 680, 736, 744, 761, 764, 765, 766, 767, 777, 778, 780, 781, 782, 784, 816, 820, 825, 826, 834, 838, 854, 856, 871, 873, 877, 878, 882, 883, 903, 905, 906, 909, 912, 917, 919, 924, 925, 930, 954, 960, 1036, 1083, 1090, 1108, 1109, 1111, 1112, 1118, 1230, 1253, 1328, 1349, 1365, 1372, 1379], "speed": [51, 290, 349, 586, 838, 908, 954, 958, 1380], "speedup": [56, 167, 251, 258, 349, 586, 838, 1202, 1349], "split": [1, 41, 47, 52, 53, 54, 57, 252, 349, 691, 713, 714, 1273, 1295, 1296, 1372], "split_by_column_dtyp": 59, "split_inclus": 712, "split_part": 1370, "splitfram": [1, 57], "spreadsheet": [37, 147, 153, 159, 273, 349], "spring": [707, 708], "sql": [0, 39, 119, 120, 128, 150, 151, 253, 292, 349, 393, 570, 671, 795, 818, 838, 850, 909, 954, 998, 1187, 1253, 1349, 1358, 1359, 1361, 1363, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1378, 1379], "sql_expr": 1377, "sqlalchemi": [39, 150, 170, 349], "sqlcontext": [296, 349, 817, 913, 954, 1376], "sqldw_format": 195, "sqlite": [39, 150, 349], "sqrt": [586, 677, 736, 838, 1202, 1260, 1349, 1370], "sqrt_x": 1371, "squar": [1, 60, 335, 535, 643, 681, 838, 937, 1152, 1231, 1263, 1349, 1371], "st": [33, 1380], "stabil": [240, 349, 515, 838, 1130, 1349], "stabl": [160, 204, 215, 217, 218, 240, 285, 289, 296, 349, 440, 515, 582, 600, 742, 838, 864, 865, 892, 907, 912, 913, 954, 962, 1130, 1332, 1349], "stack": [64, 243, 321, 349, 352, 1359], "stai": [585, 673, 838], "standalon": [176, 960], "standard": [7, 11, 41, 150, 297, 306, 311, 349, 458, 495, 660, 661, 677, 682, 701, 704, 819, 834, 838, 914, 954, 1067, 1106, 1111, 1214, 1260, 1264, 1283, 1286, 1349, 1366, 1380], "standardis": [41, 349], "start": [41, 48, 49, 50, 51, 54, 146, 148, 149, 151, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 184, 233, 238, 239, 256, 294, 319, 325, 326, 349, 401, 404, 407, 420, 424, 445, 453, 463, 468, 472, 485, 486, 497, 510, 553, 571, 646, 650, 652, 654, 656, 658, 661, 663, 665, 678, 684, 689, 693, 697, 706, 711, 715, 716, 718, 719, 722, 731, 758, 763, 772, 776, 777, 778, 779, 780, 781, 784, 786, 792, 793, 796, 797, 825, 826, 828, 834, 838, 876, 877, 878, 897, 911, 927, 928, 954, 960, 1012, 1024, 1029, 1054, 1056, 1059, 1062, 1064, 1065, 1071, 1073, 1075, 1076, 1079, 1081, 1085, 1089, 1098, 1099, 1124, 1170, 1188, 1234, 1261, 1271, 1275, 1279, 1288, 1293, 1297, 1298, 1300, 1304, 1313, 1349, 1365, 1372, 1380], "start_bi": [239, 349, 878, 954], "startbi": [239, 349, 878, 954], "starts_a": 1372, "starts_with": [57, 273, 349, 353, 401, 404, 420, 593, 684, 689, 817, 913, 954, 960, 1024, 1271, 1370], "starts_with_expr": 407, "starts_with_lit": 407, "startup": [306, 349], "stat": [535, 677, 838, 1152, 1260, 1349], "state": [4, 5, 112, 772, 850, 1377], "statement": [627, 828, 838, 1363, 1378], "static": [93, 937], "statist": [47, 51, 148, 149, 160, 165, 167, 217, 349, 495, 496, 535, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 677, 838, 864, 954, 1049, 1111, 1112, 1152, 1241, 1260, 1349], "std": [217, 349, 660, 661, 838, 864, 954, 1049, 1242, 1349], "std_dev": [41, 349], "stddev": 1370, "stddev_samp": 1366, "stdev": [41, 349, 1366], "stdev_samp": 1366, "stdout": [202, 237, 349, 602], "step": [317, 349, 507, 758, 792, 793, 838], "steve": [265, 349, 893, 954], "still": [150, 151], "stock": [349, 352], "stop": [143, 146, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 650, 652, 654, 656, 658, 661, 663, 665, 838, 1056, 1059, 1064, 1065, 1071, 1073, 1075, 1079, 1085, 1089], "storag": [38, 40, 43, 47, 48, 49, 50, 51, 148, 152, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 192, 349, 954], "storage_loc": [193, 196, 197], "storage_opt": [38, 40, 43, 47, 48, 49, 50, 51, 148, 152, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 192, 349, 954], "store": [40, 164, 227, 251, 283, 349, 421, 645, 838, 1025, 1115, 1233, 1349], "store_id": [627, 838], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 71, 74, 75, 98, 129, 130, 131, 132, 133, 134, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 175, 176, 178, 181, 182, 183, 187, 188, 190, 191, 192, 193, 194, 196, 197, 202, 209, 210, 214, 217, 218, 219, 220, 221, 222, 223, 225, 226, 230, 231, 232, 234, 235, 237, 238, 239, 241, 243, 246, 248, 249, 251, 253, 254, 255, 257, 259, 261, 263, 264, 265, 266, 269, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 285, 289, 290, 294, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 358, 359, 360, 381, 386, 398, 401, 402, 403, 404, 407, 408, 413, 416, 418, 420, 421, 424, 432, 438, 440, 442, 450, 467, 471, 472, 474, 477, 485, 494, 497, 503, 505, 508, 509, 512, 520, 523, 544, 545, 554, 555, 556, 571, 575, 577, 586, 597, 599, 600, 601, 602, 604, 611, 612, 613, 614, 615, 616, 617, 618, 624, 627, 631, 634, 640, 641, 642, 644, 646, 647, 650, 652, 654, 656, 658, 661, 663, 665, 672, 679, 680, 732, 733, 734, 735, 744, 749, 751, 752, 753, 754, 755, 756, 757, 759, 760, 766, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 834, 838, 845, 854, 856, 859, 860, 862, 864, 865, 866, 867, 868, 870, 871, 874, 877, 878, 880, 882, 883, 884, 892, 893, 896, 897, 900, 901, 902, 903, 907, 908, 910, 911, 912, 913, 917, 918, 919, 920, 921, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 959, 960, 966, 986, 991, 1003, 1008, 1023, 1024, 1025, 1029, 1048, 1049, 1059, 1080, 1084, 1085, 1087, 1090, 1098, 1110, 1118, 1121, 1161, 1162, 1173, 1194, 1210, 1211, 1212, 1223, 1228, 1229, 1230, 1250, 1314, 1316, 1317, 1325, 1326, 1327, 1328, 1338, 1349, 1355, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1369, 1372, 1373, 1377, 1378, 1380], "str_date": 1372, "str_timestamp": 1372, "str_valu": [52, 141], "strategi": [38, 48, 56, 64, 148, 167, 175, 176, 177, 178, 179, 180, 182, 229, 239, 253, 254, 268, 318, 319, 349, 433, 436, 502, 577, 586, 838, 851, 873, 878, 882, 883, 899, 921, 954, 1118, 1194, 1349], "stream": [10, 15, 43, 44, 48, 49, 50, 51, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 238, 253, 314, 349, 585, 838, 859, 870, 877, 882, 888, 892, 897, 910, 912, 918, 954], "streamabl": [888, 892, 920, 954], "streaming_t": 199, "strftime": [100, 477, 1090, 1370, 1372], "strict": [132, 133, 136, 144, 210, 219, 278, 349, 402, 419, 477, 684, 687, 696, 721, 723, 724, 726, 728, 838, 856, 866, 901, 954, 960, 1007, 1023, 1090, 1266, 1269, 1278, 1303, 1305, 1306, 1308, 1310, 1349], "strictli": [38, 48, 55, 97, 254, 349, 883, 954], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 48, 55, 68, 71, 74, 87, 94, 96, 97, 98, 100, 106, 124, 133, 137, 144, 148, 149, 150, 151, 162, 171, 172, 173, 174, 175, 182, 186, 209, 210, 213, 218, 223, 225, 232, 234, 237, 238, 239, 254, 271, 273, 281, 284, 286, 287, 288, 289, 295, 305, 306, 312, 313, 317, 319, 323, 324, 328, 349, 358, 381, 386, 404, 418, 420, 422, 423, 424, 427, 440, 467, 472, 474, 477, 485, 494, 497, 505, 508, 523, 556, 600, 602, 627, 631, 641, 642, 647, 650, 652, 654, 656, 658, 661, 663, 665, 680, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 736, 744, 752, 754, 756, 761, 764, 765, 766, 767, 775, 777, 778, 780, 781, 787, 802, 804, 807, 816, 820, 822, 825, 826, 828, 834, 838, 850, 854, 856, 861, 865, 869, 870, 877, 878, 883, 903, 904, 905, 906, 907, 912, 917, 924, 925, 930, 954, 959, 960, 991, 1007, 1008, 1009, 1024, 1026, 1027, 1028, 1029, 1080, 1085, 1087, 1090, 1098, 1110, 1137, 1173, 1229, 1230, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1316, 1327, 1328, 1349, 1358, 1359, 1367, 1370, 1373, 1376, 1380], "string_to_arrai": 1370, "stringcach": [96, 97, 253, 349, 850, 1026, 1030], "stringio": [157, 158, 508, 838], "strings_hex": 688, "strip": [29, 716, 717, 718, 719, 720, 1298, 1299, 1300, 1372], "strip_chars_end": [718, 720], "strip_chars_start": [717, 719], "strip_prefix": [718, 720], "strip_suffix": [717, 719], "strongli": [41, 184, 258, 282, 335, 349, 586, 838, 1202, 1349], "strpo": 1370, "strptime": [281, 349, 471, 647, 838, 903, 954, 1084, 1370], "struct": [8, 75, 125, 137, 269, 287, 310, 315, 323, 349, 398, 438, 517, 577, 585, 586, 612, 614, 616, 634, 645, 646, 694, 700, 713, 714, 742, 749, 772, 773, 775, 799, 838, 905, 919, 924, 937, 954, 1003, 1048, 1194, 1202, 1223, 1233, 1276, 1282, 1295, 1296, 1330, 1332, 1349], "struct_col": [732, 734, 735], "struct_seri": 937, "structarrai": [225, 349, 1108, 1349], "structfieldnotfounderror": 734, "structur": [41, 43, 44, 49, 106, 109, 123, 144, 227, 272, 284, 301, 307, 349, 631, 838, 896, 954, 1115, 1324, 1349, 1377], "student": [273, 349], "style": [7, 21, 41, 52, 150, 273, 349], "sub": [335, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 395, 396, 400, 556, 563, 838, 984, 985, 986, 989, 990, 991, 992, 993, 994, 995, 996, 1000, 1001, 1005, 1173, 1180], "subarrai": [377, 378, 982, 983], "subclass": [1, 349], "subexpress": [62, 63, 129, 859, 860, 870, 897, 910, 954], "subinterv": 1366, "subject": [47, 273, 349], "sublist": [385, 542, 543, 545, 547, 551, 552, 553, 554, 555, 556, 557, 566, 571, 575, 577, 990, 1142, 1159, 1160, 1162, 1164, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1183, 1188, 1192, 1194, 1349], "subplan": [62, 63, 129, 859, 860, 870, 897, 910, 954], "subsequ": [41, 160, 167, 276, 308, 349, 577, 817, 828, 870, 954, 1331, 1349, 1364], "subset": [221, 222, 269, 314, 349, 867, 868, 918, 954], "substr": [401, 404, 407, 420, 424, 684, 689, 696, 707, 708, 711, 712, 713, 714, 715, 960, 1006, 1009, 1012, 1024, 1029, 1266, 1271, 1278, 1289, 1290, 1293, 1294, 1295, 1296, 1297, 1370], "subtl": [41, 349], "subtli": [507, 838], "subtract": [535, 737, 838, 1152, 1349], "succe": [148, 149, 162], "success": [686, 693, 1268, 1275], "successfulli": [859, 870, 897, 910, 954], "suffer": 54, "suffix": [253, 254, 255, 287, 323, 328, 349, 360, 404, 418, 420, 530, 531, 532, 533, 591, 611, 613, 616, 617, 618, 644, 689, 717, 720, 744, 838, 882, 883, 884, 905, 924, 926, 930, 954, 960, 1009, 1024, 1271, 1302], "suffix_field": [612, 614], "sugar": [318, 349, 641, 642, 709, 753, 755, 757, 769, 771, 774, 784, 789, 790, 791, 801, 803, 805, 806, 808, 810, 811, 816, 819, 821, 823, 827, 829, 838, 921, 954, 1229, 1230, 1263, 1291, 1349], "suggest": [349, 352, 1349, 1354], "suitabl": [56, 64, 150, 176, 258, 349, 586, 669, 838, 1202, 1249, 1349], "sum": [41, 95, 145, 225, 232, 238, 239, 249, 273, 281, 299, 328, 349, 435, 436, 440, 490, 503, 577, 586, 597, 599, 600, 601, 602, 603, 641, 642, 647, 662, 663, 751, 753, 765, 772, 774, 775, 786, 800, 812, 822, 838, 859, 860, 865, 870, 877, 878, 895, 897, 899, 903, 907, 910, 930, 954, 960, 1045, 1046, 1104, 1108, 1243, 1349, 1358, 1365, 1367, 1370, 1377], "sum_": [677, 838, 1260, 1349], "sum_a": [281, 349, 647, 838, 903, 954], "sum_horizont": [56, 349, 821], "summari": [217, 349, 864, 954, 1049, 1349, 1365], "summer": [707, 708], "sun": [349, 352, 721, 1303], "sundai": [239, 349, 445, 474, 477, 487, 763, 878, 954, 1054, 1087, 1090, 1100], "sunni": [707, 708, 1289, 1290], "supercast": [232, 349], "supertyp": [64, 145, 229, 307, 311, 349, 364, 766, 838, 873, 954, 1349], "suppli": [39, 41, 130, 132, 133, 134, 136, 150, 157, 158, 166, 230, 277, 282, 306, 349, 503, 631, 838, 874, 900, 954, 1328, 1349], "support": [1, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 62, 63, 64, 130, 131, 132, 133, 134, 135, 136, 137, 150, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 175, 179, 182, 192, 202, 251, 252, 253, 254, 283, 284, 294, 295, 303, 308, 311, 349, 477, 494, 571, 627, 641, 642, 678, 680, 685, 695, 697, 698, 707, 708, 709, 711, 722, 834, 838, 844, 859, 860, 870, 882, 883, 897, 910, 911, 912, 954, 960, 1090, 1110, 1188, 1229, 1230, 1261, 1267, 1277, 1279, 1280, 1289, 1290, 1291, 1293, 1304, 1331, 1333, 1349, 1353, 1367, 1372, 1373, 1375, 1376, 1377], "supportsinterchang": 131, "suppos": [207, 273, 349, 586, 838, 1202, 1349], "sure": [64, 130, 131, 135, 145, 148, 149, 152, 154, 156, 160, 163, 276, 349, 838], "surreal_query_to_fram": 150, "surrealdb": 150, "surrealql": 150, "suscept": 954, "swap": [901, 954], "swim": 767, "switch": [62, 63, 446, 859, 860, 870, 897, 910, 954, 1055], "sy": 202, "sydnei": 779, "symbol": [37, 38, 48, 349, 838, 954], "symmetr": [568, 960, 1185], "symmetri": [862, 869, 904, 923, 954], "sync": [48, 49, 50, 51, 954], "sync_on_clos": [48, 49, 50, 51, 954], "synchron": [150, 948], "synconclosemethod": [48, 49, 50, 51, 954], "syntact": [318, 349, 641, 642, 709, 753, 755, 757, 769, 771, 774, 784, 789, 790, 791, 801, 803, 805, 806, 808, 810, 811, 816, 819, 821, 823, 827, 829, 838, 921, 954, 1229, 1230, 1263, 1291, 1349], "syntax": [41, 120, 230, 258, 269, 277, 349, 601, 684, 692, 693, 696, 707, 708, 792, 793, 834, 874, 900, 910, 954, 1266, 1274, 1275, 1278, 1289, 1290, 1349, 1373, 1375], "system": [37, 148, 149, 349, 450, 859, 870, 897, 910, 954, 1059], "t": [37, 38, 40, 48, 64, 95, 143, 147, 148, 153, 159, 162, 239, 254, 258, 272, 314, 317, 349, 437, 446, 454, 471, 477, 490, 493, 495, 496, 549, 586, 627, 631, 692, 696, 707, 708, 718, 721, 724, 729, 828, 838, 878, 883, 896, 918, 954, 960, 1047, 1084, 1090, 1104, 1109, 1111, 1112, 1166, 1202, 1274, 1278, 1289, 1290, 1299, 1300, 1303, 1306, 1311, 1349, 1361, 1362, 1372], "t_": [315, 349, 494, 838, 919, 954, 1110, 1349], "t_0": [281, 349, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 838, 903, 954, 1110, 1349], "t_1": [281, 349, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 838, 903, 954, 1110, 1349], "t_a": [315, 349, 919, 954], "t_b": [315, 349, 919, 954], "t_c": [315, 349, 919, 954], "t_d": [315, 349, 919, 954], "t_i": [494, 838, 1110, 1349], "t_id": [255, 349, 884, 954], "t_n": [281, 349, 647, 650, 652, 654, 656, 658, 661, 663, 665, 838, 903, 954], "t_struct": [315, 349, 919, 954], "tab_spann": [349, 353], "tab_stub": [349, 353], "tab_styl": [349, 353], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 130, 137, 144, 152, 153, 159, 163, 164, 188, 191, 192, 194, 197, 198, 253, 255, 273, 296, 301, 308, 317, 318, 349, 353, 817, 850, 882, 884, 913, 921, 954, 1359, 1360, 1361, 1362, 1364, 1365, 1376, 1377], "table_id": 197, "table_nam": [39, 41, 153, 188, 192, 296, 349, 913, 954], "table_path": [40, 152, 163, 164, 349], "table_styl": [41, 349], "table_typ": 197, "tableinfo": [188, 191, 200], "tablemerg": [40, 349], "tablenotfounderror": [40, 349], "tables_scale_100": [139, 149], "tabletyp": [197, 200], "tail": [237, 241, 349, 364, 677, 838, 954, 1131, 1260, 1349], "take": [41, 95, 144, 153, 159, 178, 179, 202, 232, 233, 239, 262, 265, 272, 273, 278, 349, 374, 445, 467, 503, 509, 510, 552, 553, 585, 612, 614, 616, 680, 761, 763, 783, 785, 794, 838, 876, 878, 893, 899, 901, 954, 979, 1054, 1080, 1123, 1124, 1169, 1170, 1340, 1349, 1367], "taken": [571, 711, 1188, 1293], "talkin": [729, 1311], "tan": [838, 1349, 1370], "tand": 1370, "tangent": [370, 371, 740, 741, 838, 975, 976, 1322, 1323, 1349, 1374], "tanh": [273, 349, 838, 1349], "target": [1, 39, 40, 41, 42, 61, 153, 311, 349, 692, 707, 708, 721, 723, 724, 960, 1274, 1289, 1290, 1303, 1305, 1306, 1372], "target_alia": [40, 349], "target_t": [39, 349], "task": [63, 860, 954], "tau": [493, 494, 838, 1109, 1110, 1349], "tb": [171, 173, 225, 349, 406, 1108, 1349], "tbl": [95, 139, 149, 1379], "tbl0": 1364, "tbl1": [1362, 1364], "tbl2": [1362, 1364], "tbl3": 1362, "tbl4": 1362, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 202], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 217, 349, 864, 954], "tbl_width_char": 782, "td": 477, "td1": 960, "td2": 960, "td3": 960, "tdf": [272, 349], "technic": 834, "tell": [685, 709, 1267, 1291], "tempor": [100, 210, 239, 251, 281, 283, 284, 303, 349, 427, 477, 523, 647, 650, 652, 654, 656, 658, 661, 663, 665, 796, 838, 850, 856, 878, 903, 954, 960, 1036, 1090, 1137, 1349, 1370, 1376], "temporalliter": [427, 796, 797, 838, 1036, 1069, 1070, 1349], "temporari": [39, 349], "temporarili": [184, 202, 239, 281, 349, 647, 838, 878, 903, 954], "tenant": 34, "tenant_id": 34, "tend": [171, 173], "tensor": [311, 349, 1333, 1349], "tensordataset": [311, 349], "term": [493, 495, 496, 698, 711, 722, 838, 1109, 1111, 1112, 1280, 1293, 1304, 1349], "termin": [38, 48, 349, 954], "terminologi": 196, "test": [0, 39, 150, 151, 153, 159, 224, 273, 349, 850, 1107, 1349, 1372], "test1": 1364, "test2": 1364, "test3": 1364, "test_1": [273, 349], "test_1_math": [273, 349], "test_1_phys": [273, 349], "test_2": [273, 349], "test_2_math": [273, 349], "test_2_phys": [273, 349], "test_data": 150, "test_df_height": 178, "test_func": 799, "test_lf": [926, 954], "test_miscellan": 1380, "test_numer": 1380, "test_price_calcul": 1380, "test_series_len": 182, "test_tabl": 151, "test_unique_xyz": 176, "testdb": 151, "testing1234": 1364, "text": [147, 150, 195, 422, 423, 690, 698, 702, 703, 704, 707, 708, 710, 711, 722, 818, 899, 954, 1027, 1028, 1280, 1284, 1285, 1292, 1293, 1304, 1364, 1380], "text1": 708, "text2": 708, "textclaus": 150, "texttt": [677, 838, 1260, 1349], "th": [233, 349, 510, 553, 566, 677, 698, 722, 838, 876, 954, 1124, 1170, 1183, 1260, 1280, 1304, 1349, 1372], "than": [41, 48, 49, 50, 51, 54, 103, 126, 134, 136, 148, 149, 150, 153, 159, 162, 168, 211, 238, 251, 253, 254, 258, 271, 282, 283, 285, 317, 335, 349, 422, 507, 508, 511, 513, 523, 537, 565, 584, 585, 586, 602, 634, 646, 668, 677, 698, 702, 705, 706, 714, 722, 731, 768, 800, 838, 877, 882, 883, 937, 954, 1027, 1137, 1182, 1202, 1223, 1234, 1247, 1260, 1280, 1284, 1287, 1288, 1296, 1304, 1313, 1330, 1349, 1380], "the_aws_access_key_id": [40, 152, 163, 164, 349], "the_aws_region": [40, 349], "the_aws_secret_access_kei": [40, 152, 163, 164, 349], "thei": [38, 41, 48, 55, 63, 64, 96, 97, 133, 145, 162, 202, 254, 256, 284, 349, 627, 709, 717, 718, 838, 859, 870, 883, 897, 910, 954, 958, 960, 1291], "them": [63, 130, 132, 133, 134, 136, 150, 151, 153, 157, 158, 159, 160, 162, 165, 166, 167, 202, 226, 227, 239, 254, 265, 273, 281, 311, 319, 349, 386, 494, 523, 556, 619, 620, 627, 647, 766, 777, 778, 780, 781, 825, 826, 838, 860, 871, 878, 883, 893, 903, 954, 960, 991, 1110, 1115, 1173, 1211, 1212, 1349, 1367, 1377], "therebi": [162, 165, 166], "therefor": [54, 148, 154, 158, 160, 225, 349, 586, 828, 838, 1108, 1349], "theta": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 64, 70, 71, 72, 73, 78, 88, 95, 97, 104, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 196, 198, 202, 204, 206, 207, 208, 209, 212, 213, 215, 217, 218, 221, 222, 225, 227, 231, 232, 237, 238, 239, 240, 244, 246, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 261, 263, 264, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 294, 296, 297, 298, 301, 303, 306, 307, 308, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 330, 335, 348, 349, 352, 353, 361, 364, 365, 374, 386, 392, 393, 394, 399, 417, 418, 421, 427, 437, 438, 440, 445, 446, 447, 458, 464, 465, 467, 471, 474, 477, 488, 492, 499, 508, 515, 517, 520, 521, 523, 527, 549, 550, 556, 565, 566, 567, 568, 569, 570, 572, 577, 578, 582, 583, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 604, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 627, 634, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 670, 671, 672, 673, 678, 679, 680, 683, 685, 692, 695, 697, 699, 700, 704, 705, 706, 709, 716, 717, 718, 719, 720, 725, 729, 731, 733, 736, 743, 744, 746, 747, 748, 749, 753, 757, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 785, 786, 788, 790, 791, 794, 795, 796, 797, 800, 803, 805, 808, 810, 816, 819, 823, 827, 828, 829, 834, 838, 850, 853, 854, 855, 858, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 874, 877, 878, 880, 882, 883, 884, 886, 888, 892, 893, 897, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 917, 918, 920, 921, 923, 924, 925, 926, 927, 928, 929, 932, 937, 951, 952, 953, 954, 958, 959, 960, 962, 969, 970, 979, 991, 997, 998, 999, 1004, 1022, 1025, 1030, 1031, 1036, 1037, 1047, 1048, 1054, 1055, 1056, 1058, 1067, 1077, 1078, 1080, 1084, 1087, 1090, 1101, 1103, 1106, 1108, 1114, 1115, 1124, 1126, 1130, 1132, 1142, 1151, 1166, 1167, 1173, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1195, 1200, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1214, 1217, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1261, 1262, 1264, 1265, 1267, 1274, 1277, 1279, 1281, 1282, 1286, 1287, 1288, 1291, 1298, 1299, 1300, 1307, 1311, 1313, 1314, 1316, 1319, 1320, 1324, 1326, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1337, 1338, 1339, 1349, 1354, 1358, 1359, 1360, 1364, 1372, 1375, 1376, 1377, 1378, 1380], "thing": [162, 169], "think": [464, 465, 1077, 1078], "third": [585, 838], "thoma": [265, 349, 893, 954], "those": [5, 31, 41, 148, 153, 230, 277, 284, 308, 318, 349, 507, 637, 692, 800, 838, 900, 921, 954, 960, 1225, 1274, 1331, 1349], "though": [39, 150, 239, 349, 834, 878, 954], "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 48, 63, 139, 148, 149, 151, 184, 185, 295, 349, 549, 586, 680, 761, 838, 860, 912, 954, 999, 1166, 1189, 1262, 1349], "thread_loc": [586, 838], "thread_pool_s": 185, "three": [41, 207, 281, 310, 349, 438, 634, 647, 669, 698, 707, 722, 838, 903, 954, 1003, 1048, 1194, 1223, 1280, 1290, 1304, 1349], "threshold": [287, 349, 905, 954], "through": [150, 834, 960, 1349, 1364], "throughout": 202, "throw": [40, 132, 133, 136, 219, 278, 349, 700, 701, 856, 866, 901, 954, 1282, 1283, 1349], "thu": [41, 227, 349, 352, 768, 958, 1115, 1349], "thursdai": [239, 349, 445, 763, 878, 954, 1054], "ti": [637, 838, 1225, 1349], "time": [13, 38, 40, 43, 47, 48, 49, 50, 51, 54, 61, 62, 63, 71, 73, 113, 152, 158, 160, 162, 163, 165, 166, 167, 178, 179, 182, 192, 217, 227, 239, 254, 255, 281, 319, 349, 381, 417, 418, 446, 447, 449, 450, 451, 454, 455, 464, 465, 467, 470, 471, 472, 474, 476, 477, 485, 488, 494, 544, 545, 577, 646, 647, 650, 652, 654, 656, 658, 661, 663, 665, 673, 721, 724, 728, 742, 743, 744, 766, 767, 777, 778, 779, 780, 781, 782, 788, 796, 825, 826, 838, 859, 860, 864, 878, 883, 884, 897, 903, 954, 960, 986, 1022, 1055, 1056, 1058, 1059, 1063, 1064, 1080, 1083, 1084, 1085, 1087, 1089, 1090, 1098, 1101, 1110, 1115, 1161, 1162, 1234, 1256, 1303, 1306, 1310, 1332, 1334, 1349, 1358, 1364, 1373, 1380], "time_column": [319, 349], "time_format": [38, 48, 349, 954], "time_unit": [71, 73, 447, 449, 455, 476, 488, 724, 779, 780, 781, 782, 788, 959, 960, 1056, 1058, 1064, 1089, 1101, 1306], "time_unit_m": [447, 1056], "time_unit_n": [447, 1056], "time_unit_u": 488, "time_zon": [71, 450, 452, 471, 724, 779, 780, 781, 959, 960, 1055, 1059, 1063, 1084, 1306], "timedelta": [239, 254, 281, 319, 349, 467, 472, 477, 485, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 777, 778, 780, 781, 825, 826, 838, 878, 883, 903, 954, 959, 960, 1068, 1074, 1080, 1085, 1098, 1110, 1211, 1212, 1264, 1339, 1349], "timeout": [63, 860, 954], "timestamp": [137, 152, 163, 239, 349, 471, 472, 485, 788, 878, 954, 1084, 1085, 1098, 1370], "timestamp_m": 476, "timestamp_n": 1089, "timestamp_u": [476, 1089], "timestep": 788, "timeunit": [38, 48, 71, 73, 349, 447, 449, 476, 488, 724, 779, 780, 781, 782, 954, 960, 1056, 1058, 1089, 1101, 1306], "timezon": [71, 152, 163, 452, 960, 1373], "tip": [586, 838], "titl": [41, 349, 352, 1349, 1354, 1358], "titlecas": [729, 1311], "tm": [449, 477, 960, 1373], "to_arrow": [252, 349, 1330, 1349, 1377], "to_batch": [252, 349], "to_dict": [210, 284, 349, 856, 954, 960], "to_dummi": [306, 311, 349, 1349], "to_fram": [421, 455, 472, 476, 485, 721, 959, 1048, 1223, 1248, 1250, 1295, 1296, 1303, 1349, 1354], "to_init_repr": [137, 349, 1349], "to_jax": [311, 349, 1349], "to_list": [137, 281, 349, 1266, 1278, 1349], "to_lowercas": 618, "to_numpi": [306, 311, 349, 585, 838, 1349], "to_panda": [349, 1349], "to_phys": [838, 1030, 1349], "to_python": 959, "to_seri": [57, 234, 349, 721, 762, 813, 1303, 1372], "to_sql": [39, 349], "to_str": [474, 1087], "to_struct": [349, 693], "to_torch": [306, 349, 1349], "to_uppercas": [360, 617, 694, 838], "togeth": 1372, "token": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 164, 165, 166, 167, 187, 192, 349, 954], "tokyo": [137, 960], "tokyo_tz": 960, "toler": [171, 172, 173, 174, 254, 349, 883, 954], "tone": [41, 349], "tonight": [685, 709, 1267, 1291], "too": [15, 273, 349, 405, 627, 838, 954, 1010], "tooltip": [349, 352, 1349, 1354], "toomanyrowsreturnederror": [282, 349], "top": [41, 296, 312, 349, 352, 744, 838, 913, 917, 954, 1349, 1354, 1377], "top_col": [41, 349], "top_k": [209, 349, 417, 418, 744, 838, 854, 954, 1022, 1349], "top_k_bi": [417, 418, 743, 838], "top_row": [41, 349], "tor_id": 137, "torch": [170, 311, 349, 1333, 1349], "torchexporttyp": [311, 349], "total": [41, 225, 330, 349, 478, 479, 480, 481, 482, 483, 484, 538, 558, 838, 932, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1108, 1155, 1175, 1349], "total_gross": 1358, "toward": [330, 538, 558, 838, 932, 1155, 1175, 1349], "tp": [1, 59], "tpu": [306, 349, 1328, 1349], "tr15": [704, 1286], "trace": 74, "traceback": [171, 172, 173, 174, 307, 349, 642, 838, 1230, 1330, 1349], "tracebacktyp": 1377, "track": [152, 163, 164, 258, 349, 577, 1377], "trail": [29, 237, 349, 716, 717, 1298, 1299], "train": [311, 349], "train_lf": [926, 954], "transfer": 151, "transferencod": [402, 403, 687, 688, 1007, 1008, 1269, 1270], "transform": [258, 296, 349, 585, 729, 817, 838, 913, 954, 1311], "transform_dens": [1349, 1354], "transit": [230, 277, 349, 874, 900, 954], "translat": 150, "transpar": [859, 870, 897, 910, 954], "transpos": [273, 349], "travel": [152, 163], "travers": [649, 651, 653, 655, 657, 660, 662, 664, 838, 1236, 1237, 1239, 1242, 1243, 1244, 1349], "treat": [148, 149, 162, 204, 494, 527, 684, 686, 696, 707, 708, 828, 838, 962, 1110, 1142, 1266, 1268, 1278, 1289, 1290, 1349], "tree": [602, 870, 954], "tree_format": [870, 954], "trend": [41, 349], "tri": [258, 349], "triangl": [335, 937], "trigger": [40, 145, 256, 308, 349, 838, 1331, 1349], "trigonometri": [1370, 1376], "trim": [137, 1372], "trim_decimal_zero": 29, "trip": 150, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 54, 62, 63, 64, 95, 129, 130, 131, 132, 133, 135, 136, 137, 139, 144, 145, 148, 149, 150, 152, 153, 154, 156, 159, 160, 162, 163, 165, 167, 168, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 187, 202, 206, 210, 211, 212, 217, 219, 224, 229, 230, 232, 234, 236, 237, 238, 239, 244, 246, 247, 248, 251, 253, 254, 255, 256, 261, 262, 268, 269, 271, 273, 274, 277, 278, 282, 283, 284, 285, 287, 295, 296, 299, 302, 304, 306, 307, 308, 311, 313, 314, 315, 317, 318, 319, 323, 329, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 352, 359, 360, 361, 362, 363, 364, 375, 377, 378, 381, 385, 386, 394, 398, 401, 402, 404, 407, 408, 413, 416, 418, 419, 420, 424, 432, 433, 434, 435, 436, 438, 445, 447, 450, 453, 455, 457, 464, 465, 467, 468, 471, 472, 473, 476, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 495, 496, 503, 509, 511, 512, 513, 514, 517, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 540, 541, 545, 552, 554, 556, 572, 577, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 621, 622, 624, 626, 629, 630, 634, 639, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 672, 673, 677, 679, 680, 683, 684, 685, 686, 687, 689, 695, 696, 697, 699, 700, 701, 707, 708, 712, 713, 715, 721, 723, 724, 726, 728, 732, 734, 735, 744, 746, 749, 752, 753, 754, 755, 756, 758, 761, 762, 763, 764, 768, 770, 777, 780, 786, 792, 796, 797, 800, 804, 810, 813, 816, 817, 820, 822, 825, 828, 829, 838, 856, 857, 858, 859, 860, 864, 866, 870, 873, 874, 877, 878, 882, 883, 884, 886, 888, 892, 897, 900, 901, 905, 910, 912, 913, 918, 919, 920, 921, 924, 929, 931, 933, 935, 938, 939, 940, 941, 942, 943, 944, 953, 954, 959, 960, 967, 968, 980, 982, 983, 986, 990, 991, 999, 1006, 1007, 1009, 1012, 1023, 1024, 1026, 1029, 1031, 1034, 1035, 1048, 1054, 1055, 1056, 1059, 1062, 1063, 1064, 1065, 1066, 1070, 1071, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1104, 1106, 1107, 1109, 1111, 1112, 1119, 1128, 1132, 1134, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1157, 1158, 1162, 1169, 1171, 1173, 1189, 1202, 1208, 1214, 1216, 1219, 1220, 1223, 1226, 1227, 1241, 1260, 1262, 1265, 1266, 1267, 1268, 1269, 1271, 1277, 1278, 1279, 1281, 1282, 1283, 1289, 1290, 1294, 1295, 1297, 1303, 1305, 1306, 1308, 1310, 1325, 1330, 1331, 1338, 1340, 1349, 1354, 1358, 1359, 1361, 1363, 1367, 1369, 1372, 1377, 1380], "truediv": [507, 838], "truncat": [21, 137, 148, 149, 162, 237, 239, 251, 283, 284, 303, 349, 878, 897, 954, 1376], "truncate_nod": [897, 954], "truncate_ragged_lin": [148, 149, 162], "truncate_str": 485, "truncate_td": 485, "trust": [440, 838, 865, 954], "try": [38, 43, 47, 48, 49, 50, 51, 62, 63, 123, 129, 148, 149, 154, 158, 160, 162, 165, 166, 167, 192, 349, 859, 860, 870, 897, 910, 954], "try_cast": 1370, "try_parse_d": [139, 148, 149, 162], "try_parse_hive_d": [160, 165, 167], "ts_local": [471, 1084], "tseri": [464, 465, 1077, 1078], "tstamp": 960, "tstamp_tokyo": 960, "tstamp_utc": 960, "tue": [349, 352], "tuesdai": [239, 349, 878, 954], "tupl": [41, 65, 151, 153, 159, 207, 251, 258, 271, 282, 283, 284, 291, 311, 327, 349, 601, 643, 838, 897, 910, 954, 959, 960, 1231, 1252, 1349], "turn": [8, 48, 49, 50, 51, 62, 63, 129, 148, 149, 162, 253, 254, 349, 859, 860, 870, 882, 883, 888, 897, 954], "twice": [41, 349], "two": [41, 55, 96, 97, 132, 134, 136, 151, 207, 230, 232, 254, 255, 264, 265, 277, 283, 310, 316, 329, 335, 349, 353, 359, 442, 449, 507, 509, 512, 577, 634, 679, 759, 760, 766, 768, 770, 777, 780, 814, 815, 817, 838, 874, 883, 884, 892, 893, 900, 920, 931, 937, 954, 960, 1003, 1051, 1058, 1194, 1223, 1349, 1364, 1365, 1366, 1369, 1378], "two_a": 1377, "tworld": [718, 1298, 1300], "txt": [1, 13, 162, 684, 696, 1278, 1372], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 48, 49, 50, 51, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 129, 130, 132, 133, 134, 135, 136, 138, 148, 149, 150, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 204, 207, 213, 223, 226, 232, 237, 239, 240, 252, 253, 258, 281, 286, 289, 301, 306, 307, 310, 311, 314, 326, 349, 361, 363, 366, 367, 368, 369, 370, 371, 374, 379, 380, 381, 383, 386, 397, 398, 401, 402, 403, 404, 405, 406, 407, 419, 421, 422, 423, 427, 428, 429, 430, 431, 438, 439, 445, 446, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 497, 499, 509, 512, 515, 523, 524, 525, 526, 527, 528, 529, 538, 542, 543, 545, 550, 556, 558, 576, 577, 585, 586, 600, 634, 636, 640, 641, 642, 643, 645, 646, 647, 650, 652, 654, 656, 658, 661, 663, 665, 674, 675, 676, 683, 686, 687, 688, 691, 692, 693, 694, 697, 698, 699, 701, 702, 703, 711, 712, 713, 714, 721, 722, 726, 740, 741, 742, 749, 758, 766, 769, 776, 777, 778, 779, 780, 781, 782, 784, 792, 793, 795, 796, 797, 798, 799, 800, 810, 813, 824, 825, 826, 829, 834, 838, 850, 859, 860, 869, 870, 871, 878, 882, 897, 903, 904, 910, 918, 928, 954, 959, 962, 967, 968, 980, 982, 983, 984, 985, 986, 988, 990, 991, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1023, 1025, 1027, 1028, 1036, 1048, 1049, 1054, 1055, 1057, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1107, 1110, 1114, 1130, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1157, 1158, 1159, 1160, 1162, 1167, 1173, 1175, 1193, 1194, 1216, 1223, 1229, 1230, 1231, 1233, 1234, 1255, 1257, 1265, 1266, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1279, 1280, 1281, 1283, 1284, 1285, 1293, 1294, 1295, 1296, 1303, 1304, 1308, 1329, 1330, 1332, 1340, 1349, 1358, 1365, 1370, 1372, 1376, 1377], "type_coercion": [48, 49, 50, 51, 62, 63, 129, 859, 860, 870, 897, 910, 954], "type_json": 194, "type_nam": 194, "type_text": 194, "typeerror": [40, 349], "typenam": [41, 349], "typic": [133, 150, 167, 258, 349, 454, 674, 838, 960, 1063, 1202, 1257, 1349], "tz": [724, 1306], "tzinfo": [71, 152, 163, 960], "u": [41, 71, 73, 167, 180, 254, 349, 447, 449, 455, 476, 488, 721, 724, 754, 756, 779, 780, 781, 782, 788, 883, 954, 959, 960, 1056, 1058, 1064, 1089, 1101, 1303, 1306, 1362, 1373], "u1": [307, 349], "u16": [162, 1375, 1380], "u32": [13, 150, 208, 210, 216, 270, 325, 326, 330, 334, 340, 342, 349, 359, 365, 372, 373, 374, 375, 376, 379, 380, 382, 391, 406, 422, 423, 431, 432, 517, 519, 538, 542, 543, 546, 558, 563, 609, 625, 637, 645, 646, 650, 652, 654, 656, 658, 661, 663, 665, 669, 686, 696, 697, 702, 703, 704, 742, 747, 749, 753, 757, 761, 762, 769, 771, 792, 795, 808, 838, 853, 856, 863, 895, 927, 928, 932, 936, 942, 944, 954, 960, 979, 980, 981, 984, 985, 987, 996, 1023, 1027, 1028, 1030, 1042, 1132, 1159, 1160, 1163, 1175, 1180, 1225, 1233, 1234, 1249, 1268, 1278, 1279, 1284, 1285, 1332, 1336, 1338, 1349, 1358, 1366, 1367, 1368, 1372, 1377], "u64": [240, 326, 349, 515, 639, 838, 897, 928, 954, 960, 1130, 1227, 1349], "u8": [210, 304, 305, 317, 349, 642, 752, 838, 856, 954, 960, 1230, 1325, 1349, 1380], "udf": [184, 258, 272, 335, 349, 440, 586, 631, 800, 838, 865, 896, 937, 954, 1202, 1349], "ufunc": 103, "uid": 150, "uint": 1380, "uint16": [162, 435, 436, 738, 838, 960, 1045, 1046, 1320, 1330, 1333, 1349], "uint2": 1375, "uint32": [138, 170, 210, 225, 281, 326, 349, 374, 379, 380, 406, 422, 423, 431, 494, 509, 512, 538, 542, 543, 558, 640, 645, 646, 647, 650, 652, 654, 656, 658, 661, 663, 665, 686, 697, 702, 703, 742, 769, 792, 795, 838, 856, 903, 928, 954, 960, 980, 984, 985, 1011, 1023, 1027, 1028, 1108, 1110, 1159, 1160, 1175, 1233, 1234, 1268, 1279, 1284, 1285, 1332, 1333, 1349], "uint4": 1377, "uint64": [138, 240, 281, 326, 349, 379, 380, 494, 515, 542, 543, 639, 647, 650, 652, 654, 656, 658, 661, 663, 665, 838, 903, 928, 954, 960, 984, 985, 1110, 1130, 1159, 1160, 1227, 1333, 1349], "uint8": [150, 210, 305, 306, 307, 317, 349, 435, 436, 642, 738, 752, 838, 856, 954, 959, 960, 1045, 1046, 1230, 1320, 1333, 1349, 1380], "uint8_pair": 1380, "uit": [711, 1293], "uk": [693, 1275], "unabl": [105, 153], "unalias": 592, "unari": [623, 838], "unbias": [495, 496, 838, 1111, 1112, 1349], "unchang": [225, 349, 641, 742, 838, 888, 937, 954, 1108, 1229, 1332, 1349], "uncompress": [36, 43, 44, 47, 49, 51, 154, 165, 349, 954], "undefin": [745, 838], "under": [38, 43, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 96, 97, 158, 160, 162, 165, 166, 167, 190, 191, 192, 273, 296, 349, 830, 831, 833, 834, 839, 840, 843, 845, 846, 847, 913, 954, 1341, 1343, 1345, 1350, 1355, 1356, 1357], "underestim": [225, 349, 1108, 1349], "underli": [1, 55, 70, 71, 73, 88, 97, 102, 112, 130, 132, 133, 134, 136, 150, 151, 153, 157, 158, 159, 160, 166, 175, 178, 182, 226, 227, 251, 252, 283, 301, 307, 349, 402, 447, 448, 449, 453, 456, 457, 458, 459, 460, 461, 462, 463, 466, 468, 469, 471, 473, 477, 486, 487, 488, 489, 639, 666, 684, 687, 696, 838, 871, 954, 960, 1007, 1030, 1056, 1057, 1058, 1062, 1065, 1066, 1067, 1071, 1072, 1073, 1075, 1076, 1079, 1081, 1082, 1084, 1086, 1090, 1099, 1100, 1101, 1102, 1115, 1227, 1245, 1255, 1266, 1269, 1278, 1324, 1330, 1349, 1377], "understood": 800, "undo": [603, 610, 611, 613, 615, 617, 618], "unexpect": [112, 121, 150, 230, 277, 349, 585, 586, 838, 874, 900, 954, 1202, 1349], "unhelpfulli": [171, 173], "unicod": [21, 423, 698, 703, 704, 711, 722, 960, 1028, 1280, 1285, 1286, 1293, 1304, 1372], "unicodeform": [704, 1286], "unifi": [41, 306, 311, 349, 960], "uniform": [41, 349, 517, 634, 838, 1132, 1223, 1349], "unimod": [677, 838, 1260, 1349], "union": [62, 63, 64, 129, 569, 859, 860, 870, 897, 910, 954, 960, 1186, 1376, 1377], "uniqu": [47, 51, 56, 74, 145, 153, 175, 176, 177, 180, 182, 208, 248, 253, 269, 273, 284, 340, 349, 365, 376, 391, 438, 534, 563, 609, 634, 721, 723, 724, 728, 747, 749, 757, 808, 838, 853, 882, 942, 954, 970, 981, 996, 1048, 1150, 1180, 1209, 1223, 1303, 1305, 1306, 1310, 1336, 1338, 1349, 1365, 1367], "unique_column_valu": [273, 349], "unique_count": [838, 1349], "uniquekeepstrategi": [314, 349, 918, 954], "unit": [41, 71, 73, 145, 171, 172, 173, 174, 178, 182, 225, 349, 406, 447, 449, 455, 470, 476, 488, 494, 500, 583, 598, 721, 724, 748, 765, 779, 780, 781, 782, 788, 838, 897, 954, 960, 1011, 1056, 1058, 1064, 1083, 1089, 1101, 1108, 1110, 1116, 1200, 1303, 1306, 1337, 1349, 1380], "uniti": [187, 188, 190, 191, 192, 200, 850], "unity_catalog": 195, "univers": [204, 962], "unix": [70, 71, 455, 788, 1064], "unknown": [577, 692, 798, 1274], "unless": [41, 56, 132, 306, 311, 349, 716, 717, 813, 954, 1298, 1372], "unlik": [144, 239, 318, 349, 878, 921, 954], "unnam": [694, 1276], "unnest": [144, 349, 438, 634, 645, 693, 694, 713, 714, 734, 736, 749, 838, 954, 1003, 1048, 1194, 1223, 1233, 1295, 1296, 1349, 1370, 1376], "unpivot": [264, 349, 892, 954], "unregist": [1360, 1361, 1362, 1377, 1379], "unsaf": [145, 838], "unset": [39, 160, 165, 177, 334, 349, 410, 411, 412, 414, 415, 471, 577, 838, 936, 1015, 1016, 1017, 1019, 1020, 1084, 1349, 1358], "unsign": [89, 90, 91, 92, 639, 838, 960, 1227, 1349], "unsigned_integ": 960, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 127, 140, 141, 142, 143, 144, 150, 152, 158, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 296, 306, 311, 318, 349, 352, 353, 437, 438, 445, 517, 586, 634, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 763, 765, 838, 859, 860, 870, 897, 910, 913, 921, 954, 1031, 1047, 1048, 1054, 1132, 1223, 1235, 1238, 1240, 1241, 1328, 1333, 1349, 1354], "unstack": 349, "unstackdirect": [317, 349], "unsuit": 128, "unsupport": [40, 349], "until": [48, 49, 50, 51, 95, 96, 239, 256, 349, 705, 706, 731, 878, 954, 1287, 1288, 1313], "up": [11, 41, 87, 151, 251, 254, 273, 283, 284, 290, 303, 349, 426, 427, 586, 698, 707, 708, 722, 838, 882, 883, 888, 908, 954, 960, 1033, 1280, 1289, 1290, 1304, 1349], "upcast": [364, 838], "upcast_integer_typ": [1, 59], "updat": [40, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 202, 217, 349, 864, 954], "updated_at": [193, 196, 197], "updated_bi": [193, 196, 197], "upgrad": 108, "upheld": [888, 954], "upon": 149, "upper": [148, 149, 150, 225, 239, 349, 427, 517, 523, 577, 612, 748, 758, 777, 778, 780, 781, 796, 797, 825, 826, 838, 878, 954, 1036, 1108, 1132, 1137, 1200, 1337, 1349, 1367, 1370], "upper_bound": [239, 349, 427, 523, 577, 838, 878, 954, 1036, 1137, 1200, 1349], "uppercas": [618, 730, 1312, 1372], "upsampl": [239, 349, 878, 954], "urandom": [406, 1011], "uri": [39, 40, 150, 151, 152, 163, 164, 349], "url": [150, 151, 160, 165, 167, 187, 692, 694, 1274, 1276], "urllib": 151, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 63, 64, 65, 71, 87, 96, 97, 100, 104, 127, 131, 133, 134, 136, 138, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 187, 208, 209, 210, 213, 217, 219, 221, 222, 228, 229, 230, 232, 238, 239, 246, 248, 250, 251, 252, 254, 258, 264, 268, 269, 271, 272, 273, 277, 281, 282, 283, 284, 285, 287, 288, 290, 295, 296, 297, 301, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 328, 335, 349, 352, 359, 361, 363, 365, 374, 375, 398, 402, 403, 405, 418, 420, 422, 423, 424, 427, 437, 440, 443, 444, 452, 470, 471, 472, 474, 477, 485, 488, 490, 493, 494, 495, 496, 497, 501, 502, 503, 507, 521, 522, 523, 535, 549, 565, 573, 577, 579, 585, 586, 589, 610, 613, 615, 617, 618, 627, 634, 637, 639, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 668, 670, 672, 673, 677, 679, 680, 682, 683, 684, 685, 687, 688, 689, 691, 692, 693, 695, 696, 697, 700, 701, 702, 703, 704, 707, 708, 709, 711, 713, 715, 717, 718, 719, 720, 721, 723, 724, 728, 731, 732, 736, 744, 750, 751, 753, 754, 755, 756, 757, 760, 761, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 788, 792, 793, 795, 796, 798, 800, 801, 802, 804, 806, 807, 810, 813, 814, 815, 816, 817, 819, 820, 821, 822, 825, 826, 827, 828, 829, 834, 837, 838, 849, 850, 853, 854, 855, 856, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 877, 878, 883, 886, 892, 897, 900, 903, 904, 905, 906, 908, 910, 912, 913, 914, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 937, 954, 958, 959, 960, 967, 968, 970, 999, 1003, 1007, 1008, 1010, 1027, 1028, 1031, 1047, 1049, 1052, 1053, 1061, 1069, 1070, 1083, 1084, 1085, 1087, 1090, 1098, 1101, 1104, 1109, 1110, 1111, 1112, 1117, 1118, 1123, 1129, 1135, 1136, 1137, 1152, 1166, 1182, 1189, 1194, 1202, 1223, 1225, 1227, 1229, 1231, 1233, 1234, 1235, 1247, 1248, 1250, 1251, 1254, 1260, 1262, 1264, 1265, 1266, 1267, 1269, 1270, 1273, 1274, 1275, 1277, 1278, 1279, 1284, 1285, 1286, 1289, 1290, 1291, 1293, 1295, 1303, 1305, 1306, 1310, 1313, 1324, 1325, 1327, 1330, 1331, 1339, 1349, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1372, 1373, 1377, 1379, 1380], "usag": [178, 182, 293, 349, 960, 1255, 1349], "usd": [237, 349, 1380], "use_abs_path": 145, "use_pyarrow": [47, 51, 148, 152, 154, 156, 160, 163, 307, 349, 954, 1330, 1349], "use_pyarrow_extension_arrai": [308, 349, 1331, 1349], "use_pyarrow_write_to_dataset": [47, 349], "use_statist": [160, 167], "user": [39, 143, 145, 150, 151, 204, 258, 272, 335, 349, 585, 586, 631, 670, 800, 838, 896, 937, 954, 958, 962, 1202, 1251, 1349], "user_conn": 150, "usernam": [148, 151, 154, 156], "userwarn": 1, "usr": 150, "usual": [104, 151, 202, 311, 349, 446, 1055], "utc": [152, 163, 446, 450, 452, 454, 471, 721, 724, 959, 960, 1055, 1059, 1063, 1084, 1303, 1306], "utc_tz": 960, "utf": [38, 48, 86, 349, 954], "utf8": [21, 148, 149, 162, 698, 711, 722, 1280, 1293, 1304], "utf8_borders_onli": 21, "utf8_ful": [21, 56, 137], "utf8_full_condens": [7, 21, 137], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [311, 349, 788, 954], "uvloop": 150, "uvw": [693, 1275], "v": [8, 9, 10, 47, 225, 349, 669, 754, 756, 838, 1249, 1349, 1361, 1362], "v1": 33, "v2": [8, 10, 154, 165], "val": [41, 280, 349, 586, 631, 742, 828, 838, 902, 954], "valid": [38, 41, 48, 71, 95, 143, 148, 150, 154, 156, 160, 162, 182, 202, 219, 225, 253, 254, 278, 349, 437, 684, 686, 692, 693, 694, 696, 701, 707, 708, 828, 838, 866, 882, 883, 901, 929, 954, 960, 1047, 1108, 1266, 1268, 1274, 1275, 1276, 1278, 1283, 1289, 1290, 1349, 1358, 1359], "validate_output_schema": [888, 954], "validate_schema": [95, 143], "vals_phys": [742, 838], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 48, 51, 52, 54, 55, 56, 64, 65, 68, 74, 75, 83, 84, 93, 97, 106, 132, 133, 135, 136, 141, 148, 149, 150, 151, 160, 162, 165, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 202, 206, 208, 209, 210, 217, 221, 222, 224, 227, 228, 229, 230, 234, 237, 239, 240, 241, 245, 249, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 269, 271, 273, 274, 275, 277, 278, 281, 282, 283, 284, 285, 292, 295, 297, 298, 299, 300, 302, 303, 307, 308, 312, 313, 316, 317, 318, 319, 320, 327, 330, 331, 333, 336, 337, 339, 340, 349, 352, 353, 357, 358, 359, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 436, 437, 438, 441, 443, 444, 449, 453, 463, 468, 477, 486, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 540, 541, 542, 543, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 570, 572, 573, 574, 575, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 594, 605, 606, 607, 608, 609, 619, 620, 621, 622, 625, 627, 628, 631, 632, 634, 635, 637, 640, 641, 642, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 674, 675, 676, 677, 679, 680, 681, 683, 684, 686, 687, 688, 689, 690, 692, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 722, 731, 733, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 753, 754, 755, 756, 757, 761, 764, 766, 767, 769, 771, 772, 773, 774, 775, 785, 786, 791, 792, 793, 794, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 821, 822, 828, 838, 853, 854, 864, 867, 868, 872, 873, 874, 878, 880, 881, 882, 883, 889, 890, 891, 892, 894, 895, 898, 899, 900, 901, 903, 909, 912, 914, 915, 917, 920, 921, 922, 932, 933, 935, 938, 939, 941, 942, 954, 960, 965, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 987, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1023, 1024, 1027, 1028, 1029, 1033, 1036, 1038, 1039, 1040, 1042, 1047, 1048, 1049, 1050, 1052, 1053, 1058, 1062, 1076, 1081, 1090, 1099, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1115, 1116, 1117, 1118, 1122, 1123, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164, 1165, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1187, 1189, 1190, 1191, 1192, 1195, 1196, 1202, 1203, 1204, 1206, 1207, 1209, 1211, 1212, 1214, 1215, 1217, 1218, 1222, 1223, 1224, 1225, 1229, 1230, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1253, 1257, 1258, 1259, 1260, 1262, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1304, 1313, 1316, 1320, 1321, 1322, 1323, 1330, 1331, 1332, 1336, 1338, 1340, 1349, 1358, 1363, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1375, 1377, 1379, 1380], "value1": [680, 838], "value2": [680, 838], "value_a": 1377, "value_b": 1377, "value_count": [747, 838, 1349], "value_cum_sum": [436, 838], "value_cum_sum_all_fil": [436, 838], "value_nam": [264, 316, 349, 892, 920, 954], "value_var": [264, 316, 349, 892, 920, 954], "valueerror": [10, 16, 21], "valueexcept": 798, "var": [41, 183, 349, 664, 665, 838, 954, 1349, 1366], "var_samp": 1366, "vari": [153, 159, 446, 1055, 1380], "variabl": [31, 38, 43, 47, 48, 49, 50, 51, 62, 63, 83, 158, 160, 162, 165, 166, 167, 181, 184, 192, 264, 304, 316, 349, 859, 860, 870, 892, 897, 910, 920, 954, 1325, 1349, 1359, 1361, 1377], "variable_nam": [264, 316, 349, 892, 920, 954], "variad": 150, "varianc": [320, 349, 496, 535, 664, 665, 750, 827, 838, 922, 954, 1112, 1152, 1244, 1339, 1349, 1370], "variou": [150, 207, 213, 349, 838, 861, 954, 959, 960, 1349], "vector": [649, 651, 653, 655, 657, 660, 662, 664, 838, 1236, 1237, 1239, 1242, 1243, 1244, 1349], "vector_index_format": 195, "vectoris": [464, 465, 1077, 1078], "vein": 202, "verbos": [30, 171, 173, 202, 693, 1275], "veri": [150, 251, 313, 349, 586, 838, 937, 1371], "verifi": [254, 349, 883, 954], "versicolor": [349, 352], "version": [39, 40, 54, 61, 65, 131, 148, 149, 152, 153, 163, 170, 175, 176, 177, 178, 182, 185, 192, 206, 208, 218, 240, 253, 264, 289, 296, 306, 307, 311, 325, 330, 349, 352, 440, 452, 464, 465, 477, 488, 508, 515, 593, 594, 600, 604, 641, 683, 691, 736, 751, 760, 768, 812, 817, 838, 853, 865, 870, 882, 892, 899, 907, 913, 926, 927, 932, 954, 960, 1061, 1069, 1070, 1077, 1078, 1090, 1101, 1129, 1130, 1229, 1265, 1273, 1328, 1330, 1333, 1349, 1354], "versu": [217, 349, 864, 954], "vertic": [64, 227, 317, 321, 349, 683, 699, 1265, 1281], "vertical_relax": 64, "via": [31, 148, 149, 150, 154, 158, 160, 162, 165, 166, 167, 205, 207, 218, 251, 283, 349, 440, 586, 694, 838, 865, 899, 954, 963, 1276], "view": [199, 586, 838], "virtual": 145, "visibl": [18, 225, 349, 1108, 1349], "visit": [437, 838, 1047, 1349], "visual": [246, 248, 349, 601, 910, 954], "volk": 144, "vote": [692, 694, 1274, 1276], "vowel": [707, 708, 1289, 1290], "vstack": [64, 227, 349], "w": [41, 150, 239, 284, 349, 686, 690, 692, 694, 754, 756, 878, 954, 960, 1268, 1272, 1274, 1276, 1299, 1361, 1362, 1365], "w_i": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "wa": [39, 61, 104, 153, 218, 306, 307, 349, 352, 440, 642, 709, 782, 838, 865, 954, 960, 1230, 1291, 1330, 1349, 1354, 1372], "wai": [96, 97, 130, 132, 133, 134, 136, 157, 158, 166, 238, 252, 272, 295, 328, 349, 472, 631, 680, 692, 769, 834, 838, 862, 869, 877, 896, 904, 912, 923, 930, 937, 954, 958, 1085, 1274], "wait": [48, 49, 50, 51, 954], "walk": 767, "want": [63, 133, 135, 148, 153, 154, 158, 160, 162, 202, 227, 258, 269, 281, 296, 349, 422, 445, 503, 585, 586, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 673, 685, 702, 707, 708, 709, 763, 772, 777, 780, 786, 810, 813, 829, 838, 860, 913, 929, 954, 960, 1027, 1054, 1115, 1202, 1267, 1284, 1289, 1290, 1291, 1349, 1364], "warehous": 151, "warn": [99, 100, 103, 104, 107, 114, 116, 117, 127, 627, 796, 797, 838, 1349], "watermark": [47, 349], "wb": [41, 349], "we": [47, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 207, 217, 218, 239, 254, 273, 281, 319, 349, 352, 440, 467, 472, 485, 517, 549, 577, 585, 586, 647, 650, 652, 654, 656, 658, 661, 663, 665, 694, 707, 708, 726, 776, 777, 778, 779, 780, 781, 798, 825, 826, 828, 838, 864, 865, 874, 878, 883, 888, 900, 903, 954, 1080, 1085, 1098, 1132, 1166, 1202, 1276, 1290, 1308, 1349, 1354, 1361], "weather": [707, 708, 1289, 1290], "wed": [349, 352], "wednesdai": [239, 349, 474, 477, 878, 954, 1087, 1090], "week": [239, 254, 281, 319, 349, 445, 467, 472, 485, 487, 494, 647, 650, 652, 654, 656, 658, 661, 663, 665, 763, 777, 778, 780, 781, 782, 825, 826, 838, 878, 883, 903, 954, 960, 1054, 1080, 1085, 1098, 1100, 1110, 1349, 1373], "week_mask": [445, 763, 1054], "weekdai": [453, 468], "weekend": [445, 763, 1054], "weekli": [239, 349, 485, 878, 954, 1098], "weghorst": [694, 1276], "weight": [144, 493, 494, 495, 496, 648, 649, 651, 653, 655, 657, 660, 662, 664, 677, 838, 1109, 1110, 1111, 1112, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1260, 1349], "wei\u00df": 1372, "well": [41, 148, 149, 150, 162, 349, 523, 817, 838, 1137, 1349, 1377], "were": [202, 641, 642, 834, 838, 1229, 1230, 1349], "west": [74, 255, 349, 884, 954], "what": [52, 207, 269, 349, 445, 585, 685, 709, 838, 1054, 1267, 1291], "whatev": 202, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 55, 71, 87, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 143, 144, 148, 149, 150, 151, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 178, 182, 202, 209, 217, 223, 225, 227, 229, 230, 232, 239, 253, 255, 258, 265, 272, 278, 282, 284, 287, 288, 292, 295, 301, 304, 306, 307, 311, 312, 314, 318, 324, 349, 393, 405, 422, 423, 427, 445, 493, 495, 496, 502, 570, 577, 598, 631, 641, 642, 671, 679, 680, 685, 691, 695, 697, 698, 702, 703, 709, 711, 716, 717, 718, 721, 722, 761, 763, 772, 786, 796, 838, 854, 864, 873, 878, 882, 884, 888, 893, 901, 905, 906, 909, 912, 917, 918, 921, 925, 951, 954, 998, 1010, 1027, 1028, 1036, 1049, 1054, 1108, 1109, 1111, 1112, 1115, 1118, 1142, 1187, 1229, 1230, 1248, 1250, 1253, 1267, 1273, 1277, 1279, 1280, 1284, 1285, 1291, 1293, 1298, 1299, 1300, 1303, 1304, 1324, 1325, 1330, 1349, 1364, 1377], "when_matched_update_al": [40, 349], "when_not_matched_insert_al": [40, 349], "where": [41, 54, 56, 104, 150, 151, 153, 221, 222, 227, 230, 239, 251, 255, 264, 273, 277, 283, 296, 297, 306, 311, 316, 318, 320, 349, 375, 477, 487, 490, 492, 494, 503, 573, 579, 585, 622, 640, 669, 677, 680, 682, 709, 729, 750, 762, 768, 770, 814, 815, 817, 819, 827, 828, 838, 867, 868, 874, 878, 884, 892, 900, 913, 914, 920, 921, 922, 954, 980, 1090, 1100, 1104, 1106, 1110, 1115, 1119, 1214, 1249, 1260, 1264, 1291, 1311, 1339, 1340, 1349, 1358, 1366, 1376, 1377, 1379], "wherea": [148, 162, 281, 349, 420, 424, 472, 485, 619, 620, 647, 838, 903, 954, 1085, 1098, 1211, 1212, 1349], "wherev": [41, 258, 335, 349, 586, 838, 1202, 1349], "whether": [38, 48, 52, 54, 95, 134, 136, 143, 144, 153, 159, 160, 165, 167, 182, 186, 224, 250, 254, 290, 295, 349, 361, 363, 377, 378, 457, 473, 514, 540, 541, 627, 670, 680, 695, 697, 761, 838, 883, 888, 899, 908, 912, 954, 960, 967, 968, 982, 983, 1026, 1031, 1066, 1086, 1107, 1128, 1129, 1157, 1158, 1277, 1279, 1349, 1361, 1377], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 133, 135, 148, 149, 150, 151, 152, 153, 158, 159, 160, 162, 163, 164, 165, 166, 167, 178, 181, 183, 202, 209, 210, 217, 218, 221, 222, 225, 227, 228, 238, 239, 244, 253, 254, 273, 281, 289, 306, 307, 312, 314, 318, 319, 349, 361, 398, 405, 440, 445, 467, 472, 474, 485, 494, 500, 523, 525, 528, 530, 531, 532, 533, 577, 585, 586, 598, 600, 647, 650, 652, 654, 656, 658, 661, 663, 665, 708, 726, 763, 777, 778, 780, 781, 782, 796, 797, 825, 826, 828, 838, 854, 856, 859, 862, 864, 865, 867, 868, 869, 870, 878, 882, 883, 897, 899, 903, 907, 910, 917, 918, 921, 923, 954, 960, 1003, 1010, 1054, 1080, 1085, 1087, 1098, 1108, 1110, 1115, 1116, 1137, 1140, 1143, 1145, 1146, 1147, 1148, 1194, 1250, 1308, 1328, 1330, 1349, 1359, 1365, 1377, 1380], "while": [40, 63, 149, 152, 153, 163, 167, 178, 182, 192, 202, 251, 264, 313, 316, 318, 349, 423, 641, 703, 838, 860, 892, 920, 921, 954, 1028, 1229, 1285, 1349], "white": [41, 349], "whitespac": [137, 716, 717, 718, 1298, 1299, 1300, 1372], "whole": [585, 679, 680, 692, 838, 937, 954, 1274], "whose": [56, 98, 254, 273, 349, 497, 784, 838, 883, 954, 960], "why": [859, 870, 897, 910, 954], "wide": [150, 237, 264, 273, 316, 317, 349, 892, 920, 954], "width": [27, 41, 65, 148, 149, 162, 349, 352, 576, 765, 954, 1193, 1349, 1354], "wiki": 21, "wikipedia": 21, "wildcard": [145, 497, 732, 772, 773, 786, 812, 834, 838], "win_loss": [41, 349], "window": [148, 149, 162, 239, 281, 349, 437, 493, 495, 496, 586, 627, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 766, 814, 815, 838, 878, 903, 954, 1047, 1109, 1111, 1112, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1349], "window_s": [648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 814, 815, 838, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1349], "windowmappingstrategi": [627, 838], "winter": [695, 697, 707, 708, 1277, 1279], "wise": [41, 56, 150, 232, 349, 366, 367, 368, 369, 370, 371, 428, 429, 430, 498, 581, 674, 675, 676, 740, 741, 786, 812, 838, 971, 972, 973, 974, 975, 976, 1038, 1039, 1040, 1113, 1198, 1199, 1257, 1258, 1259, 1322, 1323, 1349], "wish": [209, 312, 349, 417, 418, 743, 744, 838, 854, 917, 954, 1022, 1334, 1349], "with_column": [1, 13, 59, 62, 63, 129, 143, 239, 272, 281, 311, 317, 324, 349, 358, 360, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 391, 392, 393, 394, 398, 402, 403, 405, 406, 419, 420, 422, 423, 424, 427, 432, 433, 434, 435, 436, 438, 441, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 486, 487, 489, 491, 492, 494, 501, 502, 507, 511, 513, 515, 521, 522, 523, 526, 527, 529, 530, 531, 532, 533, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 584, 585, 586, 606, 608, 610, 611, 613, 615, 617, 618, 621, 622, 623, 627, 628, 631, 632, 634, 637, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 671, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 725, 726, 727, 729, 730, 731, 733, 736, 737, 742, 745, 752, 754, 756, 759, 763, 764, 765, 766, 767, 772, 773, 775, 776, 778, 779, 783, 793, 796, 797, 799, 802, 804, 807, 818, 822, 824, 826, 828, 834, 838, 859, 860, 870, 878, 880, 896, 897, 903, 910, 925, 954, 960, 1048, 1084, 1223, 1279, 1349, 1377], "with_column_nam": 162, "with_columns_seq": [349, 954], "with_context": 954, "with_field": [586, 838], "with_replac": [285, 349, 565, 668, 838, 1182, 1247, 1349], "with_row_count": [349, 954], "with_row_index": [1, 281, 325, 349, 650, 652, 654, 656, 658, 661, 663, 665, 838, 927, 954, 1248, 1349, 1354], "within": [47, 65, 75, 83, 171, 172, 173, 174, 193, 194, 196, 238, 239, 240, 254, 281, 319, 349, 515, 637, 680, 838, 878, 883, 903, 954, 1130, 1349, 1377], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 72, 78, 104, 107, 137, 140, 141, 142, 143, 144, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 253, 255, 296, 306, 307, 311, 317, 318, 349, 352, 353, 437, 438, 445, 517, 586, 634, 648, 650, 652, 654, 656, 658, 659, 661, 663, 665, 685, 695, 697, 709, 763, 765, 769, 796, 797, 816, 838, 859, 860, 882, 884, 913, 921, 954, 958, 1026, 1031, 1047, 1048, 1054, 1132, 1223, 1235, 1238, 1240, 1241, 1267, 1277, 1279, 1291, 1328, 1330, 1333, 1349, 1354, 1379], "without_fil": [152, 163, 164], "wod": [718, 1300], "womp": [315, 349, 919, 954], "word": [151, 707, 708, 717, 718, 729, 1311, 1372], "work": [41, 72, 78, 148, 149, 154, 158, 160, 168, 288, 324, 349, 361, 363, 399, 422, 423, 426, 427, 497, 506, 549, 578, 585, 586, 610, 611, 613, 615, 617, 618, 627, 698, 702, 703, 711, 722, 746, 796, 838, 899, 906, 925, 954, 958, 960, 967, 968, 1004, 1027, 1028, 1033, 1036, 1122, 1166, 1195, 1280, 1284, 1285, 1293, 1304, 1335, 1349], "workaround": 349, "workbook": [41, 153, 159, 349], "workday_raas_format": 195, "worker": [899, 954], "working_with_conditional_format": [41, 349], "working_with_sparklin": [41, 349], "worksheet": [41, 153, 159, 349], "workspac": 187, "workspace_url": 187, "world": [1, 21, 685, 709, 716, 717, 718, 960, 1173, 1267, 1291, 1298, 1299, 1300, 1360, 1363, 1372], "wors": [912, 954], "worth": [549, 1166], "worthwhil": [171, 173], "would": [103, 148, 149, 162, 207, 307, 311, 349, 352, 374, 385, 445, 554, 585, 586, 597, 627, 637, 761, 763, 838, 979, 990, 1054, 1171, 1225, 1330, 1349, 1354, 1375], "wrap": [85, 137, 419, 523, 585, 838, 1023, 1349], "wrap_numer": [419, 838, 1023, 1349], "wrapper": [63, 860, 954], "writabl": [36, 38, 43, 44, 45, 46, 47, 289, 307, 349, 1330, 1349], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 147, 149, 154, 202, 213, 349, 427, 601, 604, 838, 886, 910, 954, 960, 1036, 1349], "write_avro": 349, "write_clipboard": [147, 349], "write_csv": [37, 149, 162, 349], "write_databas": 349, "write_delta": 349, "write_excel": 349, "write_iceberg": 349, "write_ipc": [154, 349], "write_ipc_stream": 349, "write_json": 349, "write_markdown_frame_to_stdout": 202, "write_ndjson": [45, 349], "write_parquet": 349, "write_t": [47, 349], "write_to_dataset": [47, 349], "writeabl": [307, 349, 1330, 1349], "writer": [40, 349], "writer_properti": [40, 349], "writerproperti": [40, 349], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 289, 349, 600, 907, 954], "ww": [1372, 1379], "www": [704, 734, 1286], "x": [28, 56, 64, 87, 106, 131, 137, 148, 149, 151, 153, 159, 162, 175, 176, 178, 206, 225, 243, 246, 248, 253, 273, 283, 284, 313, 316, 317, 349, 352, 358, 360, 362, 381, 386, 406, 432, 439, 491, 492, 507, 511, 513, 515, 537, 544, 556, 582, 584, 585, 586, 606, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 626, 632, 640, 641, 642, 646, 674, 677, 713, 736, 737, 742, 745, 752, 754, 756, 759, 760, 766, 770, 772, 773, 775, 786, 798, 799, 802, 804, 807, 812, 817, 822, 828, 838, 882, 888, 911, 913, 920, 954, 959, 960, 991, 1030, 1042, 1118, 1202, 1229, 1230, 1257, 1260, 1295, 1328, 1332, 1333, 1349, 1354, 1361, 1362, 1365, 1371, 1372, 1377, 1379], "x00": [401, 402, 403, 404, 405, 407, 687, 1006, 1007, 1008, 1009, 1010, 1012, 1269], "x01": [405, 1010], "x05": [405, 1010], "x07": 406, "x1": 406, "x10": [405, 1010], "x80": 406, "x83": 406, "x88": 406, "x8e": 406, "x99": 406, "x_": [494, 838, 1110, 1349], "x_0": [317, 349, 493, 494, 495, 496, 838, 1109, 1110, 1111, 1112, 1349], "x_1": [317, 349, 494, 838, 1110, 1349], "x_2": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "x_i": [494, 838, 1110, 1349], "x_invers": [632, 838], "x_pow_8": 1371, "x_round": 1371, "x_round_1": 1371, "x_squar": [632, 838], "x_t": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "x_uniqu": [609, 838], "x_y": [386, 556], "xb": 406, "xb9neq": 406, "xbd": 406, "xc14": 406, "xd3": 406, "xdist": 1380, "xee": 406, "xf4v": 406, "xf9": 406, "xfb": 406, "xff": [401, 402, 403, 404, 407, 687, 1006, 1007, 1008, 1009, 1012, 1269], "xi": [693, 1275], "xl": 153, "xlog2": [608, 632, 838], "xlsb": 153, "xlsx": [41, 153, 349], "xlsx2csv": [153, 170], "xlsxwriter": [41, 170, 349], "xor": [416, 838, 1021, 1349, 1368], "xor_xi": [752, 838], "xx": [11, 57, 59, 182, 217, 296, 349, 864, 954, 960, 1365, 1372, 1379], "xxx": [221, 349, 734, 867, 954], "xy": [57, 59], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 358, 686, 693, 838, 1268, 1275, 1326, 1349, 1372], "y": [28, 56, 64, 87, 106, 131, 137, 175, 176, 178, 206, 225, 246, 248, 253, 273, 283, 284, 313, 316, 317, 349, 352, 358, 360, 362, 381, 386, 406, 474, 477, 491, 492, 511, 513, 537, 544, 556, 584, 586, 609, 611, 613, 615, 617, 618, 621, 622, 626, 640, 641, 642, 646, 721, 723, 724, 736, 745, 752, 754, 756, 759, 760, 770, 775, 782, 798, 802, 804, 807, 817, 822, 838, 882, 911, 913, 920, 954, 959, 960, 991, 1030, 1087, 1090, 1229, 1230, 1303, 1305, 1306, 1349, 1354, 1365, 1372, 1373, 1379], "y_": [493, 494, 495, 496, 838, 1109, 1110, 1111, 1112, 1349], "y_0": [317, 349, 493, 494, 495, 496, 838, 1109, 1110, 1111, 1112, 1349], "y_1": [317, 349], "y_i": [494, 838, 1110, 1349], "y_mul": 736, "y_t": [493, 495, 496, 838, 1109, 1111, 1112, 1349], "y_uniqu": [609, 838], "ya": [711, 1293], "ya29": 164, "year": [52, 54, 239, 254, 281, 296, 319, 349, 445, 457, 458, 467, 468, 470, 472, 485, 486, 647, 650, 652, 654, 656, 658, 661, 663, 665, 763, 776, 777, 778, 779, 780, 781, 825, 826, 838, 878, 883, 903, 954, 960, 1054, 1066, 1067, 1080, 1081, 1083, 1085, 1098, 1099, 1373], "yellow": [349, 353, 401, 402, 403, 404, 407], "yield": [134, 136, 148, 149, 150, 162, 225, 227, 250, 313, 349, 507, 585, 627, 838, 954, 1108, 1115, 1349], "you": [1, 11, 15, 41, 47, 51, 56, 63, 64, 130, 132, 133, 134, 135, 136, 145, 148, 149, 150, 151, 153, 154, 157, 158, 160, 162, 166, 168, 202, 209, 227, 230, 239, 250, 251, 254, 258, 269, 273, 277, 281, 282, 283, 284, 296, 303, 306, 312, 313, 314, 316, 335, 349, 352, 417, 418, 422, 445, 464, 465, 467, 471, 474, 477, 497, 503, 523, 549, 577, 585, 586, 601, 627, 632, 639, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 673, 685, 702, 707, 708, 709, 729, 732, 743, 744, 763, 772, 777, 780, 782, 786, 796, 800, 810, 813, 817, 829, 838, 854, 860, 874, 878, 883, 899, 900, 903, 910, 913, 917, 918, 920, 929, 937, 954, 958, 960, 1022, 1027, 1054, 1077, 1078, 1084, 1087, 1090, 1115, 1137, 1166, 1202, 1221, 1227, 1267, 1284, 1289, 1290, 1291, 1311, 1328, 1334, 1349, 1354, 1359, 1364, 1380], "your": [39, 41, 55, 56, 97, 143, 148, 149, 150, 151, 153, 168, 202, 251, 253, 258, 283, 284, 287, 303, 323, 328, 335, 349, 352, 450, 494, 508, 586, 694, 721, 723, 724, 731, 800, 838, 882, 888, 905, 924, 930, 937, 954, 958, 1059, 1110, 1202, 1276, 1303, 1305, 1306, 1313, 1349, 1354, 1380], "yy": [11, 57, 59, 182, 217, 296, 349, 864, 954, 960, 1365, 1372, 1379], "yyi": [221, 349, 734, 867, 954], "yyyi": [41, 349], "yz": [57, 59], "z": [41, 64, 87, 137, 176, 225, 246, 248, 253, 283, 284, 313, 316, 317, 349, 358, 360, 362, 515, 544, 586, 611, 613, 615, 617, 618, 626, 640, 641, 642, 685, 693, 695, 697, 709, 721, 724, 754, 756, 775, 802, 804, 807, 813, 817, 822, 838, 882, 911, 913, 920, 954, 959, 960, 1118, 1229, 1230, 1267, 1275, 1277, 1279, 1291, 1303, 1306, 1349, 1361, 1365, 1377, 1379], "z_0": [317, 349], "z_1": [317, 349], "zap": 960, "zero": [29, 41, 130, 131, 146, 148, 149, 154, 156, 160, 177, 180, 206, 229, 239, 251, 282, 296, 301, 307, 308, 349, 502, 577, 582, 669, 677, 731, 745, 838, 857, 873, 878, 954, 1035, 1118, 1194, 1260, 1313, 1324, 1330, 1331, 1349, 1371, 1377], "zero_copy_onli": [1330, 1349], "zfill": [706, 752, 838, 1288], "zip": 1380, "zip_with": [232, 349, 1349], "zone": [71, 178, 179, 182, 446, 450, 471, 494, 724, 779, 780, 781, 838, 960, 1055, 1059, 1084, 1110, 1306, 1349], "zoneinfo": [71, 960], "zoom": [41, 349], "zstd": [40, 43, 44, 47, 49, 51, 349, 954], "zz": [182, 217, 296, 349, 864, 954, 1365, 1372, 1379], "zzz": 734, "\u03bc": [137, 210, 239, 251, 281, 283, 284, 303, 319, 349, 446, 447, 449, 450, 451, 452, 454, 456, 459, 461, 462, 464, 465, 466, 467, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 647, 650, 652, 654, 656, 658, 661, 663, 665, 721, 724, 779, 780, 781, 782, 788, 838, 856, 878, 903, 954, 960, 1055, 1056, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1070, 1071, 1075, 1077, 1078, 1079, 1080, 1084, 1085, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1101, 1303, 1306, 1372], "\u0441\u0438\u043d\u0438\u0439": 1372, "\u0967\u096f\u096f\u096f": 960, "\u0968\u0966\u096d\u096d": 960, "\u4eac\u90fd": 960, "\u5927\u962a": 960, "\u6771\u4eac": [422, 423, 702, 703, 960, 1027, 1028, 1284, 1285], "\u90fd\u5e02": 960, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [704, 1286], "\uff54\uff45\uff53\uff54": 1372, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1372, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1372, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1372, "\ud835\udf0b": 1371}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1365, 1378], "IF": 1369, "__array__": [204, 962], "__arrow_c_stream__": [205, 963], "__dataframe__": 206, "__getitem__": [207, 964], "__iter__": 327, "ab": [357, 965, 1371], "aco": 1374, "acosd": 1374, "add": 358, "add_business_dai": [445, 1054], "agg": [328, 930], "agg_group": 359, "aggreg": [203, 356, 852, 961, 1366], "alia": [360, 966], "alias": [1366, 1371, 1372], "align_fram": 56, "all": [329, 361, 377, 540, 753, 931, 967, 982, 1157, 1378], "all_horizont": 754, "and_": 362, "ani": [363, 378, 541, 755, 968, 983, 1158], "any_horizont": 756, "api": [1, 57, 58, 59, 60, 850, 1377], "append": [364, 969], "approx_n_uniqu": [208, 365, 757, 853, 970], "arang": 758, "arcco": [366, 971], "arccosh": [367, 972], "arcsin": [368, 973], "arcsinh": [369, 974], "arctan": [370, 975], "arctan2": 759, "arctan2d": 760, "arctanh": [371, 976], "arg_max": [372, 379, 542, 977, 984, 1159], "arg_min": [373, 380, 543, 978, 985, 1160], "arg_sort": [374, 979], "arg_sort_bi": 761, "arg_tru": [375, 980], "arg_uniqu": [376, 981], "arg_wher": 762, "arr": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "arrai": [65, 830, 1341, 1367], "array_agg": 1367, "array_contain": 1367, "array_get": 1367, "array_length": 1367, "array_low": 1367, "array_mean": 1367, "array_revers": 1367, "array_sum": 1367, "array_to_str": 1367, "array_uniqu": 1367, "array_upp": 1367, "asin": 1374, "asind": 1374, "assert": 1380, "assert_frame_equ": 171, "assert_frame_not_equ": 172, "assert_series_equ": 173, "assert_series_not_equ": 174, "atan": 1374, "atan2": 1374, "atan2d": 1374, "atand": 1374, "attribut": [344, 949, 1342], "avail": 1, "avg": 1366, "avro": 851, "base_utc_offset": [446, 1055], "basepartitioncontext": 140, "batched_read": 139, "batchedcsvread": 139, "bin": [401, 402, 403, 404, 405, 406, 407, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "binari": [66, 831, 844, 1343], "bit_and": 1368, "bit_count": 1368, "bit_length": 1372, "bit_or": 1368, "bit_xor": 1368, "bitwis": 1368, "bitwise_and": [408, 1013], "bitwise_count_on": [409, 1014], "bitwise_count_zero": [410, 1015], "bitwise_leading_on": [411, 1016], "bitwise_leading_zero": [412, 1017], "bitwise_or": [413, 1018], "bitwise_trailing_on": [414, 1019], "bitwise_trailing_zero": [415, 1020], "bitwise_xor": [416, 1021], "boolean": [67, 832, 1344], "bottom_k": [209, 417, 854, 1022], "bottom_k_bi": 418, "build_info": 61, "business_day_count": 763, "cach": 855, "cancel": 946, "cast": [210, 419, 856, 1023, 1375], "cast_time_unit": [447, 1056], "cat": [420, 421, 422, 423, 424, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "catalog": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "cataloginfo": 193, "categor": 68, "categori": [833, 1345], "categoricalremappingwarn": 99, "cbrt": [425, 1032, 1371], "ceil": [426, 1033, 1371], "centuri": [448, 1057], "chronoformatwarn": 100, "chunk_length": 1034, "claus": 1365, "clear": [211, 857, 1035], "clip": [427, 1036], "clipboard": 851, "clone": [212, 858, 1037], "cloud": 851, "co": [428, 1038, 1374], "coalesc": [764, 1369], "col": 834, "collect": 859, "collect_al": 62, "collect_all_async": 63, "collect_async": 860, "collect_schema": [213, 861], "column": [175, 176, 214, 835, 862], "columninfo": 194, "columnnotfounderror": 101, "combin": [449, 1058], "comparison": [844, 1353], "comput": [345, 836, 1346], "computeerror": 102, "concat": [64, 544, 683, 1161, 1265, 1372], "concat_arr": 765, "concat_list": 766, "concat_str": 767, "concat_w": 1372, "condit": 1369, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 202], "conjunct": 844, "contain": [381, 401, 545, 684, 986, 1006, 1162, 1266], "contains_ani": [685, 1267], "context": 202, "convers": 849, "convert_time_zon": [450, 1059], "corr": [215, 768], "cosd": 1374, "cosh": [429, 1039], "cot": [430, 1040, 1374], "cotd": 1374, "count": [216, 330, 431, 769, 863, 932, 1041, 1366], "count_match": [382, 546, 686, 987, 1163, 1268], "cov": 770, "creat": 1379, "create_list_strategi": 177, "credenti": 851, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [139, 851], "cum_count": [432, 771, 1042], "cum_fold": 772, "cum_max": [433, 1043], "cum_min": [434, 1044], "cum_prod": [435, 1045], "cum_reduc": 773, "cum_sum": [436, 774, 1046], "cum_sum_horizont": 775, "cumulative_ev": [437, 1047], "customufuncwarn": 103, "cut": [438, 1048], "dai": [453, 1062], "data": 354, "databas": 851, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 178, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349], "dataorientationwarn": 104, "dataset": 851, "datasourceformat": 195, "datatyp": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 354], "date": [70, 451, 776, 1060, 1372], "date_part": 1373, "date_rang": [777, 778], "datetim": [71, 452, 779, 1061], "datetime_rang": [780, 781], "decim": 72, "decod": [402, 687, 1007, 1269], "decor": 202, "defer": 95, "degre": [439, 1374], "delet": 1379, "delta": 851, "describ": [217, 864, 1049], "descript": [346, 950, 1347], "deseri": [218, 440, 865], "diff": [441, 547, 1050, 1164], "disable_string_cach": 96, "distinct": 1365, "div": 1371, "document": 1377, "dot": [442, 1051], "drop": [219, 866, 1379], "drop_in_plac": 220, "drop_nan": [221, 443, 867, 1052], "drop_nul": [222, 444, 548, 868, 1053, 1165], "dst_offset": [454, 1063], "dt": [445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102], "dtype": [179, 223, 869, 1103], "duplicateerror": 105, "durat": [73, 782], "element": 783, "enable_string_cach": 97, "encod": [403, 688, 1008, 1270], "ends_with": [404, 420, 689, 1009, 1024, 1271, 1372], "engine_config": 929, "entropi": [490, 1104], "enum": 74, "epoch": [455, 1064], "eq": [491, 590, 1105], "eq_miss": [492, 1106], "equal": [224, 1107], "error": 355, "escape_regex": [98, 690, 1272], "estimated_s": [225, 1108], "eval": [549, 1166], "ewm_mean": [493, 1109], "ewm_mean_bi": [494, 1110], "ewm_std": [495, 1111], "ewm_var": [496, 1112], "exampl": [1, 960, 1380], "excel": 851, "except": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 355, 1378], "exclud": [497, 784], "execut": 1358, "execute_glob": 1359, "exp": [498, 1113, 1371], "explain": [870, 1379], "explain_al": 129, "explod": [226, 383, 499, 550, 691, 871, 988, 1114, 1167, 1273], "export": [347, 1348], "expr": [357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "express": [838, 958, 1377], "extend": [1, 227, 1115], "extend_const": [500, 1116], "extract": [692, 1274, 1373], "extract_al": [693, 1275], "extract_group": [694, 1276], "extract_mani": [695, 1277], "feather": 851, "fetch": 947, "fetch_block": 948, "field": [75, 732, 1314, 1315], "fill_nan": [228, 501, 872, 1117], "fill_nul": [229, 502, 873, 1118], "filter": [230, 503, 874, 1119], "find": [696, 1278], "find_mani": [697, 1279], "first": [331, 384, 504, 551, 785, 875, 933, 989, 1120, 1168, 1366], "flag": [231, 1121], "flatten": 505, "float32": 76, "float64": 77, "floor": [506, 1122, 1371], "floordiv": 507, "fold": [232, 786], "format": 787, "frame": 1377, "from": 1365, "from_arrow": 130, "from_datafram": 131, "from_dict": [132, 133], "from_epoch": 788, "from_json": 508, "from_numpi": 134, "from_panda": 135, "from_record": 136, "from_repr": 137, "function": [1, 837, 849, 960, 1370], "gather": [509, 552, 1123, 1169], "gather_everi": [233, 510, 553, 876, 1124, 1170], "ge": [511, 1125], "get": [385, 512, 554, 990, 1171], "get_categori": [421, 1025], "get_chunk": 1126, "get_column": [234, 236], "get_column_index": 235, "get_index_typ": 138, "get_polars_schema": 198, "get_table_info": 188, "glimps": 237, "global": 1377, "gpuengin": [929, 951], "greatest": 1369, "group": [789, 1365], "group_bi": [238, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 877, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945], "group_by_dynam": [239, 878], "groupbi": [327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 348, 952], "gt": [513, 1127], "has_multiple_output": 591, "has_nul": [514, 1128], "has_valid": 1129, "hash": [515, 1130], "hash_row": 240, "have": 1365, "head": [241, 332, 516, 555, 698, 790, 879, 934, 1131, 1172, 1280], "height": 242, "helper": 1380, "hist": [517, 1132], "hour": [456, 1065], "hstack": 243, "iceberg": 851, "ifnul": 1369, "implod": [518, 791, 1133], "import": 960, "in_process": [946, 947, 948], "index": 0, "index_of": [519, 1134], "initcap": 1372, "inprocessqueri": [946, 947, 948, 953], "input": 851, "insert_column": 244, "inspect": [520, 880], "instanc": 202, "int128": 78, "int16": 79, "int32": 80, "int64": 81, "int8": 82, "int_rang": [792, 793], "interfac": 1376, "interpol": [245, 521, 881, 1135], "interpolate_bi": [522, 1136], "intersect": 1378, "introduct": 1377, "invalidoperationerror": 106, "io": [139, 140, 141, 142, 143, 958], "ipc": 851, "is_between": [523, 1137], "is_column": 592, "is_column_select": 593, "is_dupl": [246, 524, 1138], "is_empti": [247, 1139], "is_finit": [525, 1140], "is_first_distinct": [526, 1141], "is_in": [527, 1142], "is_infinit": [528, 1143], "is_last_distinct": [529, 1144], "is_leap_year": [457, 1066], "is_liter": 594, "is_loc": 1026, "is_nan": [530, 1145], "is_not_nan": [531, 1146], "is_not_nul": [532, 1147], "is_nul": [533, 1148], "is_regex_project": 595, "is_sort": 1149, "is_uniqu": [248, 534, 1150], "iso_year": [458, 1067], "item": [249, 1151], "iter_column": 250, "iter_row": 251, "iter_slic": 252, "join": [253, 386, 556, 699, 882, 991, 1173, 1281, 1365], "join_asof": [254, 883], "join_wher": [255, 884], "json": 851, "json_decod": [700, 1282], "json_encod": [733, 1316], "json_norm": 144, "json_path_match": [701, 1283], "keep": 610, "keyedpartit": 141, "keyedpartitioncontext": 142, "kurtosi": [535, 1152], "lake": 851, "last": [333, 387, 536, 557, 794, 885, 935, 992, 1153, 1174, 1366], "lazi": [256, 886], "lazyfram": [48, 49, 50, 51, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 954], "lazygroupbi": [930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945], "le": [537, 1154], "least": 1369, "left": 1372, "len": [334, 538, 558, 795, 936, 1155, 1175], "len_byt": [422, 702, 1027, 1284], "len_char": [423, 703, 1028, 1285], "length": 1372, "limit": [257, 539, 887, 1156, 1365], "linear_spac": [796, 797], "list": [83, 180, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 839, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1350], "list_catalog": 189, "list_namespac": 190, "list_tabl": 191, "lit": 798, "ln": 1371, "load": [2, 202], "load_from_fil": 3, "load_profil": 181, "log": [580, 1197, 1371], "log10": [581, 1198, 1371], "log1p": [582, 1199, 1371], "log2": 1371, "lower": 1372, "lower_bound": [583, 1200], "lt": [584, 1201], "ltrim": 1372, "manag": 202, "manipul": [351, 842, 956, 1352], "map": 611, "map_batch": [585, 799, 888], "map_el": [586, 1202], "map_field": 612, "map_group": [335, 800, 937], "map_row": 258, "mapwithoutreturndtypewarn": 107, "math": 1371, "max": [259, 336, 388, 559, 587, 801, 889, 938, 993, 1068, 1176, 1203, 1366], "max_horizont": [260, 802], "mean": [261, 337, 560, 588, 803, 890, 939, 1069, 1177, 1204], "mean_horizont": [262, 804], "median": [263, 338, 389, 561, 589, 805, 891, 940, 994, 1070, 1178, 1205, 1366], "melt": [264, 892], "merge_sort": [265, 893], "meta": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 840], "metadata": 957, "method": 1377, "microsecond": [459, 1071], "millennium": [460, 1072], "millisecond": [461, 1073], "min": [266, 339, 390, 562, 605, 806, 894, 941, 995, 1074, 1179, 1206, 1366], "min_horizont": [267, 807], "minut": [462, 1075], "miscellan": [350, 841, 849, 955, 1351], "mod": [606, 1371], "mode": [607, 1207], "moduleupgraderequirederror": 108, "month": [463, 1076], "month_end": [464, 1077], "month_start": [465, 1078], "mul": 608, "multipl": [202, 849], "n_chunk": [268, 1208], "n_uniqu": [269, 340, 391, 563, 609, 808, 942, 996, 1180, 1209], "name": [610, 611, 612, 613, 614, 615, 616, 617, 618, 835, 843, 1210, 1378], "namespaceinfo": 196, "nan_max": [619, 1211], "nan_min": [620, 1212], "nanosecond": [466, 1079], "ne": [596, 621, 1213], "ne_miss": [622, 1214], "neg": 623, "nest": 354, "new": 1, "new_from_index": 1215, "next_batch": 139, "nodataerror": 109, "normal": [704, 1286, 1372], "norowsreturnederror": 110, "not_": [624, 1216], "nth": 809, "null": 84, "null_count": [270, 625, 895, 1217], "nullif": 1369, "numer": [354, 844, 1353], "object": 85, "octet_length": 1372, "od": 851, "offset": 1365, "offset_bi": [467, 1080], "ones": 810, "oper": [844, 960, 1353, 1378, 1379], "option": 202, "or_": 626, "order": 1365, "ordinal_dai": [468, 1081], "other": 354, "outofboundserror": 111, "output": 851, "output_nam": 597, "over": 627, "pad_end": [705, 1287], "pad_start": [706, 1288], "panic": 355, "panicexcept": 112, "parametercollisionerror": 113, "parametr": [175, 176, 177, 178, 179, 180, 181, 182, 183, 1380], "parquet": 851, "partit": [140, 141, 142, 851], "partition_bi": 271, "partitionbykei": 52, "partitionmaxs": 53, "partitionpart": 54, "pct_chang": [628, 1218], "peak_max": [629, 1219], "peak_min": [630, 1220], "performancewarn": 114, "pi": 1371, "pipe": [272, 631, 896], "pivot": 273, "plot": [352, 1354], "plugin": [143, 145, 958], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1380], "polarserror": 115, "polarsinefficientmapwarn": 116, "polarswarn": 117, "pop": 598, "pow": [632, 1221, 1371], "prefix": 613, "prefix_field": 614, "product": [274, 633, 1222], "profil": [897, 1380], "provid": 1, "pyarrow": 851, "python": [850, 1377], "qcut": [634, 1223], "quantil": [275, 341, 635, 811, 898, 943, 1224], "quantile_cont": 1366, "quantile_disc": 1366, "quarter": [469, 1082], "queri": [849, 1377], "radian": [636, 1374], "random": 849, "rank": [637, 1225], "read_avro": 146, "read_clipboard": 147, "read_csv": 148, "read_csv_batch": 149, "read_databas": 150, "read_database_uri": 151, "read_delta": 152, "read_excel": 153, "read_ipc": 154, "read_ipc_schema": 155, "read_ipc_stream": 156, "read_json": 157, "read_ndjson": 158, "read_od": 159, "read_parquet": 160, "read_parquet_schema": 161, "rechunk": [276, 638, 1226], "reduc": 812, "refer": 850, "regexp_lik": 1372, "regist": 1360, "register_dataframe_namespac": 57, "register_expr_namespac": 58, "register_glob": 1361, "register_io_sourc": 143, "register_lazyframe_namespac": 59, "register_mani": 1362, "register_plugin_funct": 145, "register_series_namespac": 60, "registr": 1, "reinterpret": [405, 639, 1010, 1227], "remot": 899, "remov": [277, 900], "renam": [278, 901, 1228], "rename_field": [734, 1317], "repeat": 813, "repeat_bi": 640, "replac": [470, 641, 707, 1083, 1229, 1289, 1372], "replace_al": [708, 1290], "replace_column": 279, "replace_mani": [709, 1291], "replace_strict": [642, 1230], "replace_time_zon": [471, 1084], "reshap": [643, 1231], "restore_default": 4, "revers": [280, 392, 564, 644, 710, 902, 997, 1181, 1232, 1292, 1372], "right": 1372, "rle": [645, 1233], "rle_id": [646, 1234], "roll": [281, 647, 903], "rolling_corr": 814, "rolling_cov": 815, "rolling_map": [648, 1235], "rolling_max": [649, 1236], "rolling_max_bi": 650, "rolling_mean": [651, 1237], "rolling_mean_bi": 652, "rolling_median": [653, 1238], "rolling_median_bi": 654, "rolling_min": [655, 1239], "rolling_min_bi": 656, "rolling_quantil": [657, 1240], "rolling_quantile_bi": 658, "rolling_skew": [659, 1241], "rolling_std": [660, 1242], "rolling_std_bi": 661, "rolling_sum": [662, 1243], "rolling_sum_bi": 663, "rolling_var": [664, 1244], "rolling_var_bi": 665, "root_nam": 599, "round": [472, 666, 1085, 1245, 1371], "round_sig_fig": [667, 1246], "row": [282, 283], "rows_by_kei": 284, "rowserror": 118, "rtrim": 1372, "sampl": [285, 565, 668, 1182, 1247], "save": [5, 202], "save_to_fil": 6, "scan_csv": 162, "scan_delta": 163, "scan_iceberg": 164, "scan_ipc": 165, "scan_ndjson": 166, "scan_parquet": 167, "scan_pyarrow_dataset": 168, "scan_tabl": 192, "scatter": 1248, "schema": [286, 904, 959, 1318], "schemaerror": 121, "schemafieldnotfounderror": 122, "search_sort": [669, 1249], "second": [473, 1086], "select": [287, 351, 816, 842, 905, 956, 1352, 1365], "select_seq": [288, 906], "selector": 960, "seri": [182, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1349], "serial": [289, 350, 600, 907, 955], "set": [960, 1250, 1378], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [566, 1183], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [567, 1184], "set_profil": 183, "set_random_se": 169, "set_sort": [290, 670, 908, 1251], "set_streaming_chunk_s": 15, "set_symmetric_differ": [568, 1185], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [569, 1186], "set_verbos": 30, "shape": [291, 1252], "shapeerror": 123, "shift": [292, 393, 570, 671, 909, 998, 1187, 1253], "show": 1379, "show_graph": [601, 910], "show_vers": 170, "shrink_dtyp": [672, 1254], "shrink_to_fit": [293, 1255], "shuffl": [673, 1256], "sign": [674, 1257, 1371], "sin": [675, 1258, 1374], "sind": 1374, "sinh": [676, 1259], "sink_csv": 48, "sink_ipc": 49, "sink_ndjson": 50, "sink_parquet": 51, "size": [406, 1011], "skew": [677, 1260], "slice": [294, 571, 678, 711, 911, 1188, 1261, 1293], "sort": [295, 394, 572, 679, 912, 999, 1189, 1262], "sort_bi": 680, "split": [712, 1294], "split_exact": [713, 1295], "split_part": 1372, "splitn": [714, 1296], "sql": [296, 817, 913, 1365, 1370, 1376, 1377], "sql_expr": 818, "sqlcontext": [1358, 1359, 1360, 1361, 1362, 1363, 1364, 1377], "sqlinterfaceerror": 119, "sqlsyntaxerror": 120, "sqrt": [681, 1263, 1371], "starts_with": [407, 424, 715, 1012, 1029, 1297, 1372], "state": [31, 202], "std": [297, 395, 573, 682, 819, 914, 1000, 1190, 1264], "stddev": 1366, "str": [683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313], "strategi": 1380, "strftime": [474, 1087, 1373], "string": [86, 354, 845, 1355, 1372], "string_to_arrai": 1372, "stringcach": [55, 849], "stringcachemismatcherror": 124, "strip_char": [716, 1298], "strip_chars_end": [717, 1299], "strip_chars_start": [718, 1300], "strip_prefix": [719, 1301], "strip_suffix": [720, 1302], "strpo": 1372, "strptime": [721, 1303, 1372], "struct": [87, 732, 733, 734, 735, 736, 820, 846, 1314, 1315, 1316, 1317, 1318, 1319, 1356], "structfieldnotfounderror": 125, "style": 353, "sub": 737, "substr": 1372, "suffix": 615, "suffix_field": 616, "sum": [298, 342, 396, 574, 738, 821, 915, 944, 1001, 1191, 1320, 1366], "sum_horizont": [299, 822], "tabl": [1363, 1379], "tableinfo": [197, 198], "tabletyp": 199, "tail": [300, 343, 575, 722, 739, 823, 916, 945, 1192, 1304, 1321], "tan": [740, 1322, 1374], "tand": 1374, "tanh": [741, 1323], "tempor": [354, 847, 1357, 1373], "test": [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 1380], "thread_pool_s": 184, "threadpool_s": 185, "time": [88, 475, 824, 1088], "time_rang": [825, 826], "timestamp": [476, 1089, 1372], "to_arrai": [576, 1193], "to_arrow": [301, 1324], "to_dat": [723, 1305], "to_datetim": [724, 1306], "to_decim": [725, 1307], "to_dict": [302, 303], "to_dummi": [304, 1325], "to_fram": 1326, "to_init_repr": [305, 1327], "to_integ": [726, 1308], "to_jax": [306, 1328], "to_list": [397, 1002, 1329], "to_loc": 1030, "to_lowercas": [617, 727, 1309], "to_numpi": [307, 1330], "to_panda": [308, 1331], "to_phys": [742, 1332], "to_seri": 309, "to_str": [477, 1090], "to_struct": [310, 398, 577, 1003, 1194], "to_tim": [728, 1310], "to_titlecas": [729, 1311], "to_torch": [311, 1333], "to_uppercas": [618, 730, 1312], "toomanyrowsreturnederror": 126, "top_k": [312, 743, 917, 1334], "top_k_bi": 744, "total_dai": [478, 1091], "total_hour": [479, 1092], "total_microsecond": [480, 1093], "total_millisecond": [481, 1094], "total_minut": [482, 1095], "total_nanosecond": [483, 1096], "total_second": [484, 1097], "transpos": 313, "tree_format": 602, "trigonometri": 1374, "truediv": 745, "truncat": [485, 1098, 1379], "try_cast": 1375, "type": [354, 1375], "uint16": 89, "uint32": 90, "uint64": 91, "uint8": 92, "undo_alias": 603, "union": 1378, "uniqu": [314, 399, 578, 746, 918, 1004, 1195, 1335], "unique_count": [747, 1336], "uniti": [193, 194, 195, 196, 197, 198, 199, 201], "unknown": 93, "unnest": [315, 735, 919, 1319, 1367, 1379], "unpivot": [316, 920], "unregist": 1364, "unstablewarn": 127, "unstack": 317, "unsuitablesqlerror": 128, "updat": [318, 921], "upper": 1372, "upper_bound": [748, 1337], "upsampl": 319, "us": 202, "uses_lexical_ord": 1031, "using_string_cach": 186, "utf8": 94, "value_count": [749, 1338], "var": [320, 400, 579, 750, 827, 922, 1005, 1196, 1339], "varianc": 1366, "vstack": 321, "warn": 355, "week": [486, 1099], "weekdai": [487, 1100], "when": 828, "where": [751, 1365], "width": [322, 923], "window": 848, "with_column": [323, 924], "with_columns_seq": [324, 925], "with_context": 926, "with_field": 736, "with_row_count": [325, 927], "with_row_index": [326, 928], "with_time_unit": [488, 1101], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 604], "write_ndjson": 46, "write_parquet": 47, "xor": 752, "year": [489, 1102], "zero": 829, "zfill": [731, 1313], "zip_with": 1340}})